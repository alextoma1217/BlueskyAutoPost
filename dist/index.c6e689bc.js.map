{"mappings":"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F;YACF;YACA,YAAY;gBACV,MAAM;gBACN,UAAU;oBACR;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAA;gBAEF,YAAY;oBACV,KAAK;wBACH,MAAM;wBACN,QAAQ;oBACV;oBACA,KAAK;wBACH,MAAM;wBACN,QAAQ;oBACV;oBACA,OAAO;wBACL,MAAM;oBACR;oBACA,UAAU;wBACR,MAAM;wBACN,OAAO;4BACL,MAAM;4BACN,QAAQ;wBACV;oBACF;oBACA,WAAW;wBACT,MAAM;wBACN,QAAQ;oBACV;oBACA,YAAY;wBACV,MAAM;wBACN,KAAK;oBACP;oBACA,MAAM;wBACJ,MAAM;wBACN,KAAK;oBACP;gBACF;YACF;YACA,kBAAkB;gBAChB,MAAM;gBACN,UAAU;oBACR;oBACA;oBACA;oBACA;oBACA;oBACA;oBACA;iBAAA;gBAEF,YAAY;oBACV,KAAK;wBACH,MAAM;wBACN,QAAQ;oBACV;oBACA,KAAK;wBACH,MAAM;wBACN,QAAQ;oBACV;oBACA,OAAO;wBACL,MAAM;oBACR;oBACA,OAAO;wBACL,MAAM;wBACN,OAAO;4BACL,MAAM;4BACN,KAAK;wBACP;oBACF;oBACA,WAAW;wBACT,MAAM;wBACN,QAAQ;oBACV;oBACA,YAAY;wBACV,MAAM;wBACN,KAAK;oBACP;oBACA,MAAM;wBACJ,MAAM;wBACN,KAAK;oBACP;gBACF;YACF;YACA,YAAY;gBACV,MAAM;gBACN,UAAU,EADJ;gBAEN,YAAY;oBACV,eAAe;wBACb,MAAM;wBACN,KAAK;oBACP;gBACF;YACF;YACA,kBAAkB;gBAChB,MAAM;gBACN,UAAU;oBAAC;oBAAW;iBADhB;gBAEN,YAAY;oBACV,eAAe;wBACb,MAAM;wBACN,KAAK;oBACP;oBACA,SAAS;wBACP,MAAM;wBACN,OAAO;4BACL,MAAM;4BACN,KAAK;wBACP;oBACF;oBACA,SAAS;wBACP,MAAM;wBACN,OAAO;4BACL,MAAM;4BACN,KAAK;wBACP;oBACF;gBACF;YACF;YACA,UAAU;gBACR,MAAM;gBACN,UAAU;oBAAC;oBAAO;oBAAY;oBAAQ;iBA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,KAAA,CAAM,EAAE,EAAE,MAAtE;QACA,SAAS,MAAA,CAAO,kBAAkB;QAClC,IAAI,SAAS,WAAA,CAAY,KAAA,KAAU,QAAQ,KAAA,EACzC,KAAA;QAEF,SAAS,MAAA,CAAO,kBAAkB;QAClC,QAAQ,SAAS,WAAA,CAAY,KAAA,CAAM,KAAA,CAAM;IAC3C;IAEA,OAAO;AACT;A,qC;A,I,e;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;I;C;A,6B;ACjCO,SAAS,aAAa,IAAA,EAA0C;IACrE,IAAI;IACJ,MAAM,SAAkB,EAAxB;IACA;QAEE,MAAM,KAAK;QACX,MAAQ,QAAQ,GAAG,IAAA,CAAK,KAAK,KAAK,EAAI;YACpC,IAAI,CAAC,cAAc,KAAA,CAAM,EAAE,KAAK,CAAC,KAAA,CAAM,EAAA,CAAG,QAAA,CAAS,UACjD,QAAA;YAGF,MAAM,QAAQ,KAAK,KAAA,CAAM,OAAA,CAAQ,KAAA,CAAM,EAAA,EAAI,MAAM,KAAK,IAAI;YAC1D,OAAO,IAAA,CAAK;gBACV,OAAO;gBACP,OAAO;oBACL,WAAW,KAAK,qBAAA,CAAsB;oBACtC,SAAS,KAAK,qBAAA,CAAsB,QAAQ,KAAA,CAAM,EAAA,CAAG,MAAA,GA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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-b77926db019ccf1c.js","public/client-src.js","node_modules/@atproto/api/dist/index.js","node_modules/node_modules/iso-datestring-validator/dist/index.js","node_modules/@atproto/api/src/index.ts","node_modules/@atproto/common-web/src/check.ts","node_modules/node_modules/multiformats/esm/vendor/varint.js","node_modules/node_modules/multiformats/esm/src/varint.js","node_modules/node_modules/multiformats/esm/src/bytes.js","node_modules/node_modules/multiformats/esm/src/hashes/digest.js","node_modules/node_modules/multiformats/esm/src/bases/base58.js","node_modules/node_modules/multiformats/esm/vendor/base-x.js","node_modules/node_modules/multiformats/esm/src/bases/base.js","node_modules/node_modules/multiformats/esm/src/bases/base32.js","node_modules/node_modules/multiformats/esm/src/cid.js","node_modules/node_modules/multiformats/esm/src/bases/identity.js","node_modules/node_modules/multiformats/esm/src/bases/base2.js","node_modules/node_modules/multiformats/esm/src/bases/base8.js","node_modules/node_modules/multiformats/esm/src/bases/base10.js","node_modules/node_modules/multiformats/esm/src/bases/base16.js","node_modules/node_modules/multiformats/esm/src/bases/base36.js","node_modules/node_modules/multiformats/esm/src/bases/base64.js","node_modules/node_modules/multiformats/esm/src/bases/base256emoji.js","node_modules/node_modules/multiformats/esm/src/hashes/sha2-browser.js","node_modules/node_modules/multiformats/esm/src/hashes/hasher.js","node_modules/node_modules/multiformats/esm/src/hashes/identity.js","node_modules/node_modules/multiformats/esm/src/codecs/json.js","node_modules/node_modules/multiformats/esm/src/basics.js","node_modules/node_modules/uint8arrays/esm/src/util/bases.js","node_modules/node_modules/uint8arrays/esm/src/from-string.js","node_modules/node_modules/uint8arrays/esm/src/to-string.js","node_modules/@atproto/common-web/src/ipld.ts","node_modules/node_modules/zod/lib/index.mjs","node_modules/@atproto/common-web/src/types.ts","node_modules/@atproto/common-web/src/times.ts","node_modules/@atproto/common-web/src/strings.ts","node_modules/@atproto/identifier/src/reserved.ts","node_modules/@atproto/identifier/src/handle.ts","node_modules/@atproto/identifier/src/did.ts","node_modules/@atproto/nsid/src/index.ts","node_modules/@atproto/uri/src/validation.ts","node_modules/@atproto/uri/src/index.ts","node_modules/@atproto/lexicon/src/types.ts","node_modules/@atproto/lexicon/src/validators/formats.ts","node_modules/@atproto/lexicon/src/validators/primitives.ts","node_modules/@atproto/lexicon/src/blob-refs.ts","node_modules/@atproto/lexicon/src/validators/blob.ts","node_modules/@atproto/lexicon/src/validators/complex.ts","node_modules/@atproto/lexicon/src/util.ts","node_modules/@atproto/lexicon/src/validators/xrpc.ts","node_modules/@atproto/lexicon/src/validation.ts","node_modules/@atproto/lexicon/src/lexicons.ts","node_modules/@atproto/lexicon/src/serialize.ts","node_modules/@atproto/xrpc/src/types.ts","node_modules/@atproto/xrpc/src/util.ts","node_modules/@atproto/xrpc/src/client.ts","node_modules/@atproto/xrpc/src/index.ts","node_modules/@atproto/api/src/client/lexicons.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/disableInviteCodes.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getInviteCodes.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getModerationAction.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getModerationActions.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getModerationReport.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getModerationReports.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getRecord.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/getRepo.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/resolveModerationReports.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/reverseModerationAction.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/searchRepos.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/takeModerationAction.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/updateAccountHandle.ts","node_modules/@atproto/api/src/client/types/com/atproto/identity/resolveHandle.ts","node_modules/@atproto/api/src/client/types/com/atproto/identity/updateHandle.ts","node_modules/@atproto/api/src/client/types/com/atproto/label/queryLabels.ts","node_modules/@atproto/api/src/client/types/com/atproto/moderation/createReport.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/applyWrites.ts","node_modules/@atproto/api/src/client/util.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/createRecord.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/deleteRecord.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/describeRepo.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/getRecord.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/listRecords.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/putRecord.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/uploadBlob.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/createAccount.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/createInviteCode.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/createInviteCodes.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/createSession.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/deleteAccount.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/deleteSession.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/describeServer.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/getAccountInviteCodes.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/getSession.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/refreshSession.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/requestAccountDelete.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/requestPasswordReset.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/resetPassword.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getBlob.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getBlocks.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getCheckout.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getCommitPath.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getHead.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getRecord.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/getRepo.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/listBlobs.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/listRepos.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/notifyOfUpdate.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/requestCrawl.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/getProfile.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/getProfiles.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/getSuggestions.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/searchActors.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/searchActorsTypeahead.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/getAuthorFeed.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/getLikes.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/getPostThread.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/getRepostedBy.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/getTimeline.ts","node_modules/@atproto/api/src/client/types/app/bsky/graph/getFollowers.ts","node_modules/@atproto/api/src/client/types/app/bsky/graph/getFollows.ts","node_modules/@atproto/api/src/client/types/app/bsky/graph/getMutes.ts","node_modules/@atproto/api/src/client/types/app/bsky/graph/muteActor.ts","node_modules/@atproto/api/src/client/types/app/bsky/graph/unmuteActor.ts","node_modules/@atproto/api/src/client/types/app/bsky/notification/getUnreadCount.ts","node_modules/@atproto/api/src/client/types/app/bsky/notification/listNotifications.ts","node_modules/@atproto/api/src/client/types/app/bsky/notification/updateSeen.ts","node_modules/@atproto/api/src/client/types/app/bsky/unspecced/getPopular.ts","node_modules/@atproto/api/src/client/types/com/atproto/admin/defs.ts","node_modules/@atproto/api/src/client/types/com/atproto/label/defs.ts","node_modules/@atproto/api/src/client/types/com/atproto/label/subscribeLabels.ts","node_modules/@atproto/api/src/client/types/com/atproto/moderation/defs.ts","node_modules/@atproto/api/src/client/types/com/atproto/repo/strongRef.ts","node_modules/@atproto/api/src/client/types/com/atproto/server/defs.ts","node_modules/@atproto/api/src/client/types/com/atproto/sync/subscribeRepos.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/defs.ts","node_modules/@atproto/api/src/client/types/app/bsky/actor/profile.ts","node_modules/@atproto/api/src/client/types/app/bsky/embed/external.ts","node_modules/@atproto/api/src/client/types/app/bsky/embed/images.ts","node_modules/@atproto/api/src/client/types/app/bsky/embed/record.ts","node_modules/@atproto/api/src/client/types/app/bsky/embed/recordWithMedia.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/defs.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/like.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/post.ts","node_modules/@atproto/api/src/client/types/app/bsky/feed/repost.ts","node_modules/@atproto/api/src/client/types/app/bsky/graph/follow.ts","node_modules/@atproto/api/src/client/types/app/bsky/richtext/facet.ts","node_modules/@atproto/api/src/client/index.ts","node_modules/@atproto/api/src/agent.ts","node_modules/@atproto/api/src/rich-text/unicode.ts","node_modules/@atproto/api/src/rich-text/sanitization.ts","node_modules/@atproto/api/src/rich-text/detection.ts","node_modules/@atproto/api/src/rich-text/rich-text.ts","node_modules/@atproto/api/src/bsky-agent.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"21818622c6e689bc\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\n\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets\n/*: {|[string]: boolean|} */\n, assetsToDispose\n/*: Array<[ParcelRequire, string]> */\n, assetsToAccept\n/*: Array<[ParcelRequire, string]> */\n;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\n\nfunction getPort() {\n  return HMR_PORT || location.port;\n} // eslint-disable-next-line no-redeclare\n\n\nvar parent = module.bundle.parent;\n\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // Web extension context\n\n  var extCtx = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n\n  var supportsSourceURL = false;\n\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  } // $FlowFixMe\n\n\n  ws.onmessage = async function (event\n  /*: {data: string, ...} */\n  ) {\n    checkedAssets = {}\n    /*: {|[string]: boolean|} */\n    ;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data\n    /*: HMRMessage */\n    = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH); // Handle HMR Update\n\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n\n      if (handled) {\n        console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n\n        await hmrApplyUpdates(assets); // Dispose all old assets.\n\n        let processedAssets = {}\n        /*: {|[string]: boolean|} */\n        ;\n\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        } // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n\n\n        processedAssets = {};\n\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe\n\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n\n  ws.onerror = function (e) {\n    console.error(e.message);\n  };\n\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\n\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\n\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\n\nfunction getParents(bundle, id)\n/*: Array<[ParcelRequire, string]> */\n{\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction updateLink(link) {\n  var newLink = link.cloneNode();\n\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n\n  newLink.setAttribute('href', // $FlowFixMe\n  link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe\n\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\n\nvar cssTimeout = null;\n\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href\n      /*: string */\n      = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n\n    cssTimeout = null;\n  }, 50);\n}\n\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n\n      return new Promise((resolve, reject) => {\n        var _document$head;\n\n        script.onload = () => resolve(script);\n\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 ? void 0 : _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\n\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension bugfix for Chromium\n          // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {\n            if (typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n              extCtx.runtime.reload();\n              return;\n            }\n\n            asset.url = extCtx.runtime.getURL('/__parcel_hmr_proxy__?url=' + encodeURIComponent(asset.url + '?t=' + Date.now()));\n            return hmrDownload(asset);\n          }\n\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n\n          (_document$head2 = document.head) === null || _document$head2 === void 0 ? void 0 : _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\n\nfunction hmrApply(bundle\n/*: ParcelRequire */\n, asset\n/*:  HMRAsset */\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      } // $FlowFixMe\n\n\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\n\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n\n\n    delete modules[id];\n    delete bundle.cache[id]; // Now delete the orphans.\n\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\n\nfunction hmrAcceptCheck(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  } // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n\n\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n\n      parents.push(...p);\n    }\n  }\n\n  return accepted;\n}\n\nfunction hmrAcceptCheckOne(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n, depsByBundle\n/*: ?{ [string]: { [string]: string } }*/\n) {\n  var modules = bundle.modules;\n\n  if (!modules) {\n    return;\n  }\n\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n\n  if (checkedAssets[id]) {\n    return true;\n  }\n\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\n\nfunction hmrDispose(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n\n  delete bundle.cache[id];\n}\n\nfunction hmrAccept(bundle\n/*: ParcelRequire */\n, id\n/*: string */\n) {\n  // Execute the module.\n  bundle(id); // Run the accept callbacks in the new version of the module.\n\n  var cached = bundle.cache[id];\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        }); // $FlowFixMe[method-unbinding]\n\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import { BskyAgent } from '@atproto/api';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const loginForm = document.getElementById('loginForm');\n  const scheduleForm = document.getElementById('scheduleForm');\n  const stopScheduleButton = document.getElementById('stop-schedule');\n\n  let loggedInUsername = null;\n  let loggedInApi = null;\n\n  loginForm.addEventListener('submit', async (event) => {\n    event.preventDefault();\n\n    const username = document.getElementById('loginUsername').value;\n    const password = document.getElementById('loginPassword').value;\n\n    try {\n      const api = new BskyAgent({ service: 'https://bsky.social' });\n      await api.login({ identifier: username, password });\n\n      loggedInUsername = username;\n      loggedInApi = api;\n\n      loginForm.style.display = 'none';\n      scheduleForm.style.display = 'block';\n      alert('Logged in successfully!');\n    } catch (error) {\n      console.error('Error logging in:', error);\n      alert('Error logging in');\n    }\n  });\n\n  \n  scheduleForm.addEventListener('submit', async (event) => {\n    event.preventDefault();\n  \n    const message = document.getElementById('message').value;\n    const time = document.getElementById('time').value;\n  \n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username: loggedInUsername, accessToken: loggedInApi.session.accessJwt, message, time }),\n    };\n  \n      try {\n        const response = await fetch('/schedule', requestOptions);\n        if (response.ok) {\n          alert('Scheduled successfully');\n        } else {\n          alert('Error scheduling the post');\n        }\n      } catch (error) {\n        console.error('Error scheduling the post:', error);\n        alert('Error scheduling the post');\n      }\n    });\n  \n    stopScheduleButton.addEventListener('click', async () => {\n      try {\n        const response = await fetch('/stop-schedule', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ username: loggedInUsername }),\n        });\n  \n        if (response.status === 200) {\n          alert('Schedule stopped successfully!');\n        } else {\n          alert('Failed to stop schedule. No active schedule found for this user.');\n        }\n      } catch (error) {\n        console.error('Error stopping the schedule:', error);\n        alert('Failed to stop schedule. Please try again later.');\n      }\n    });\n  });\n",null,"(()=>{\"use strict\";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},t={};function r(e,t){return void 0===t&&(t=\"-\"),new RegExp(\"^(?!0{4}\"+t+\"0{2}\"+t+\"0{2})((?=[0-9]{4}\"+t+\"(((0[^2])|1[0-2])|02(?=\"+t+\"(([0-1][0-9])|2[0-8])))\"+t+\"[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))\"+t+\"02\"+t+\"29))([0-9]{4})\"+t+\"(?!((0[469])|11)\"+t+\"31)((0[1,3-9]|1[0-2])|(02(?!\"+t+\"3)))\"+t+\"(0[1-9]|[1-2][0-9]|3[0-1])$\").test(e)}function n(e){var t=/\\D/.exec(e);return t?t[0]:\"\"}function i(e,t,r){void 0===t&&(t=\":\"),void 0===r&&(r=!1);var i=new RegExp(\"^([0-1]|2(?=([0-3])|4\"+t+\"00))[0-9]\"+t+\"[0-5][0-9](\"+t+\"([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$\");if(!r||!/[Z+\\-]/.test(e))return i.test(e);if(/Z$/.test(e))return i.test(e.replace(\"Z\",\"\"));var o=e.includes(\"+\"),a=e.split(/[+-]/),u=a[0],d=a[1];return i.test(u)&&function(e,t,r){return void 0===r&&(r=\":\"),new RegExp(t?\"^(0(?!(2\"+r+\"4)|0\"+r+\"3)|1(?=([0-1]|2(?=\"+r+\"[04])|[34](?=\"+r+\"0))))([03469](?=\"+r+\"[03])|[17](?=\"+r+\"0)|2(?=\"+r+\"[04])|5(?=\"+r+\"[034])|8(?=\"+r+\"[04]))\"+r+\"([03](?=0)|4(?=5))[05]$\":\"^(0(?=[^0])|1(?=[0-2]))([39](?=\"+r+\"[03])|[0-24-8](?=\"+r+\"00))\"+r+\"[03]0$\").test(e)}(d,o,n(d))}function o(e){var t=e.split(\"T\"),o=t[0],a=t[1],u=r(o,n(o));if(!a)return!1;var d,s=(d=a.match(/([^Z+\\-\\d])(?=\\d+\\1)/),Array.isArray(d)?d[0]:\"\");return u&&i(a,s,!0)}function a(e,t){return void 0===t&&(t=\"-\"),new RegExp(\"^[0-9]{4}\"+t+\"(0(?=[^0])|1(?=[0-2]))[0-9]$\").test(e)}e.r(t),e.d(t,{isValidDate:()=>r,isValidISODateString:()=>o,isValidTime:()=>i,isValidYearMonth:()=>a});var u=exports;for(var d in t)u[d]=t[d];t.__esModule&&Object.defineProperty(u,\"__esModule\",{value:!0})})();","export { AtUri } from '@atproto/uri'\nexport {\n  BlobRef,\n  lexToJson,\n  stringifyLex,\n  jsonToLex,\n  jsonStringToLex,\n} from '@atproto/lexicon'\nexport * from './types'\nexport * from './client'\nexport * from './agent'\nexport * from './rich-text/rich-text'\nexport * from './rich-text/sanitization'\nexport * from './rich-text/unicode'\nexport { BskyAgent } from './bsky-agent'\nexport { AtpAgent as default } from './agent'\n","import { ZodError } from 'zod'\n\nexport interface Checkable<T> {\n  parse: (obj: unknown) => T\n  safeParse: (\n    obj: unknown,\n  ) => { success: true; data: T } | { success: false; error: ZodError }\n}\n\nexport interface Def<T> {\n  name: string\n  schema: Checkable<T>\n}\n\nexport const is = <T>(obj: unknown, def: Checkable<T>): obj is T => {\n  return def.safeParse(obj).success\n}\n\nexport const assure = <T>(def: Checkable<T>, obj: unknown): T => {\n  return def.parse(obj)\n}\n\nexport const isObject = (obj: unknown): obj is Record<string, unknown> => {\n  return typeof obj === 'object' && obj !== null\n}\n","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","import { bases } from 'multiformats/basics';\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;","import bases from './util/bases.js';\nexport function fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}","import bases from './util/bases.js';\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  return base.encoder.encode(array).substring(1);\n}","import { CID } from 'multiformats/cid'\nimport * as ui8 from 'uint8arrays'\n\nexport type JsonValue =\n  | boolean\n  | number\n  | string\n  | null\n  | undefined\n  | unknown\n  | Array<JsonValue>\n  | { [key: string]: JsonValue }\n\nexport type IpldValue =\n  | JsonValue\n  | CID\n  | Uint8Array\n  | Array<IpldValue>\n  | { [key: string]: IpldValue }\n\n// @NOTE avoiding use of check.is() here only because it makes\n// these implementations slow, and they often live in hot paths.\n\nexport const jsonToIpld = (val: JsonValue): IpldValue => {\n  // walk arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => jsonToIpld(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // check for dag json values\n    if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) {\n      return CID.parse(val['$link'])\n    }\n    if (typeof val['$bytes'] === 'string' && Object.keys(val).length === 1) {\n      return ui8.fromString(val['$bytes'], 'base64')\n    }\n    // walk plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = jsonToIpld(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val\n}\n\nexport const ipldToJson = (val: IpldValue): JsonValue => {\n  // walk arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => ipldToJson(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // convert bytes\n    if (val instanceof Uint8Array) {\n      return {\n        $bytes: ui8.toString(val, 'base64'),\n      }\n    }\n    // convert cids\n    if (CID.asCID(val)) {\n      return {\n        $link: (val as CID).toString(),\n      }\n    }\n    // walk plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToJson(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val as JsonValue\n}\n\nexport const ipldEquals = (a: IpldValue, b: IpldValue): boolean => {\n  // walk arrays\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false\n    for (let i = 0; i < a.length; i++) {\n      if (!ipldEquals(a[i], b[i])) return false\n    }\n    return true\n  }\n  // objects\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    // check bytes\n    if (a instanceof Uint8Array && b instanceof Uint8Array) {\n      return ui8.equals(a, b)\n    }\n    // check cids\n    if (CID.asCID(a) && CID.asCID(b)) {\n      return CID.asCID(a)?.equals(CID.asCID(b))\n    }\n    // walk plain objects\n    if (Object.keys(a).length !== Object.keys(b).length) return false\n    for (const key of Object.keys(a)) {\n      if (!ipldEquals(a[key], b[key])) return false\n    }\n    return true\n  }\n  return a === b\n}\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be greater than ${issue.inclusive ? `or equal to ` : ``}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be greater than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.minimum)}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be less than ${issue.inclusive ? `or equal to ` : ``}${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be smaller than ${issue.inclusive ? `or equal to ` : ``}${new Date(issue.maximum)}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap,\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== undefined && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        return this._path.concat(this._key);\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        const error = new ZodError(ctx.common.issues);\n        return { success: false, error };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this.superRefine = this._refinement;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.default = this.default.bind(this);\n        this.describe = this.describe.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: [], parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    optional() {\n        return ZodOptional.create(this);\n    }\n    nullable() {\n        return ZodNullable.create(this);\n    }\n    nullish() {\n        return this.optional().nullable();\n    }\n    array() {\n        return ZodArray.create(this);\n    }\n    promise() {\n        return ZodPromise.create(this);\n    }\n    or(option) {\n        return ZodUnion.create([this, option]);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(undefined),\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n// eslint-disable-next-line\nconst emailRegex = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\nclass ZodString extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n        /**\n         * @deprecated Use z.string().min(1) instead.\n         * @see {@link ZodString.min}\n         */\n        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));\n        this.trim = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this.min(len, message).max(len, message);\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\");\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBigInt.create = (params) => {\n    return new ZodBigInt({\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all(ctx.data.map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = ctx.data.map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return this.min(len, message).max(len, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////\n/////////////////////////////////////////\n//////////                     //////////\n//////////      ZodObject      //////////\n//////////                     //////////\n/////////////////////////////////////////\n/////////////////////////////////////////\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second,\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst AugmentFactory = (def) => (augmentation) => {\n    return new ZodObject({\n        ...def,\n        shape: () => ({\n            ...def.shape(),\n            ...augmentation,\n        }),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return ZodArray.create(deepPartialify(schema.element));\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        this.augment = AugmentFactory(this._def);\n        this.extend = AugmentFactory(this._def);\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        // const mergedShape = objectUtil.mergeShapes(\n        //   this._def.shape(),\n        //   merging._def.shape()\n        // );\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).map((key) => {\n            // only add to shape if key corresponds to an element of the current shape\n            if (this.shape[key])\n                shape[key] = this.shape[key];\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).map((key) => {\n            if (util.objectKeys(mask).indexOf(key) === -1) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        if (mask) {\n            util.objectKeys(this.shape).map((key) => {\n                if (util.objectKeys(mask).indexOf(key) === -1) {\n                    newShape[key] = this.shape[key];\n                }\n                else {\n                    newShape[key] = this.shape[key].optional();\n                }\n            });\n            return new ZodObject({\n                ...this._def,\n                shape: () => newShape,\n            });\n        }\n        else {\n            for (const key in this.shape) {\n                const fieldSchema = this.shape[key];\n                newShape[key] = fieldSchema.optional();\n            }\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required() {\n        const newShape = {};\n        for (const key in this.shape) {\n            const fieldSchema = this.shape[key];\n            let newField = fieldSchema;\n            while (newField instanceof ZodOptional) {\n                newField = newField._def.innerType;\n            }\n            newShape[key] = newField;\n        }\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.options.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: this.validDiscriminatorValues,\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get validDiscriminatorValues() {\n        return Array.from(this.options.keys());\n    }\n    get options() {\n        return this._def.options;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, types, params) {\n        // Get all the valid discriminator values\n        const options = new Map();\n        try {\n            types.forEach((type) => {\n                const discriminatorValue = type.shape[discriminator].value;\n                options.set(discriminatorValue, type);\n            });\n        }\n        catch (e) {\n            throw new Error(\"The discriminator value could not be extracted from all the provided schemas\");\n        }\n        // Assert that all the discriminator values are unique\n        if (options.size !== types.length) {\n            throw new Error(\"Some of the discriminator values are not unique\");\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = ctx.data\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            return OK(async (...args) => {\n                const error = new ZodError([]);\n                const parsedArgs = await this._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await fn(...parsedArgs);\n                const parsedReturns = await this._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            return OK((...args) => {\n                const parsedArgs = this._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = fn(...parsedArgs.data);\n                const parsedReturns = this._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                // if (base.status === \"aborted\") return INVALID;\n                // if (base.status === \"dirty\") {\n                //   return { status: \"dirty\", value: base.value };\n                // }\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    // if (base.status === \"aborted\") return INVALID;\n                    // if (base.status === \"dirty\") {\n                    //   return { status: \"dirty\", value: base.value };\n                    // }\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nconst custom = (check, params = {}, fatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            if (!check(data)) {\n                const p = typeof params === \"function\" ? params(data) : params;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\n// new approach that works for abstract classes\n// but required TS 4.4+\n// abstract class Class {\n//   constructor(..._: any[]) {}\n// }\n// const instanceOfType = <T extends typeof Class>(\nconst instanceOfType = (cls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params, true);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst NEVER = INVALID;\n\nvar mod = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getParsedType: getParsedType,\n    ZodParsedType: ZodParsedType,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    get objectUtil () { return objectUtil; },\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPromise, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, custom, dateType as date, mod as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, voidType as void, mod as z };\n","import { CID } from 'multiformats/cid'\nimport { z } from 'zod'\nimport { Def } from './check'\n\nconst cidSchema = z\n  .any()\n  .refine((obj: unknown) => CID.asCID(obj) !== null, {\n    message: 'Not a CID',\n  })\n  .transform((obj: unknown) => CID.asCID(obj) as CID)\n\nexport const schema = {\n  cid: cidSchema,\n  bytes: z.instanceof(Uint8Array),\n  string: z.string(),\n  array: z.array(z.unknown()),\n  map: z.record(z.string(), z.unknown()),\n  unknown: z.unknown(),\n}\n\nexport const def = {\n  cid: {\n    name: 'cid',\n    schema: schema.cid,\n  } as Def<CID>,\n  bytes: {\n    name: 'bytes',\n    schema: schema.bytes,\n  } as Def<Uint8Array>,\n  string: {\n    name: 'string',\n    schema: schema.string,\n  } as Def<string>,\n  map: {\n    name: 'map',\n    schema: schema.map,\n  } as Def<Record<string, unknown>>,\n  unknown: {\n    name: 'unknown',\n    schema: schema.unknown,\n  } as Def<unknown>,\n}\n\nexport type ArrayEl<A> = A extends readonly (infer T)[] ? T : never\n","export const SECOND = 1000\nexport const MINUTE = SECOND * 60\nexport const HOUR = MINUTE * 60\nexport const DAY = HOUR * 24\n","// counts the number of bytes in a utf8 string\nexport const utf8Len = (str: string): number => {\n  return new TextEncoder().encode(str).byteLength\n}\n\n// counts the number of graphemes (user-displayed characters) in a string\nexport const graphemeLen = (str: string): number => {\n  return [...new Intl.Segmenter().segment(str)].length\n}\n","const atpSpecific = [\n  'at',\n  'atp',\n  'plc',\n  'pds',\n  'did',\n  'repo',\n  'tid',\n  'nsid',\n  'xrpc',\n  'lex',\n  'lexicon',\n  'bsky',\n  'bluesky',\n  'handle',\n]\n\n// naively pulled from: https://radwebhosting.com/client_area/knowledgebase/196/List-of-Banned-Subdomain-Prefixes.html\nconst commonlyReserved = [\n  'about',\n  'abuse',\n  'access',\n  'account',\n  'accounts',\n  'acme',\n  'activate',\n  'activities',\n  'activity',\n  'ad',\n  'add',\n  'address',\n  'adm',\n  'admanager',\n  'admin',\n  'administration',\n  'administrator',\n  'administrators',\n  'admins',\n  'ads',\n  'adsense',\n  'adult',\n  'advertising',\n  'adwords',\n  'affiliate',\n  'affiliatepage',\n  'affiliates',\n  'afp',\n  'ajax',\n  'all',\n  'alpha',\n  'analysis',\n  'analytics',\n  'android',\n  'anon',\n  'anonymous',\n  'answer',\n  'answers',\n  'ap',\n  'api',\n  'apis',\n  'app',\n  'appengine',\n  'appnews',\n  'apps',\n  'archive',\n  'archives',\n  'article',\n  'asdf',\n  'asset',\n  'assets',\n  'auth',\n  'authentication',\n  'avatar',\n  'backup',\n  'bank',\n  'banner',\n  'banners',\n  'base',\n  'beginners',\n  'beta',\n  'billing',\n  'bin',\n  'binaries',\n  'binary',\n  'blackberry',\n  'blog',\n  'blogs',\n  'blogsearch',\n  'board',\n  'book',\n  'bookmark',\n  'bookmarks',\n  'books',\n  'bot',\n  'bots',\n  'bug',\n  'bugs',\n  'business',\n  'buy',\n  'buzz',\n  'cache',\n  'calendar',\n  'call',\n  'campaign',\n  'cancel',\n  'captcha',\n  'career',\n  'careers',\n  'cart',\n  'catalog',\n  'catalogs',\n  'categories',\n  'category',\n  'cdn',\n  'cgi',\n  'cgi-bin',\n  'changelog',\n  'chart',\n  'charts',\n  'chat',\n  'check',\n  'checked',\n  'checking',\n  'checkout',\n  'client',\n  'cliente',\n  'clients',\n  'clients1',\n  'cnarne',\n  'code',\n  'comercial',\n  'comment',\n  'comments',\n  'communities',\n  'community',\n  'company',\n  'compare',\n  'compras',\n  'config',\n  'configuration',\n  'confirm',\n  'confirmation',\n  'connect',\n  'contact',\n  'contacts',\n  'contactus',\n  'contact-us',\n  'contact_us',\n  'content',\n  'contest',\n  'contribute',\n  'contributor',\n  'contributors',\n  'coppa',\n  'copyright',\n  'copyrights',\n  'core',\n  'corp',\n  'countries',\n  'country',\n  'cpanel',\n  'create',\n  'css',\n  'cssproxy',\n  'customise',\n  'customize',\n  'dashboard',\n  'data',\n  'db',\n  'default',\n  'delete',\n  'demo',\n  'design',\n  'designer',\n  'desktop',\n  'destroy',\n  'dev',\n  'devel',\n  'developer',\n  'developers',\n  'devs',\n  'diagram',\n  'diary',\n  'dict',\n  'dictionary',\n  'die',\n  'dir',\n  'directory',\n  'direct_messages',\n  'direct-messages',\n  'dist',\n  'diversity',\n  'dl',\n  'dmca',\n  'doc',\n  'docs',\n  'documentation',\n  'documentations',\n  'documents',\n  'domain',\n  'domains',\n  'donate',\n  'download',\n  'downloads',\n  'e',\n  'e-mail',\n  'earth',\n  'ecommerce',\n  'edit',\n  'edits',\n  'editor',\n  'edu',\n  'education',\n  'email',\n  'embed',\n  'embedded',\n  'employment',\n  'employments',\n  'empty',\n  'enable',\n  'encrypted',\n  'end',\n  'engine',\n  'enterprise',\n  'enterprises',\n  'entries',\n  'entry',\n  'error',\n  'errorlog',\n  'errors',\n  'eval',\n  'event',\n  'example',\n  'examplecommunity',\n  'exampleopenid',\n  'examplesyn',\n  'examplesyndicated',\n  'exampleusername',\n  'exchange',\n  'exit',\n  'explore',\n  'faq',\n  'faqs',\n  'favorite',\n  'favorites',\n  'favourite',\n  'favourites',\n  'feature',\n  'features',\n  'feed',\n  'feedback',\n  'feedburner',\n  'feedproxy',\n  'feeds',\n  'file',\n  'files',\n  'finance',\n  'folder',\n  'folders',\n  'first',\n  'following',\n  'forgot',\n  'form',\n  'forms',\n  'forum',\n  'forums',\n  'founder',\n  'free',\n  'friend',\n  'friends',\n  'ftp',\n  'fuck',\n  'fun',\n  'fusion',\n  'gadget',\n  'gadgets',\n  'game',\n  'games',\n  'gears',\n  'general',\n  'geographic',\n  'get',\n  'gettingstarted',\n  'gift',\n  'gifts',\n  'gist',\n  'git',\n  'github',\n  'gmail',\n  'go',\n  'golang',\n  'goto',\n  'gov',\n  'graph',\n  'graphs',\n  'group',\n  'groups',\n  'guest',\n  'guests',\n  'guide',\n  'guides',\n  'hack',\n  'hacks',\n  'head',\n  'help',\n  'home',\n  'homepage',\n  'host',\n  'hosting',\n  'hostmaster',\n  'hostname',\n  'howto',\n  'how-to',\n  'how_to',\n  'html',\n  'htrnl',\n  'http',\n  'httpd',\n  'https',\n  'i',\n  'iamges',\n  'icon',\n  'icons',\n  'id',\n  'idea',\n  'ideas',\n  'im',\n  'image',\n  'images',\n  'img',\n  'imap',\n  'inbox',\n  'inboxes',\n  'index',\n  'indexes',\n  'info',\n  'information',\n  'inquiry',\n  'intranet',\n  'investor',\n  'investors',\n  'invitation',\n  'invitations',\n  'invite',\n  'invoice',\n  'invoices',\n  'imac',\n  'ios',\n  'ipad',\n  'iphone',\n  'irc',\n  'irnages',\n  'irng',\n  'is',\n  'issue',\n  'issues',\n  'it',\n  'item',\n  'items',\n  'java',\n  'javascript',\n  'job',\n  'jobs',\n  'join',\n  'js',\n  'json',\n  'jump',\n  'kb',\n  'knowledge-base',\n  'knowledgebase',\n  'lab',\n  'labs',\n  'language',\n  'languages',\n  'last',\n  'ldap_status',\n  'ldap-status',\n  'ldapstatus',\n  'legal',\n  'license',\n  'licenses',\n  'link',\n  'links',\n  'linux',\n  'list',\n  'lists',\n  'livejournal',\n  'lj',\n  'local',\n  'locale',\n  'location',\n  'log',\n  'log-in',\n  'log-out',\n  'login',\n  'logout',\n  'logs',\n  'log_in',\n  'log_out',\n  'm',\n  'mac',\n  'macos',\n  'macosx',\n  'mac-os',\n  'mac-os-x',\n  'mac_os_x',\n  'mail',\n  'mailer',\n  'mailing',\n  'main',\n  'maintenance',\n  'manage',\n  'manager',\n  'manual',\n  'map',\n  'maps',\n  'marketing',\n  'master',\n  'me',\n  'media',\n  'member',\n  'members',\n  'memories',\n  'memory',\n  'merchandise',\n  'message',\n  'messages',\n  'messenger',\n  'mg',\n  'microblog',\n  'microblogs',\n  'mine',\n  'mis',\n  'misc',\n  'mms',\n  'mob',\n  'mobile',\n  'model',\n  'models',\n  'money',\n  'movie',\n  'movies',\n  'mp3',\n  'mp4',\n  'msg',\n  'msn',\n  'music',\n  'mx',\n  'my',\n  'mymme',\n  'mysql',\n  'name',\n  'named',\n  'nan',\n  'navi',\n  'navigation',\n  'net',\n  'network',\n  'networks',\n  'new',\n  'news',\n  'newsletter',\n  'nick',\n  'nickname',\n  'nil',\n  'none',\n  'notes',\n  'noticias',\n  'notification',\n  'notifications',\n  'notify',\n  'ns',\n  'ns1',\n  'ns2',\n  'ns3',\n  'ns4',\n  'ns5',\n  'null',\n  'oauth',\n  'oauth-clients',\n  'oauth_clients',\n  'ocsp',\n  'offer',\n  'offers',\n  'official',\n  'old',\n  'online',\n  'openid',\n  'operator',\n  'option',\n  'options',\n  'order',\n  'orders',\n  'org',\n  'organization',\n  'organizations',\n  'other',\n  'overview',\n  'owner',\n  'owners',\n  'p0rn',\n  'pack',\n  'page',\n  'pager',\n  'pages',\n  'paid',\n  'panel',\n  'partner',\n  'partnerpage',\n  'partners',\n  'password',\n  'patch',\n  'pay',\n  'payment',\n  'people',\n  'perl',\n  'person',\n  'phone',\n  'photo',\n  'photoalbum',\n  'photos',\n  'php',\n  'phpmyadmin',\n  'phppgadmin',\n  'phpredisadmin',\n  'pic',\n  'pics',\n  'picture',\n  'pictures',\n  'ping',\n  'pixel',\n  'places',\n  'plan',\n  'plans',\n  'plugin',\n  'plugins',\n  'podcasts',\n  'policies',\n  'policy',\n  'pop',\n  'pop3',\n  'popular',\n  'porn',\n  'portal',\n  'portals',\n  'post',\n  'postfix',\n  'postmaster',\n  'posts',\n  'pr',\n  'pr0n',\n  'premium',\n  'press',\n  'price',\n  'pricing',\n  'principles',\n  'print',\n  'privacy',\n  'privacy-policy',\n  'privacypolicy',\n  'privacy_policy',\n  'private',\n  'prod',\n  'product',\n  'production',\n  'products',\n  'profile',\n  'profiles',\n  'project',\n  'projects',\n  'promo',\n  'promotions',\n  'proxies',\n  'proxy',\n  'pub',\n  'public',\n  'purchase',\n  'purpose',\n  'put',\n  'python',\n  'queries',\n  'query',\n  'radio',\n  'random',\n  'ranking',\n  'read',\n  'reader',\n  'readme',\n  'recent',\n  'recruit',\n  'recruitment',\n  'redirect',\n  'register',\n  'registration',\n  'release',\n  'remove',\n  'replies',\n  'report',\n  'reports',\n  'repositories',\n  'repository',\n  'req',\n  'request',\n  'requests',\n  'research',\n  'reset',\n  'resolve',\n  'resolver',\n  'review',\n  'rnail',\n  'rnicrosoft',\n  'roc',\n  'root',\n  'rss',\n  'ruby',\n  'rule',\n  'sag',\n  'sale',\n  'sales',\n  'sample',\n  'samples',\n  'sandbox',\n  'save',\n  'scholar',\n  'school',\n  'schools',\n  'script',\n  'scripts',\n  'search',\n  'secure',\n  'security',\n  'self',\n  'seminars',\n  'send',\n  'server',\n  'server-info',\n  'server_info',\n  'server-status',\n  'server_status',\n  'servers',\n  'service',\n  'services',\n  'session',\n  'sessions',\n  'setting',\n  'settings',\n  'setup',\n  'share',\n  'shop',\n  'shopping',\n  'shortcut',\n  'shortcuts',\n  'show',\n  'sign-in',\n  'sign-up',\n  'signin',\n  'signout',\n  'signup',\n  'sign_in',\n  'sign_up',\n  'site',\n  'sitemap',\n  'sitemaps',\n  'sitenews',\n  'sites',\n  'sketchup',\n  'sky',\n  'slash',\n  'slashinvoice',\n  'slut',\n  'smartphone',\n  'sms',\n  'smtp',\n  'soap',\n  'software',\n  'sorry',\n  'source',\n  'spec',\n  'special',\n  'spreadsheet',\n  'spreadsheets',\n  'sql',\n  'src',\n  'srntp',\n  'ssh',\n  'ssl',\n  'ssladmin',\n  'ssladministrator',\n  'sslwebmaster',\n  'ssytem',\n  'staff',\n  'stage',\n  'staging',\n  'start',\n  'stat',\n  'state',\n  'static',\n  'statistics',\n  'stats',\n  'status',\n  'store',\n  'stores',\n  'stories',\n  'style',\n  'styleguide',\n  'styles',\n  'stylesheet',\n  'stylesheets',\n  'subdomain',\n  'subscribe',\n  'subscription',\n  'subscriptions',\n  'suggest',\n  'suggestqueries',\n  'support',\n  'survey',\n  'surveys',\n  'surveytool',\n  'svn',\n  'swf',\n  'syn',\n  'sync',\n  'syndicated',\n  'sys',\n  'sysadmin',\n  'sysadministrator',\n  'sysadmins',\n  'system',\n  'tablet',\n  'tablets',\n  'tag',\n  'tags',\n  'talk',\n  'talkgadget',\n  'task',\n  'tasks',\n  'team',\n  'teams',\n  'tech',\n  'telnet',\n  'term',\n  'terms',\n  'terms-of-service',\n  'termsofservice',\n  'terms_of_service',\n  'test',\n  'testing',\n  'tests',\n  'text',\n  'theme',\n  'themes',\n  'thread',\n  'threads',\n  'ticket',\n  'tickets',\n  'tmp',\n  'todo',\n  'to-do',\n  'to_do',\n  'toml',\n  'tool',\n  'toolbar',\n  'toolbars',\n  'tools',\n  'top',\n  'topic',\n  'topics',\n  'tos',\n  'tour',\n  'trac',\n  'translate',\n  'trace',\n  'translation',\n  'translations',\n  'translator',\n  'trends',\n  'tutorial',\n  'tux',\n  'tv',\n  'twitter',\n  'txt',\n  'ul',\n  'undef',\n  'unfollow',\n  'unsubscribe',\n  'update',\n  'updates',\n  'upgrade',\n  'upgrades',\n  'upi',\n  'upload',\n  'uploads',\n  'url',\n  'usage',\n  'user',\n  'username',\n  'usernames',\n  'users',\n  'uuid',\n  'validation',\n  'validations',\n  'ver',\n  'version',\n  'video',\n  'videos',\n  'video-stats',\n  'visitor',\n  'visitors',\n  'voice',\n  'volunteer',\n  'volunteers',\n  'w',\n  'watch',\n  'wave',\n  'weather',\n  'web',\n  'webdisk',\n  'webhook',\n  'webhooks',\n  'webmail',\n  'webmaster',\n  'webmasters',\n  'webrnail',\n  'website',\n  'websites',\n  'welcome',\n  'whm',\n  'whois',\n  'widget',\n  'widgets',\n  'wifi',\n  'wiki',\n  'wikis',\n  'win',\n  'windows',\n  'word',\n  'work',\n  'works',\n  'workshop',\n  'wpad',\n  'ww',\n  'wws',\n  'www',\n  'wwws',\n  'wwww',\n  'xfn',\n  'xhtml',\n  'xhtrnl',\n  'xml',\n  'xmpp',\n  'xpg',\n  'xxx',\n  'yaml',\n  'year',\n  'yml',\n  'you',\n  'yourdomain',\n  'yourname',\n  'yoursite',\n  'yourusername',\n]\n\nconst famousAccounts = [\n  // reserving some large twitter accounts (top 100 by followers according to wikidata dump)\n  '10ronaldinho',\n  '3gerardpique',\n  'adele',\n  'akshaykumar',\n  'aliaa08',\n  'aliciakeys',\n  'amitshah',\n  'andresiniesta8',\n  'anushkasharma',\n  'arianagrande',\n  'arrahman',\n  'arvindkejriwal',\n  'avrillavigne',\n  'barackobama',\n  'bbcbreaking',\n  'bbcworld',\n  'beingsalmankhan',\n  'billgates',\n  'britneyspears',\n  'brunomars',\n  'bts_bighit',\n  'bts_twt',\n  'championsleague',\n  'chrisbrown',\n  'cnnbrk',\n  'coldplay',\n  'conanobrien',\n  'cristiano',\n  'danieltosh',\n  'davidguetta',\n  'ddlovato',\n  'deepikapadukone',\n  'drake',\n  'elisapie',\n  'ellendegeneres',\n  'elonmusk',\n  'eminem',\n  'emmawatson',\n  'fcbarcelona',\n  'foxnews',\n  'harry_styles',\n  'hillaryclinton',\n  'iamsrk',\n  'ihrithik',\n  'imvkohli',\n  'instagram',\n  'jimmyfallon',\n  'jlo',\n  'joebiden',\n  'jtimberlake',\n  'justinbieber',\n  'kaka',\n  'kanyewest',\n  'katyperry',\n  'kendalljenner',\n  'kevinhart4real',\n  'khloekardashian',\n  'kimkardashian',\n  'kingjames',\n  'kourtneykardash',\n  'kyliejenner',\n  'ladygaga',\n  'liampayne',\n  'liltunechi',\n  'manutd',\n  'mariahcarey',\n  'mileycyrus',\n  'mohamadalarefe',\n  'narendramodi',\n  'nasa',\n  'nba',\n  'neymarjr',\n  'nfl',\n  'niallofficial',\n  'nickiminaj',\n  'npr',\n  'nytimes',\n  'onedirection',\n  'oprah',\n  'pink',\n  'pitbull',\n  'playstation',\n  'pmoindia',\n  'premierleague',\n  'priyankachopra',\n  'realdonaldtrump',\n  'ricky_martin',\n  'rihanna',\n  'sachin_rt',\n  'selenagomez',\n  'shakira',\n  'shawnmendes',\n  'sportscenter',\n  'srbachchan',\n  'subhisharma100',\n  'taylorswift13',\n  'theeconomist',\n  'twitter',\n  'virendersehwag',\n  'whitehouse45',\n  'wizkhalifa',\n  'youtube',\n  'zaynmalik',\n\n  // some top instagram (https://en.wikipedia.org/wiki/List_of_most-followed_Instagram_accounts)\n  'beyonce',\n  'billieeilish',\n  'leomessi',\n  'natgeo',\n  'nike',\n  'snoopdogg',\n  'taylorswift',\n  'therock',\n\n  // ... and a couple more prominent accounts, subjectively\n  '10downingstreet',\n  'aoc',\n  'carterjwm',\n  'dril',\n  'gretathunberg',\n  'kamalaharris',\n  'kremlinrussia_e',\n  'potus',\n  'rondesantisfl',\n  'ukraine',\n  'washingtonpost',\n  'yousuck2020',\n  'zelenskyyua',\n]\n\nexport const reservedSubdomains: Record<string, boolean> = [\n  ...atpSpecific,\n  ...commonlyReserved,\n  ...famousAccounts,\n].reduce((acc, cur) => {\n  return {\n    ...acc,\n    [cur]: true,\n  }\n}, {})\n","import { reservedSubdomains } from './reserved'\n\nexport * from './resolve'\n\n// Handle constraints, in English:\n//  - must be a possible domain name\n//    - RFC-1035 is commonly referenced, but has been updated. eg, RFC-3696,\n//      section 2. and RFC-3986, section 3. can now have leading numbers (eg,\n//      4chan.org)\n//    - \"labels\" (sub-names) are made of ASCII letters, digits, hyphens\n//    - can not start or end with a hyphen\n//    - TLD (last component) should not start with a digit\n//    - can't end with a hyphen (can end with digit)\n//    - each segment must be between 1 and 63 characters (not including any periods)\n//    - overall length can't be more than 253 characters\n//    - separated by (ASCII) periods; does not start or end with period\n//    - case insensitive\n//    - domains (handles) are equal if they are the same lower-case\n//    - punycode allowed for internationalization\n//  - no whitespace, null bytes, joining chars, etc\n//  - does not validate whether domain or TLD exists, or is a reserved or\n//    special TLD (eg, .onion or .local)\n//  - does not validate punycode\nexport const ensureValidHandle = (handle: string): void => {\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {\n    throw new InvalidHandleError(\n      'Disallowed characters in handle (ASCII letters, digits, dashes, periods only)',\n    )\n  }\n\n  if (handle.length > 253) {\n    throw new InvalidHandleError('Handle is too long (253 chars max)')\n  }\n  const labels = handle.split('.')\n  if (labels.length < 2) {\n    throw new InvalidHandleError('Handle domain needs at least two parts')\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i]\n    if (l.length < 1) {\n      throw new InvalidHandleError('Handle parts can not be empty')\n    }\n    if (l.length > 63) {\n      throw new InvalidHandleError('Handle part too long (max 63 chars)')\n    }\n    if (l.endsWith('-') || l.startsWith('-')) {\n      throw new InvalidHandleError(\n        'Handle parts can not start or end with hyphens',\n      )\n    }\n    if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {\n      throw new InvalidHandleError(\n        'Handle final component (TLD) must start with ASCII letter',\n      )\n    }\n  }\n}\n\n// simple regex translation of above constraints\nexport const ensureValidHandleRegex = (handle: string): void => {\n  if (\n    !/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(\n      handle,\n    )\n  ) {\n    throw new InvalidHandleError(\"Handle didn't validate via regex\")\n  }\n  if (handle.length > 253) {\n    throw new InvalidHandleError('Handle is too long (253 chars max)')\n  }\n}\n\nexport const normalizeHandle = (handle: string): string => {\n  return handle.toLowerCase()\n}\n\nexport const normalizeAndEnsureValidHandle = (handle: string): string => {\n  const normalized = normalizeHandle(handle)\n  ensureValidHandle(normalized)\n  return normalized\n}\n\nexport const isValidHandle = (handle: string): boolean => {\n  try {\n    ensureValidHandle(handle)\n  } catch (err) {\n    if (err instanceof InvalidHandleError) {\n      return false\n    }\n    throw err\n  }\n  return true\n}\n\nexport const ensureHandleServiceConstraints = (\n  handle: string,\n  availableUserDomains: string[],\n  reserved = reservedSubdomains,\n): void => {\n  const supportedDomain = availableUserDomains.find((domain) =>\n    handle.endsWith(domain),\n  )\n  if (!supportedDomain) {\n    throw new UnsupportedDomainError('Not a supported handle domain')\n  }\n  const front = handle.slice(0, handle.length - supportedDomain.length)\n  if (front.indexOf('.') > -1) {\n    throw new InvalidHandleError('Invalid characters in handle')\n  }\n  if (front.length < 3) {\n    throw new InvalidHandleError('Handle too short')\n  }\n  if (handle.length > 30) {\n    throw new InvalidHandleError('Handle too long')\n  }\n  if (reserved[front]) {\n    throw new ReservedHandleError('Reserved handle')\n  }\n}\n\nexport const fulfillsHandleServiceConstraints = (\n  handle: string,\n  availableUserDomains: string[],\n  reserved = reservedSubdomains,\n): boolean => {\n  try {\n    ensureHandleServiceConstraints(handle, availableUserDomains, reserved)\n  } catch (err) {\n    if (\n      err instanceof InvalidHandleError ||\n      err instanceof ReservedHandleError ||\n      err instanceof UnsupportedDomainError\n    ) {\n      return false\n    }\n    throw err\n  }\n  return true\n}\n\nexport class InvalidHandleError extends Error {}\nexport class ReservedHandleError extends Error {}\nexport class UnsupportedDomainError extends Error {}\n","// Human-readable constraints:\n//   - valid W3C DID (https://www.w3.org/TR/did-core/#did-syntax)\n//      - entire URI is ASCII: [a-zA-Z0-9._:%-]\n//      - always starts \"did:\" (lower-case)\n//      - method name is one or more lower-case letters, followed by \":\"\n//      - remaining identifier can have any of the above chars, but can not end in \":\"\n//      - it seems that a bunch of \":\" can be included, and don't need spaces between\n//      - \"%\" is used only for \"percent encoding\" and must be followed by two hex characters (and thus can't end in \"%\")\n//      - query (\"?\") and fragment (\"#\") stuff is defined for \"DID URIs\", but not as part of identifier itself\n//      - \"The current specification does not take a position on the maximum length of a DID\"\n//   - in current atproto, only allowing did:plc and did:web. But not *forcing* this at lexicon layer\n//   - hard length limit of 8KBytes\n//   - not going to validate \"percent encoding\" here\nexport const ensureValidDid = (did: string): void => {\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {\n    throw new InvalidDidError(\n      'Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)',\n    )\n  }\n\n  const parts = did.split(':')\n  if (parts.length < 3) {\n    throw new InvalidDidError(\n      'DID requires prefix, method, and method-specific content',\n    )\n  }\n\n  if (parts[0] != 'did') {\n    throw new InvalidDidError('DID requires \"did:\" prefix')\n  }\n\n  if (!/^[a-z]+$/.test(parts[1])) {\n    throw new InvalidDidError('DID method must be lower-case letters')\n  }\n\n  if (did.endsWith(':') || did.endsWith('%')) {\n    throw new InvalidDidError('DID can not end with \":\" or \"%\"')\n  }\n\n  if (did.length > 8 * 1024) {\n    throw new InvalidDidError('DID is far too long')\n  }\n}\n\nexport const ensureValidDidRegex = (did: string): void => {\n  // simple regex to enforce most constraints via just regex and length.\n  // hand wrote this regex based on above constraints\n  if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {\n    throw new InvalidDidError(\"DID didn't validate via regex\")\n  }\n\n  if (did.length > 8 * 1024) {\n    throw new InvalidDidError('DID is far too long')\n  }\n}\n\nexport class InvalidDidError extends Error {}\n","/*\nGrammar:\n\nalpha     = \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" / \"g\" / \"h\" / \"i\" / \"j\" / \"k\" / \"l\" / \"m\" / \"n\" / \"o\" / \"p\" / \"q\" / \"r\" / \"s\" / \"t\" / \"u\" / \"v\" / \"w\" / \"x\" / \"y\" / \"z\" / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" / \"G\" / \"H\" / \"I\" / \"J\" / \"K\" / \"L\" / \"M\" / \"N\" / \"O\" / \"P\" / \"Q\" / \"R\" / \"S\" / \"T\" / \"U\" / \"V\" / \"W\" / \"X\" / \"Y\" / \"Z\"\nnumber    = \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"9\" / \"0\"\ndelim     = \".\"\nsegment   = alpha *( alpha / number / \"-\" )\nauthority = segment *( delim segment )\nname      = segment\nnsid      = authority delim name\nnsid-ns   = authority delim \"*\"\n\n*/\n\nexport class NSID {\n  segments: string[] = []\n\n  static parse(nsid: string): NSID {\n    return new NSID(nsid)\n  }\n\n  static create(authority: string, name: string): NSID {\n    const segments = [...authority.split('.').reverse(), name].join('.')\n    return new NSID(segments)\n  }\n\n  static isValid(nsid: string): boolean {\n    try {\n      NSID.parse(nsid)\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  constructor(nsid: string) {\n    ensureValidNsid(nsid)\n    this.segments = nsid.split('.')\n  }\n\n  get authority() {\n    return this.segments\n      .slice(0, this.segments.length - 1)\n      .reverse()\n      .join('.')\n  }\n\n  get name() {\n    return this.segments.at(this.segments.length - 1)\n  }\n\n  toString() {\n    return this.segments.join('.')\n  }\n}\n\n// Human readable constraints on NSID:\n// - a valid domain in reversed notation. which means the same as a loose domain!\nexport const ensureValidNsid = (nsid: string): void => {\n  // to handle nsid-ns\n  const split = nsid.split('.')\n  const toCheck =\n    split.at(-1) === '*' ? split.slice(0, -1).join('.') : split.join('.')\n\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {\n    throw new InvalidNsidError(\n      'Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)',\n    )\n  }\n\n  if (toCheck.length > 253 + 1 + 128) {\n    throw new InvalidNsidError('NSID is too long (382 chars max)')\n  }\n  const labels = toCheck.split('.')\n  if (split.length < 3) {\n    throw new InvalidNsidError('NSID needs at least three parts')\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i]\n    if (l.length < 1) {\n      throw new InvalidNsidError('NSID parts can not be empty')\n    }\n    if (l.length > 63 && i + 1 < labels.length) {\n      throw new InvalidNsidError('NSID domain part too long (max 63 chars)')\n    }\n    if (l.length > 128 && i + 1 == labels.length) {\n      throw new InvalidNsidError('NSID name part too long (max 127 chars)')\n    }\n    if (l.endsWith('-')) {\n      throw new InvalidNsidError('NSID parts can not end with hyphen')\n    }\n    if (!/^[a-zA-Z]/.test(l)) {\n      throw new InvalidNsidError('NSID parts must start with ASCII letter')\n    }\n  }\n}\n\n// nsid-ns is not handled in regex yet\nexport const ensureValidNsidRegex = (nsid: string): void => {\n  // simple regex to enforce most constraints via just regex and length.\n  // hand wrote this regex based on above constraints\n  if (\n    !/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z]([a-zA-Z0-9-]{0,126}[a-zA-Z0-9])?)$/.test(\n      nsid,\n    )\n  ) {\n    throw new InvalidNsidError(\"NSID didn't validate via regex\")\n  }\n  if (nsid.length > 253 + 1 + 128) {\n    throw new InvalidNsidError('NSID is too long (382 chars max)')\n  }\n}\n\nexport class InvalidNsidError extends Error {}\n","import * as id from '@atproto/identifier'\nimport * as nsid from '@atproto/nsid'\n\n// Human-readable constraints on ATURI:\n//   - following regular URLs, a 8KByte hard total length limit\n//   - follows ATURI docs on website\n//      - all ASCII characters, no whitespace. non-ASCII could be URL-encoded\n//      - starts \"at://\"\n//      - \"authority\" is a valid DID or a valid handle\n//      - optionally, follow \"authority\" with \"/\" and valid NSID as start of path\n//      - optionally, if NSID given, follow that with \"/\" and rkey\n//      - rkey path component can include URL-encoded (\"percent encoded\"), or:\n//          ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \":\" / \"@\" / \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n//          [a-zA-Z0-9._~:@!$&'\\(\\)*+,;=-]\n//      - rkey must have at least one char\n//      - regardless of path component, a fragment can follow  as \"#\" and then a JSON pointer (RFC-6901)\nexport const ensureValidAtUri = (uri: string) => {\n  // JSON pointer is pretty different from rest of URI, so split that out first\n  const uriParts = uri.split('#')\n  if (uriParts.length > 2) {\n    throw new Error('ATURI can have at most one \"#\", separating fragment out')\n  }\n  const fragmentPart = uriParts[1] || null\n  uri = uriParts[0]\n\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {\n    throw new Error('Disallowed characters in ATURI (ASCII)')\n  }\n\n  const parts = uri.split('/')\n  if (parts.length >= 3 && (parts[0] != 'at:' || parts[1].length != 0)) {\n    throw new Error('ATURI must start with \"at://\"')\n  }\n  if (parts.length < 3) {\n    throw new Error('ATURI requires at least method and authority sections')\n  }\n\n  try {\n    id.ensureValidHandle(parts[2])\n  } catch {\n    try {\n      id.ensureValidDid(parts[2])\n    } catch {\n      throw new Error('ATURI authority must be a valid handle or DID')\n    }\n  }\n\n  if (parts.length >= 4) {\n    if (parts[3].length == 0) {\n      throw new Error(\n        'ATURI can not have a slash after authority without a path segment',\n      )\n    }\n    try {\n      nsid.ensureValidNsid(parts[3])\n    } catch {\n      throw new Error(\n        'ATURI requires first path segment (if supplied) to be valid NSID',\n      )\n    }\n  }\n\n  if (parts.length >= 5) {\n    if (parts[4].length == 0) {\n      throw new Error(\n        'ATURI can not have a slash after collection, unless record key is provided',\n      )\n    }\n    // would validate rkey here, but there are basically no constraints!\n  }\n\n  if (parts.length >= 6) {\n    throw new Error(\n      'ATURI path can have at most two parts, and no trailing slash',\n    )\n  }\n\n  if (uriParts.length >= 2 && fragmentPart == null) {\n    throw new Error('ATURI fragment must be non-empty and start with slash')\n  }\n\n  if (fragmentPart != null) {\n    if (fragmentPart.length == 0 || fragmentPart[0] != '/') {\n      throw new Error('ATURI fragment must be non-empty and start with slash')\n    }\n    // NOTE: enforcing *some* checks here for sanity. Eg, at least no whitespace\n    if (!/^\\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\\]/-]*$/.test(fragmentPart)) {\n      throw new Error('Disallowed characters in ATURI fragment (ASCII)')\n    }\n  }\n\n  if (uri.length > 8 * 1024) {\n    throw new Error('ATURI is far too long')\n  }\n}\n\nexport const ensureValidAtUriRegex = (uri: string): void => {\n  // simple regex to enforce most constraints via just regex and length.\n  // hand wrote this regex based on above constraints. whew!\n  const aturiRegex =\n    /^at:\\/\\/(?<authority>[a-zA-Z0-9._:%-]+)(\\/(?<collection>[a-zA-Z0-9-.]+)(\\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\\/[a-zA-Z0-9._~:@!$&%')(*+,;=\\-[\\]/\\\\]*))?$/\n  const rm = uri.match(aturiRegex)\n  if (!rm || !rm.groups) {\n    throw new Error(\"ATURI didn't validate via regex\")\n  }\n  const groups = rm.groups\n\n  try {\n    id.ensureValidHandleRegex(groups.authority)\n  } catch {\n    try {\n      id.ensureValidDidRegex(groups.authority)\n    } catch {\n      throw new Error('ATURI authority must be a valid handle or DID')\n    }\n  }\n\n  if (groups.collection) {\n    try {\n      nsid.ensureValidNsidRegex(groups.collection)\n    } catch {\n      throw new Error('ATURI collection path segment must be a valid NSID')\n    }\n  }\n\n  if (uri.length > 8 * 1024) {\n    throw new Error('ATURI is far too long')\n  }\n}\n","export * from './validation'\n\nexport const ATP_URI_REGEX =\n  // proto-    --did--------------   --name----------------   --path----   --query--   --hash--\n  /^(at:\\/\\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i\n//                       --path-----   --query--  --hash--\nconst RELATIVE_REGEX = /^(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i\n\nexport class AtUri {\n  hash: string\n  host: string\n  pathname: string\n  searchParams: URLSearchParams\n\n  constructor(uri: string, base?: string) {\n    let parsed\n    if (base) {\n      parsed = parse(base)\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${base}`)\n      }\n      const relativep = parseRelative(uri)\n      if (!relativep) {\n        throw new Error(`Invalid path: ${uri}`)\n      }\n      Object.assign(parsed, relativep)\n    } else {\n      parsed = parse(uri)\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${uri}`)\n      }\n    }\n\n    this.hash = parsed.hash\n    this.host = parsed.host\n    this.pathname = parsed.pathname\n    this.searchParams = parsed.searchParams\n  }\n\n  static make(handleOrDid: string, collection?: string, rkey?: string) {\n    let str = handleOrDid\n    if (collection) str += '/' + collection\n    if (rkey) str += '/' + rkey\n    return new AtUri(str)\n  }\n\n  get protocol() {\n    return 'at:'\n  }\n\n  get origin() {\n    return `at://${this.host}`\n  }\n\n  get hostname() {\n    return this.host\n  }\n\n  set hostname(v: string) {\n    this.host = v\n  }\n\n  get search() {\n    return this.searchParams.toString()\n  }\n\n  set search(v: string) {\n    this.searchParams = new URLSearchParams(v)\n  }\n\n  get collection() {\n    return this.pathname.split('/').filter(Boolean)[0] || ''\n  }\n\n  set collection(v: string) {\n    const parts = this.pathname.split('/').filter(Boolean)\n    parts[0] = v\n    this.pathname = parts.join('/')\n  }\n\n  get rkey() {\n    return this.pathname.split('/').filter(Boolean)[1] || ''\n  }\n\n  set rkey(v: string) {\n    const parts = this.pathname.split('/').filter(Boolean)\n    if (!parts[0]) parts[0] = 'undefined'\n    parts[1] = v\n    this.pathname = parts.join('/')\n  }\n\n  get href() {\n    return this.toString()\n  }\n\n  toString() {\n    let path = this.pathname || '/'\n    if (!path.startsWith('/')) {\n      path = `/${path}`\n    }\n    let qs = this.searchParams.toString()\n    if (qs && !qs.startsWith('?')) {\n      qs = `?${qs}`\n    }\n    let hash = this.hash\n    if (hash && !hash.startsWith('#')) {\n      hash = `#${hash}`\n    }\n    return `at://${this.host}${path}${qs}${hash}`\n  }\n}\n\nfunction parse(str: string) {\n  const match = ATP_URI_REGEX.exec(str)\n  if (match) {\n    return {\n      hash: match[5] || '',\n      host: match[2] || '',\n      pathname: match[3] || '',\n      searchParams: new URLSearchParams(match[4] || ''),\n    }\n  }\n  return undefined\n}\n\nfunction parseRelative(str: string) {\n  const match = RELATIVE_REGEX.exec(str)\n  if (match) {\n    return {\n      hash: match[3] || '',\n      pathname: match[1] || '',\n      searchParams: new URLSearchParams(match[2] || ''),\n    }\n  }\n  return undefined\n}\n","import { z } from 'zod'\nimport { NSID } from '@atproto/nsid'\n\n// primitives\n// =\n\nexport const lexBoolean = z.object({\n  type: z.literal('boolean'),\n  description: z.string().optional(),\n  default: z.boolean().optional(),\n  const: z.boolean().optional(),\n})\nexport type LexBoolean = z.infer<typeof lexBoolean>\n\nexport const lexInteger = z.object({\n  type: z.literal('integer'),\n  description: z.string().optional(),\n  default: z.number().int().optional(),\n  minimum: z.number().int().optional(),\n  maximum: z.number().int().optional(),\n  enum: z.number().int().array().optional(),\n  const: z.number().int().optional(),\n})\nexport type LexInteger = z.infer<typeof lexInteger>\n\nexport const lexStringFormat = z.enum([\n  'datetime',\n  'uri',\n  'at-uri',\n  'did',\n  'handle',\n  'at-identifier',\n  'nsid',\n  'cid',\n])\nexport type LexStringFormat = z.infer<typeof lexStringFormat>\n\nexport const lexString = z.object({\n  type: z.literal('string'),\n  format: lexStringFormat.optional(),\n  description: z.string().optional(),\n  default: z.string().optional(),\n  minLength: z.number().int().optional(),\n  maxLength: z.number().int().optional(),\n  minGraphemes: z.number().int().optional(),\n  maxGraphemes: z.number().int().optional(),\n  enum: z.string().array().optional(),\n  const: z.string().optional(),\n  knownValues: z.string().array().optional(),\n})\nexport type LexString = z.infer<typeof lexString>\n\nexport const lexUnknown = z.object({\n  type: z.literal('unknown'),\n  description: z.string().optional(),\n})\nexport type LexUnknown = z.infer<typeof lexUnknown>\n\nexport const lexPrimitive = z.union([\n  lexBoolean,\n  lexInteger,\n  lexString,\n  lexUnknown,\n])\nexport type LexPrimitive = z.infer<typeof lexPrimitive>\n\n// ipld types\n// =\n\nexport const lexBytes = z.object({\n  type: z.literal('bytes'),\n  description: z.string().optional(),\n  maxLength: z.number().optional(),\n  minLength: z.number().optional(),\n})\nexport type LexBytes = z.infer<typeof lexBytes>\n\nexport const lexCidLink = z.object({\n  type: z.literal('cid-link'),\n  description: z.string().optional(),\n})\nexport type LexCidLink = z.infer<typeof lexCidLink>\n\nexport const lexIpldType = z.union([lexBytes, lexCidLink])\nexport type LexIpldType = z.infer<typeof lexIpldType>\n\n// references\n// =\n\nexport const lexRef = z.object({\n  type: z.literal('ref'),\n  description: z.string().optional(),\n  ref: z.string(),\n})\nexport type LexRef = z.infer<typeof lexRef>\n\nexport const lexRefUnion = z.object({\n  type: z.literal('union'),\n  description: z.string().optional(),\n  refs: z.string().array(),\n  closed: z.boolean().optional(),\n})\nexport type LexRefUnion = z.infer<typeof lexRefUnion>\n\nexport const lexRefVariant = z.union([lexRef, lexRefUnion])\nexport type LexRefVariant = z.infer<typeof lexRefVariant>\n\n// blobs\n// =\n\nexport const lexBlob = z.object({\n  type: z.literal('blob'),\n  description: z.string().optional(),\n  accept: z.string().array().optional(),\n  maxSize: z.number().optional(),\n})\nexport type LexBlob = z.infer<typeof lexBlob>\n\n// complex types\n// =\n\nexport const lexArray = z.object({\n  type: z.literal('array'),\n  description: z.string().optional(),\n  items: z.union([lexPrimitive, lexIpldType, lexBlob, lexRefVariant]),\n  minLength: z.number().int().optional(),\n  maxLength: z.number().int().optional(),\n})\nexport type LexArray = z.infer<typeof lexArray>\n\nexport const lexPrimitiveArray = lexArray.merge(\n  z.object({\n    items: lexPrimitive,\n  }),\n)\nexport type LexPrimitiveArray = z.infer<typeof lexPrimitiveArray>\n\nexport const lexToken = z.object({\n  type: z.literal('token'),\n  description: z.string().optional(),\n})\nexport type LexToken = z.infer<typeof lexToken>\n\nexport const lexObject = z.object({\n  type: z.literal('object'),\n  description: z.string().optional(),\n  required: z.string().array().optional(),\n  nullable: z.string().array().optional(),\n  properties: z\n    .record(\n      z.union([lexRefVariant, lexIpldType, lexArray, lexBlob, lexPrimitive]),\n    )\n    .optional(),\n})\nexport type LexObject = z.infer<typeof lexObject>\n\n// xrpc\n// =\n\nexport const lexXrpcParameters = z.object({\n  type: z.literal('params'),\n  description: z.string().optional(),\n  required: z.string().array().optional(),\n  properties: z.record(z.union([lexPrimitive, lexPrimitiveArray])),\n})\nexport type LexXrpcParameters = z.infer<typeof lexXrpcParameters>\n\nexport const lexXrpcBody = z.object({\n  description: z.string().optional(),\n  encoding: z.string(),\n  schema: z.union([lexRefVariant, lexObject]).optional(),\n})\nexport type LexXrpcBody = z.infer<typeof lexXrpcBody>\n\nexport const lexXrpcSubscriptionMessage = z.object({\n  description: z.string().optional(),\n  schema: z.union([lexRefVariant, lexObject]).optional(),\n})\nexport type LexXrpcSubscriptionMessage = z.infer<\n  typeof lexXrpcSubscriptionMessage\n>\n\nexport const lexXrpcError = z.object({\n  name: z.string(),\n  description: z.string().optional(),\n})\nexport type LexXrpcError = z.infer<typeof lexXrpcError>\n\nexport const lexXrpcQuery = z.object({\n  type: z.literal('query'),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  output: lexXrpcBody.optional(),\n  errors: lexXrpcError.array().optional(),\n})\nexport type LexXrpcQuery = z.infer<typeof lexXrpcQuery>\n\nexport const lexXrpcProcedure = z.object({\n  type: z.literal('procedure'),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  input: lexXrpcBody.optional(),\n  output: lexXrpcBody.optional(),\n  errors: lexXrpcError.array().optional(),\n})\nexport type LexXrpcProcedure = z.infer<typeof lexXrpcProcedure>\n\nexport const lexXrpcSubscription = z.object({\n  type: z.literal('subscription'),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  message: lexXrpcSubscriptionMessage.optional(),\n  infos: lexXrpcError.array().optional(),\n  errors: lexXrpcError.array().optional(),\n})\nexport type LexXrpcSubscription = z.infer<typeof lexXrpcSubscription>\n\n// database\n// =\n\nexport const lexRecord = z.object({\n  type: z.literal('record'),\n  description: z.string().optional(),\n  key: z.string().optional(),\n  record: lexObject,\n})\nexport type LexRecord = z.infer<typeof lexRecord>\n\n// core\n// =\n\nexport const lexUserType = z.union([\n  lexRecord,\n\n  lexXrpcQuery,\n  lexXrpcProcedure,\n  lexXrpcSubscription,\n\n  lexBlob,\n\n  lexArray,\n  lexToken,\n  lexObject,\n\n  lexBoolean,\n  lexInteger,\n  lexString,\n  lexBytes,\n  lexCidLink,\n  lexUnknown,\n])\nexport type LexUserType = z.infer<typeof lexUserType>\n\nexport const lexiconDoc = z\n  .object({\n    lexicon: z.literal(1),\n    id: z.string().refine((v: string) => NSID.isValid(v), {\n      message: 'Must be a valid NSID',\n    }),\n    revision: z.number().optional(),\n    description: z.string().optional(),\n    defs: z.record(lexUserType),\n  })\n  .superRefine((doc: LexiconDoc, ctx) => {\n    for (const defId in doc.defs) {\n      const def = doc.defs[defId]\n      if (\n        defId !== 'main' &&\n        (def.type === 'record' ||\n          def.type === 'procedure' ||\n          def.type === 'query' ||\n          def.type === 'subscription')\n      ) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Records, procedures, queries, and subscriptions must be the main definition.`,\n        })\n      }\n    }\n  })\nexport type LexiconDoc = z.infer<typeof lexiconDoc>\n\n// helpers\n// =\n\nexport function isValidLexiconDoc(v: unknown): v is LexiconDoc {\n  return lexiconDoc.safeParse(v).success\n}\n\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\n  return obj !== null && typeof obj === 'object'\n}\n\nexport function hasProp<K extends PropertyKey>(\n  data: object,\n  prop: K,\n): data is Record<K, unknown> {\n  return prop in data\n}\n\nexport const discriminatedObject = z.object({ $type: z.string() })\nexport type DiscriminatedObject = z.infer<typeof discriminatedObject>\nexport function isDiscriminatedObject(\n  value: unknown,\n): value is DiscriminatedObject {\n  return discriminatedObject.safeParse(value).success\n}\n\nexport class LexiconDocMalformedError extends Error {\n  constructor(\n    message: string,\n    public schemaDef: unknown,\n    public issues?: z.ZodIssue[],\n  ) {\n    super(message)\n    this.schemaDef = schemaDef\n    this.issues = issues\n  }\n}\n\nexport type ValidationResult =\n  | {\n      success: true\n      value: unknown\n    }\n  | {\n      success: false\n      error: ValidationError\n    }\n\nexport class ValidationError extends Error {}\nexport class InvalidLexiconError extends Error {}\nexport class LexiconDefNotFoundError extends Error {}\n","import { ensureValidAtUri } from '@atproto/uri'\nimport { isValidISODateString } from 'iso-datestring-validator'\nimport { CID } from 'multiformats/cid'\nimport { ValidationResult, ValidationError } from '../types'\nimport { ensureValidDid, ensureValidHandle } from '@atproto/identifier'\nimport { ensureValidNsid } from '@atproto/nsid'\n\nexport function datetime(path: string, value: string): ValidationResult {\n  try {\n    if (!isValidISODateString(value)) {\n      throw new Error()\n    }\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(\n        `${path} must be an iso8601 formatted datetime`,\n      ),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function uri(path: string, value: string): ValidationResult {\n  const isUri = value.match(/^\\w+:(?:\\/\\/)?[^\\s/][^\\s]*$/) !== null\n  if (!isUri) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a uri`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function atUri(path: string, value: string): ValidationResult {\n  try {\n    ensureValidAtUri(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid at-uri`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function did(path: string, value: string): ValidationResult {\n  try {\n    ensureValidDid(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid did`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function handle(path: string, value: string): ValidationResult {\n  try {\n    ensureValidHandle(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid handle`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function atIdentifier(path: string, value: string): ValidationResult {\n  const isDid = did(path, value)\n  if (!isDid.success) {\n    const isHandle = handle(path, value)\n    if (!isHandle.success) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be a valid did or a handle`),\n      }\n    }\n  }\n  return { success: true, value }\n}\n\nexport function nsid(path: string, value: string): ValidationResult {\n  try {\n    ensureValidNsid(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid nsid`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function cid(path: string, value: string): ValidationResult {\n  try {\n    CID.parse(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a cid string`),\n    }\n  }\n  return { success: true, value }\n}\n","import { utf8Len, graphemeLen } from '@atproto/common-web'\nimport { CID } from 'multiformats/cid'\nimport { Lexicons } from '../lexicons'\nimport * as formats from './formats'\nimport {\n  LexUserType,\n  LexBoolean,\n  LexInteger,\n  LexString,\n  ValidationResult,\n  ValidationError,\n  LexBytes,\n} from '../types'\n\nexport function validate(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  switch (def.type) {\n    case 'boolean':\n      return boolean(lexicons, path, def, value)\n    case 'integer':\n      return integer(lexicons, path, def, value)\n    case 'string':\n      return string(lexicons, path, def, value)\n    case 'bytes':\n      return bytes(lexicons, path, def, value)\n    case 'cid-link':\n      return cidLink(lexicons, path, def, value)\n    case 'unknown':\n      return unknown(lexicons, path, def, value)\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def.type}`),\n      }\n  }\n}\n\nexport function boolean(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexBoolean\n\n  // type\n  const type = typeof value\n  if (type === 'undefined') {\n    if (typeof def.default === 'boolean') {\n      return { success: true, value: def.default }\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`),\n    }\n  } else if (type !== 'boolean') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`),\n    }\n  }\n\n  // const\n  if (typeof def.const === 'boolean') {\n    if (value !== def.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def.const}`),\n      }\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function integer(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexInteger\n\n  // type\n  const type = typeof value\n  if (type === 'undefined') {\n    if (typeof def.default === 'number') {\n      return { success: true, value: def.default }\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`),\n    }\n  } else if (!Number.isInteger(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`),\n    }\n  }\n\n  // const\n  if (typeof def.const === 'number') {\n    if (value !== def.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def.const}`),\n      }\n    }\n  }\n\n  // enum\n  if (Array.isArray(def.enum)) {\n    if (!def.enum.includes(value as number)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be one of (${def.enum.join('|')})`,\n        ),\n      }\n    }\n  }\n\n  // maximum\n  if (typeof def.maximum === 'number') {\n    if ((value as number) > def.maximum) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} can not be greater than ${def.maximum}`,\n        ),\n      }\n    }\n  }\n\n  // minimum\n  if (typeof def.minimum === 'number') {\n    if ((value as number) < def.minimum) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} can not be less than ${def.minimum}`,\n        ),\n      }\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function string(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexString\n\n  // type\n  if (typeof value === 'undefined') {\n    if (typeof def.default === 'string') {\n      return { success: true, value: def.default }\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`),\n    }\n  } else if (typeof value !== 'string') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`),\n    }\n  }\n\n  // const\n  if (typeof def.const === 'string') {\n    if (value !== def.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def.const}`),\n      }\n    }\n  }\n\n  // enum\n  if (Array.isArray(def.enum)) {\n    if (!def.enum.includes(value as string)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be one of (${def.enum.join('|')})`,\n        ),\n      }\n    }\n  }\n\n  // maxLength\n  if (typeof def.maxLength === 'number') {\n    if (utf8Len(value) > def.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be longer than ${def.maxLength} characters`,\n        ),\n      }\n    }\n  }\n\n  // minLength\n  if (typeof def.minLength === 'number') {\n    if (utf8Len(value) < def.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be shorter than ${def.minLength} characters`,\n        ),\n      }\n    }\n  }\n\n  // maxGraphemes\n  if (typeof def.maxGraphemes === 'number') {\n    if (graphemeLen(value) > def.maxGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be longer than ${def.maxGraphemes} graphemes`,\n        ),\n      }\n    }\n  }\n\n  // minGraphemes\n  if (typeof def.minGraphemes === 'number') {\n    if (graphemeLen(value) < def.minGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be shorter than ${def.minGraphemes} graphemes`,\n        ),\n      }\n    }\n  }\n\n  if (typeof def.format === 'string') {\n    switch (def.format) {\n      case 'datetime':\n        return formats.datetime(path, value)\n      case 'uri':\n        return formats.uri(path, value)\n      case 'at-uri':\n        return formats.atUri(path, value)\n      case 'did':\n        return formats.did(path, value)\n      case 'handle':\n        return formats.handle(path, value)\n      case 'at-identifier':\n        return formats.atIdentifier(path, value)\n      case 'nsid':\n        return formats.nsid(path, value)\n      case 'cid':\n        return formats.cid(path, value)\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function bytes(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexBytes\n\n  if (!value || !(value instanceof Uint8Array)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a byte array`),\n    }\n  }\n\n  // maxLength\n  if (typeof def.maxLength === 'number') {\n    if (value.byteLength > def.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be larger than ${def.maxLength} bytes`,\n        ),\n      }\n    }\n  }\n\n  // minLength\n  if (typeof def.minLength === 'number') {\n    if (value.byteLength < def.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be smaller than ${def.minLength} bytes`,\n        ),\n      }\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function cidLink(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  if (CID.asCID(value) === null) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a CID`),\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function unknown(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  // type\n  if (!value || typeof value !== 'object') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`),\n    }\n  }\n\n  return { success: true, value }\n}\n","import { check, ipldToJson, schema } from '@atproto/common-web'\nimport { CID } from 'multiformats/cid'\nimport { z } from 'zod'\n\nexport const typedJsonBlobRef = z\n  .object({\n    $type: z.literal('blob'),\n    ref: schema.cid,\n    mimeType: z.string(),\n    size: z.number(),\n  })\n  .strict()\nexport type TypedJsonBlobRef = z.infer<typeof typedJsonBlobRef>\n\nexport const untypedJsonBlobRef = z\n  .object({\n    cid: z.string(),\n    mimeType: z.string(),\n  })\n  .strict()\nexport type UntypedJsonBlobRef = z.infer<typeof untypedJsonBlobRef>\n\nexport const jsonBlobRef = z.union([typedJsonBlobRef, untypedJsonBlobRef])\nexport type JsonBlobRef = z.infer<typeof jsonBlobRef>\n\nexport class BlobRef {\n  public original: JsonBlobRef\n\n  constructor(\n    public ref: CID,\n    public mimeType: string,\n    public size: number,\n    original?: JsonBlobRef,\n  ) {\n    this.original = original ?? {\n      $type: 'blob',\n      ref,\n      mimeType,\n      size,\n    }\n  }\n\n  static asBlobRef(obj: unknown): BlobRef | null {\n    if (check.is(obj, jsonBlobRef)) {\n      return BlobRef.fromJsonRef(obj)\n    }\n    return null\n  }\n\n  static fromJsonRef(json: JsonBlobRef): BlobRef {\n    if (check.is(json, typedJsonBlobRef)) {\n      return new BlobRef(json.ref, json.mimeType, json.size)\n    } else {\n      return new BlobRef(CID.parse(json.cid), json.mimeType, -1, json)\n    }\n  }\n\n  ipld(): TypedJsonBlobRef {\n    return {\n      $type: 'blob',\n      ref: this.ref,\n      mimeType: this.mimeType,\n      size: this.size,\n    }\n  }\n\n  toJSON() {\n    return ipldToJson(this.ipld())\n  }\n}\n","import { BlobRef } from '../blob-refs'\nimport { Lexicons } from '../lexicons'\nimport { LexUserType, ValidationResult, ValidationError } from '../types'\n\nexport function blob(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  // check\n  if (!value || !(value instanceof BlobRef)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} should be a blob ref`),\n    }\n  }\n  return { success: true, value }\n}\n","import { Lexicons } from '../lexicons'\nimport {\n  LexArray,\n  LexObject,\n  LexUserType,\n  ValidationResult,\n  ValidationError,\n} from '../types'\nimport { validateOneOf } from '../util'\n\nimport * as Primitives from './primitives'\nimport * as Blob from './blob'\n\nexport function validate(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  switch (def.type) {\n    case 'boolean':\n      return Primitives.boolean(lexicons, path, def, value)\n    case 'integer':\n      return Primitives.integer(lexicons, path, def, value)\n    case 'string':\n      return Primitives.string(lexicons, path, def, value)\n    case 'bytes':\n      return Primitives.bytes(lexicons, path, def, value)\n    case 'cid-link':\n      return Primitives.cidLink(lexicons, path, def, value)\n    case 'unknown':\n      return Primitives.unknown(lexicons, path, def, value)\n    case 'object':\n      return object(lexicons, path, def, value)\n    case 'array':\n      return array(lexicons, path, def, value)\n    case 'blob':\n      return Blob.blob(lexicons, path, def, value)\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def.type}`),\n      }\n  }\n}\n\nexport function array(\n  lexicons: Lexicons,\n  path: string,\n  def: LexArray,\n  value: unknown,\n): ValidationResult {\n  // type\n  if (!Array.isArray(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an array`),\n    }\n  }\n\n  // maxLength\n  if (typeof def.maxLength === 'number') {\n    if ((value as Array<unknown>).length > def.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not have more than ${def.maxLength} elements`,\n        ),\n      }\n    }\n  }\n\n  // minLength\n  if (typeof def.minLength === 'number') {\n    if ((value as Array<unknown>).length < def.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not have fewer than ${def.minLength} elements`,\n        ),\n      }\n    }\n  }\n\n  // items\n  const itemsDef = def.items\n  for (let i = 0; i < (value as Array<unknown>).length; i++) {\n    const itemValue = value[i]\n    const itemPath = `${path}/${i}`\n    const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue)\n    if (!res.success) {\n      return res\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function object(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexObject\n\n  // type\n  if (!value || typeof value !== 'object') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`),\n    }\n  }\n\n  const requiredProps = new Set(def.required)\n  const nullableProps = new Set(def.nullable)\n\n  // properties\n  let resultValue = value\n  if (typeof def.properties === 'object') {\n    for (const key in def.properties) {\n      if (value[key] === null && nullableProps.has(key)) {\n        continue\n      }\n      const propDef = def.properties[key]\n      const propPath = `${path}/${key}`\n      const validated = validateOneOf(lexicons, propPath, propDef, value[key])\n      const propValue = validated.success ? validated.value : value[key]\n      const propIsUndefined = typeof propValue === 'undefined'\n      // Return error for bad validation, giving required rule precedence\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`),\n        }\n      } else if (!propIsUndefined && !validated.success) {\n        return validated\n      }\n      // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          // Lazy shallow clone\n          resultValue = { ...value }\n        }\n        resultValue[key] = propValue\n      }\n    }\n  }\n\n  return { success: true, value: resultValue }\n}\n","import { Lexicons } from './lexicons'\nimport * as ComplexValidators from './validators/complex'\nimport {\n  LexUserType,\n  LexRefVariant,\n  ValidationError,\n  ValidationResult,\n  isDiscriminatedObject,\n} from './types'\n\nexport function toLexUri(str: string, baseUri?: string): string {\n  if (str.startsWith('lex:')) {\n    return str\n  }\n  if (str.startsWith('#')) {\n    if (!baseUri) {\n      throw new Error(`Unable to resolve uri without anchor: ${str}`)\n    }\n    return `${baseUri}${str}`\n  }\n  return `lex:${str}`\n}\n\nexport function validateOneOf(\n  lexicons: Lexicons,\n  path: string,\n  def: LexRefVariant | LexUserType,\n  value: unknown,\n  mustBeObj = false, // this is the only type constraint we need currently (used by xrpc body schema validators)\n): ValidationResult {\n  let error\n\n  let concreteDefs\n  if (def.type === 'union') {\n    if (!isDiscriminatedObject(value)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be an object which includes the \"$type\" property`,\n        ),\n      }\n    }\n    if (!def.refs.includes(toLexUri(value.$type))) {\n      if (def.closed) {\n        return {\n          success: false,\n          error: new ValidationError(\n            `${path} $type must be one of ${def.refs.join(', ')}`,\n          ),\n        }\n      }\n      return { success: true, value }\n    } else {\n      concreteDefs = toConcreteTypes(lexicons, {\n        type: 'ref',\n        ref: value.$type,\n      })\n    }\n  } else {\n    concreteDefs = toConcreteTypes(lexicons, def)\n  }\n\n  for (const concreteDef of concreteDefs) {\n    const result = mustBeObj\n      ? ComplexValidators.object(lexicons, path, concreteDef, value)\n      : ComplexValidators.validate(lexicons, path, concreteDef, value)\n    if (result.success) {\n      return result\n    }\n    error ??= result.error\n  }\n  if (concreteDefs.length > 1) {\n    return {\n      success: false,\n      error: new ValidationError(\n        `${path} did not match any of the expected definitions`,\n      ),\n    }\n  }\n  return { success: false, error }\n}\n\nexport function assertValidOneOf(\n  lexicons: Lexicons,\n  path: string,\n  def: LexRefVariant | LexUserType,\n  value: unknown,\n  mustBeObj = false,\n) {\n  const res = validateOneOf(lexicons, path, def, value, mustBeObj)\n  if (!res.success) throw res.error\n  return res.value\n}\n\nexport function toConcreteTypes(\n  lexicons: Lexicons,\n  def: LexRefVariant | LexUserType,\n): LexUserType[] {\n  if (def.type === 'ref') {\n    return [lexicons.getDefOrThrow(def.ref)]\n  } else if (def.type === 'union') {\n    return def.refs.map((ref) => lexicons.getDefOrThrow(ref)).flat()\n  } else {\n    return [def]\n  }\n}\n","import { Lexicons } from '../lexicons'\nimport { LexXrpcParameters, ValidationResult, ValidationError } from '../types'\n\nimport * as PrimitiveValidators from './primitives'\nimport { array } from './complex'\n\nexport function params(\n  lexicons: Lexicons,\n  path: string,\n  def: LexXrpcParameters,\n  val: unknown,\n): ValidationResult {\n  // type\n  const value = val && typeof val === 'object' ? val : {}\n\n  const requiredProps = new Set(def.required ?? [])\n\n  // properties\n  let resultValue = value\n  if (typeof def.properties === 'object') {\n    for (const key in def.properties) {\n      const propDef = def.properties[key]\n      const validated =\n        propDef.type === 'array'\n          ? array(lexicons, key, propDef, value[key])\n          : PrimitiveValidators.validate(lexicons, key, propDef, value[key])\n      const propValue = validated.success ? validated.value : value[key]\n      const propIsUndefined = typeof propValue === 'undefined'\n      // Return error for bad validation, giving required rule precedence\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`),\n        }\n      } else if (!propIsUndefined && !validated.success) {\n        return validated\n      }\n      // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          // Lazy shallow clone\n          resultValue = { ...value }\n        }\n        resultValue[key] = propValue\n      }\n    }\n  }\n\n  return { success: true, value: resultValue }\n}\n","import { Lexicons } from './lexicons'\nimport {\n  LexRecord,\n  LexXrpcProcedure,\n  LexXrpcQuery,\n  LexXrpcSubscription,\n} from './types'\nimport { assertValidOneOf } from './util'\n\nimport * as ComplexValidators from './validators/complex'\nimport * as XrpcValidators from './validators/xrpc'\n\nexport function assertValidRecord(\n  lexicons: Lexicons,\n  def: LexRecord,\n  value: unknown,\n) {\n  const res = ComplexValidators.object(lexicons, 'Record', def.record, value)\n  if (!res.success) throw res.error\n  return res.value\n}\n\nexport function assertValidXrpcParams(\n  lexicons: Lexicons,\n  def: LexXrpcProcedure | LexXrpcQuery | LexXrpcSubscription,\n  value: unknown,\n) {\n  if (def.parameters) {\n    const res = XrpcValidators.params(lexicons, 'Params', def.parameters, value)\n    if (!res.success) throw res.error\n    return res.value\n  }\n}\n\nexport function assertValidXrpcInput(\n  lexicons: Lexicons,\n  def: LexXrpcProcedure,\n  value: unknown,\n) {\n  if (def.input?.schema) {\n    // loop: all input schema definitions\n    return assertValidOneOf(lexicons, 'Input', def.input.schema, value, true)\n  }\n}\n\nexport function assertValidXrpcOutput(\n  lexicons: Lexicons,\n  def: LexXrpcProcedure | LexXrpcQuery,\n  value: unknown,\n) {\n  if (def.output?.schema) {\n    // loop: all output schema definitions\n    return assertValidOneOf(lexicons, 'Output', def.output.schema, value, true)\n  }\n}\n\nexport function assertValidXrpcMessage(\n  lexicons: Lexicons,\n  def: LexXrpcSubscription,\n  value: unknown,\n) {\n  if (def.message?.schema) {\n    // loop: all output schema definitions\n    return assertValidOneOf(\n      lexicons,\n      'Message',\n      def.message.schema,\n      value,\n      true,\n    )\n  }\n}\n","import { ZodError } from 'zod'\nimport {\n  LexiconDoc,\n  lexiconDoc,\n  LexRecord,\n  LexXrpcProcedure,\n  LexXrpcQuery,\n  LexUserType,\n  LexiconDocMalformedError,\n  LexiconDefNotFoundError,\n  InvalidLexiconError,\n  ValidationResult,\n  ValidationError,\n  isObj,\n  hasProp,\n  LexXrpcSubscription,\n} from './types'\nimport {\n  assertValidRecord,\n  assertValidXrpcParams,\n  assertValidXrpcInput,\n  assertValidXrpcOutput,\n  assertValidXrpcMessage,\n} from './validation'\nimport { toLexUri } from './util'\nimport * as ComplexValidators from './validators/complex'\n\n/**\n * A collection of compiled lexicons.\n */\nexport class Lexicons {\n  docs: Map<string, LexiconDoc> = new Map()\n  defs: Map<string, LexUserType> = new Map()\n\n  constructor(docs?: unknown[]) {\n    if (docs?.length) {\n      for (const doc of docs) {\n        this.add(doc)\n      }\n    }\n  }\n\n  /**\n   * Add a lexicon doc.\n   */\n  add(doc: unknown): void {\n    try {\n      lexiconDoc.parse(doc)\n    } catch (e) {\n      if (e instanceof ZodError) {\n        throw new LexiconDocMalformedError(\n          `Failed to parse schema definition ${\n            (doc as Record<string, string>).id\n          }`,\n          doc,\n          e.issues,\n        )\n      } else {\n        throw e\n      }\n    }\n    const validatedDoc = doc as LexiconDoc\n    const uri = toLexUri(validatedDoc.id)\n    if (this.docs.has(uri)) {\n      throw new Error(`${uri} has already been registered`)\n    }\n\n    // WARNING\n    // mutates the object\n    // -prf\n    resolveRefUris(validatedDoc, uri)\n\n    this.docs.set(uri, validatedDoc)\n    for (const [defUri, def] of iterDefs(validatedDoc)) {\n      this.defs.set(defUri, def)\n    }\n  }\n\n  /**\n   * Remove a lexicon doc.\n   */\n  remove(uri: string) {\n    uri = toLexUri(uri)\n    const doc = this.docs.get(uri)\n    if (!doc) {\n      throw new Error(`Unable to remove \"${uri}\": does not exist`)\n    }\n    for (const [defUri, _def] of iterDefs(doc)) {\n      this.defs.delete(defUri)\n    }\n    this.docs.delete(uri)\n  }\n\n  /**\n   * Get a lexicon doc.\n   */\n  get(uri: string): LexiconDoc | undefined {\n    uri = toLexUri(uri)\n    return this.docs.get(uri)\n  }\n\n  /**\n   * Get a definition.\n   */\n  getDef(uri: string): LexUserType | undefined {\n    uri = toLexUri(uri)\n    return this.defs.get(uri)\n  }\n\n  /**\n   * Get a def, throw if not found. Throws on not found.\n   */\n  getDefOrThrow(uri: string, types?: string[]): LexUserType {\n    const def = this.getDef(uri)\n    if (!def) {\n      throw new LexiconDefNotFoundError(`Lexicon not found: ${uri}`)\n    }\n    if (types && !types.includes(def.type)) {\n      throw new InvalidLexiconError(\n        `Not a ${types.join(' or ')} lexicon: ${uri}`,\n      )\n    }\n    return def\n  }\n\n  /**\n   * Validate a record or object.\n   */\n  validate(lexUri: string, value: unknown): ValidationResult {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['record', 'object'])\n    if (!isObj(value)) {\n      throw new ValidationError(`Value must be an object`)\n    }\n    if (def.type === 'record') {\n      return ComplexValidators.object(this, 'Record', def.record, value)\n    } else if (def.type === 'object') {\n      return ComplexValidators.object(this, 'Object', def, value)\n    } else {\n      // shouldnt happen\n      throw new InvalidLexiconError('Definition must be a record or object')\n    }\n  }\n\n  /**\n   * Validate a record and throw on any error.\n   */\n  assertValidRecord(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['record'])\n    if (!isObj(value)) {\n      throw new ValidationError(`Record must be an object`)\n    }\n    if (!hasProp(value, '$type') || typeof value.$type !== 'string') {\n      throw new ValidationError(`Record/$type must be a string`)\n    }\n    const $type = (value as Record<string, string>).$type || ''\n    if (toLexUri($type) !== lexUri) {\n      throw new ValidationError(\n        `Invalid $type: must be ${lexUri}, got ${$type}`,\n      )\n    }\n    return assertValidRecord(this, def as LexRecord, value)\n  }\n\n  /**\n   * Validate xrpc query params and throw on any error.\n   */\n  assertValidXrpcParams(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, [\n      'query',\n      'procedure',\n      'subscription',\n    ])\n    return assertValidXrpcParams(\n      this,\n      def as LexXrpcProcedure | LexXrpcQuery | LexXrpcSubscription,\n      value,\n    )\n  }\n\n  /**\n   * Validate xrpc input body and throw on any error.\n   */\n  assertValidXrpcInput(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['procedure'])\n    return assertValidXrpcInput(this, def as LexXrpcProcedure, value)\n  }\n\n  /**\n   * Validate xrpc output body and throw on any error.\n   */\n  assertValidXrpcOutput(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['query', 'procedure'])\n    return assertValidXrpcOutput(\n      this,\n      def as LexXrpcProcedure | LexXrpcQuery,\n      value,\n    )\n  }\n\n  /**\n   * Validate xrpc subscription message and throw on any error.\n   */\n  assertValidXrpcMessage<T = unknown>(lexUri: string, value: unknown): T {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['subscription'])\n    return assertValidXrpcMessage(this, def as LexXrpcSubscription, value) as T\n  }\n\n  /**\n   * Resolve a lex uri given a ref\n   */\n  resolveLexUri(lexUri: string, ref: string) {\n    lexUri = toLexUri(lexUri)\n    return toLexUri(ref, lexUri)\n  }\n}\n\nfunction* iterDefs(doc: LexiconDoc): Generator<[string, LexUserType]> {\n  for (const defId in doc.defs) {\n    yield [`lex:${doc.id}#${defId}`, doc.defs[defId]]\n    if (defId === 'main') {\n      yield [`lex:${doc.id}`, doc.defs[defId]]\n    }\n  }\n}\n\n// WARNING\n// this method mutates objects\n// -prf\nfunction resolveRefUris(obj: any, baseUri: string): any {\n  for (const k in obj) {\n    if (obj.type === 'ref') {\n      obj.ref = toLexUri(obj.ref, baseUri)\n    } else if (obj.type === 'union') {\n      obj.refs = obj.refs.map((ref) => toLexUri(ref, baseUri))\n    } else if (Array.isArray(obj[k])) {\n      obj[k] = obj[k].map((item: any) => {\n        if (typeof item === 'string') {\n          return item.startsWith('#') ? toLexUri(item, baseUri) : item\n        } else if (item && typeof item === 'object') {\n          return resolveRefUris(item, baseUri)\n        }\n        return item\n      })\n    } else if (obj[k] && typeof obj[k] === 'object') {\n      obj[k] = resolveRefUris(obj[k], baseUri)\n    }\n  }\n  return obj\n}\n","import {\n  check,\n  IpldValue,\n  ipldToJson,\n  jsonToIpld,\n  JsonValue,\n} from '@atproto/common-web'\nimport { CID } from 'multiformats/cid'\nimport { BlobRef, jsonBlobRef } from './blob-refs'\n\nexport type LexValue =\n  | IpldValue\n  | BlobRef\n  | Array<LexValue>\n  | { [key: string]: LexValue }\n\nexport type RepoRecord = Record<string, LexValue>\n\n// @NOTE avoiding use of check.is() here only because it makes\n// these implementations slow, and they often live in hot paths.\n\nexport const lexToIpld = (val: LexValue): IpldValue => {\n  // walk arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => lexToIpld(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode\n    if (val instanceof BlobRef) {\n      return val.original\n    }\n    // retain cids & bytes\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val\n    }\n    // walk plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = lexToIpld(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val\n}\n\nexport const ipldToLex = (val: IpldValue): LexValue => {\n  // map arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => ipldToLex(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // convert blobs, using hints to avoid expensive is() check\n    if (\n      (val['$type'] === 'blob' ||\n        (typeof val['cid'] === 'string' &&\n          typeof val['mimeType'] === 'string')) &&\n      check.is(val, jsonBlobRef)\n    ) {\n      return BlobRef.fromJsonRef(val)\n    }\n    // retain cids, bytes\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val\n    }\n    // map plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToLex(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val\n}\n\nexport const lexToJson = (val: LexValue): JsonValue => {\n  return ipldToJson(lexToIpld(val))\n}\n\nexport const stringifyLex = (val: LexValue): string => {\n  return JSON.stringify(lexToJson(val))\n}\n\nexport const jsonToLex = (val: JsonValue): LexValue => {\n  return ipldToLex(jsonToIpld(val))\n}\n\nexport const jsonStringToLex = (val: string): LexValue => {\n  return jsonToLex(JSON.parse(val))\n}\n","import { z } from 'zod'\nimport { ValidationError } from '@atproto/lexicon'\n\nexport type QueryParams = Record<string, any>\nexport type Headers = Record<string, string>\n\nexport interface CallOptions {\n  encoding?: string\n  headers?: Headers\n}\n\nexport interface FetchHandlerResponse {\n  status: number\n  headers: Headers\n  body: ArrayBuffer | undefined\n}\n\nexport type FetchHandler = (\n  httpUri: string,\n  httpMethod: string,\n  httpHeaders: Headers,\n  httpReqBody: any,\n) => Promise<FetchHandlerResponse>\n\nexport const errorResponseBody = z.object({\n  error: z.string().optional(),\n  message: z.string().optional(),\n})\nexport type ErrorResponseBody = z.infer<typeof errorResponseBody>\n\nexport enum ResponseType {\n  Unknown = 1,\n  InvalidResponse = 2,\n  Success = 200,\n  InvalidRequest = 400,\n  AuthRequired = 401,\n  Forbidden = 403,\n  XRPCNotSupported = 404,\n  PayloadTooLarge = 413,\n  RateLimitExceeded = 429,\n  InternalServerError = 500,\n  MethodNotImplemented = 501,\n  UpstreamFailure = 502,\n  NotEnoughResouces = 503,\n  UpstreamTimeout = 504,\n}\n\nexport const ResponseTypeNames = {\n  [ResponseType.InvalidResponse]: 'InvalidResponse',\n  [ResponseType.Success]: 'Success',\n  [ResponseType.InvalidRequest]: 'InvalidRequest',\n  [ResponseType.AuthRequired]: 'AuthenticationRequired',\n  [ResponseType.Forbidden]: 'Forbidden',\n  [ResponseType.XRPCNotSupported]: 'XRPCNotSupported',\n  [ResponseType.PayloadTooLarge]: 'PayloadTooLarge',\n  [ResponseType.RateLimitExceeded]: 'RateLimitExceeded',\n  [ResponseType.InternalServerError]: 'InternalServerError',\n  [ResponseType.MethodNotImplemented]: 'MethodNotImplemented',\n  [ResponseType.UpstreamFailure]: 'UpstreamFailure',\n  [ResponseType.NotEnoughResouces]: 'NotEnoughResouces',\n  [ResponseType.UpstreamTimeout]: 'UpstreamTimeout',\n}\n\nexport const ResponseTypeStrings = {\n  [ResponseType.InvalidResponse]: 'Invalid Response',\n  [ResponseType.Success]: 'Success',\n  [ResponseType.InvalidRequest]: 'Invalid Request',\n  [ResponseType.AuthRequired]: 'Authentication Required',\n  [ResponseType.Forbidden]: 'Forbidden',\n  [ResponseType.XRPCNotSupported]: 'XRPC Not Supported',\n  [ResponseType.PayloadTooLarge]: 'Payload Too Large',\n  [ResponseType.RateLimitExceeded]: 'Rate Limit Exceeded',\n  [ResponseType.InternalServerError]: 'Internal Server Error',\n  [ResponseType.MethodNotImplemented]: 'Method Not Implemented',\n  [ResponseType.UpstreamFailure]: 'Upstream Failure',\n  [ResponseType.NotEnoughResouces]: 'Not Enough Resouces',\n  [ResponseType.UpstreamTimeout]: 'Upstream Timeout',\n}\n\nexport class XRPCResponse {\n  success = true\n\n  constructor(public data: any, public headers: Headers) {}\n}\n\nexport class XRPCError extends Error {\n  success = false\n\n  constructor(\n    public status: ResponseType,\n    public error?: string,\n    message?: string,\n  ) {\n    super(message || error || ResponseTypeStrings[status])\n    if (!this.error) {\n      this.error = ResponseTypeNames[status]\n    }\n  }\n}\n\nexport class XRPCInvalidResponseError extends XRPCError {\n  constructor(\n    public lexiconNsid: string,\n    public validationError: ValidationError,\n    public responseBody: unknown,\n  ) {\n    super(\n      ResponseType.InvalidResponse,\n      ResponseTypeStrings[ResponseType.InvalidResponse],\n      `The server gave an invalid response and may be out of date.`,\n    )\n  }\n}\n","import {\n  jsonStringToLex,\n  LexXrpcProcedure,\n  LexXrpcQuery,\n  stringifyLex,\n} from '@atproto/lexicon'\nimport {\n  CallOptions,\n  Headers,\n  QueryParams,\n  ResponseType,\n  XRPCError,\n} from './types'\n\nexport function getMethodSchemaHTTPMethod(\n  schema: LexXrpcProcedure | LexXrpcQuery,\n) {\n  if (schema.type === 'procedure') {\n    return 'post'\n  }\n  return 'get'\n}\n\nexport function constructMethodCallUri(\n  nsid: string,\n  schema: LexXrpcProcedure | LexXrpcQuery,\n  serviceUri: URL,\n  params?: QueryParams,\n): string {\n  const uri = new URL(serviceUri)\n  uri.pathname = `/xrpc/${nsid}`\n\n  // given parameters\n  if (params) {\n    for (const [key, value] of Object.entries(params)) {\n      const paramSchema = schema.parameters?.properties?.[key]\n      if (!paramSchema) {\n        throw new Error(`Invalid query parameter: ${key}`)\n      }\n      if (value !== undefined) {\n        if (paramSchema.type === 'array') {\n          const vals: typeof value[] = []\n          vals.concat(value).forEach((val) => {\n            uri.searchParams.append(\n              key,\n              encodeQueryParam(paramSchema.items.type, val),\n            )\n          })\n        } else {\n          uri.searchParams.set(key, encodeQueryParam(paramSchema.type, value))\n        }\n      }\n    }\n  }\n\n  return uri.toString()\n}\n\nexport function encodeQueryParam(\n  type:\n    | 'string'\n    | 'float'\n    | 'integer'\n    | 'boolean'\n    | 'datetime'\n    | 'array'\n    | 'unknown',\n  value: any,\n): string {\n  if (type === 'string' || type === 'unknown') {\n    return String(value)\n  }\n  if (type === 'float') {\n    return String(Number(value))\n  } else if (type === 'integer') {\n    return String(Number(value) | 0)\n  } else if (type === 'boolean') {\n    return value ? 'true' : 'false'\n  } else if (type === 'datetime') {\n    if (value instanceof Date) {\n      return value.toISOString()\n    }\n    return String(value)\n  }\n  throw new Error(`Unsupported query param type: ${type}`)\n}\n\nexport function constructMethodCallHeaders(\n  schema: LexXrpcProcedure | LexXrpcQuery,\n  data?: any,\n  opts?: CallOptions,\n): Headers {\n  const headers: Headers = opts?.headers || {}\n  if (schema.type === 'procedure') {\n    if (opts?.encoding) {\n      headers['Content-Type'] = opts.encoding\n    }\n    if (data && typeof data === 'object') {\n      if (!headers['Content-Type']) {\n        headers['Content-Type'] = 'application/json'\n      }\n    }\n  }\n  return headers\n}\n\nexport function encodeMethodCallBody(\n  headers: Headers,\n  data?: any,\n): ArrayBuffer | undefined {\n  if (!headers['Content-Type'] || typeof data === 'undefined') {\n    return undefined\n  }\n  if (data instanceof ArrayBuffer) {\n    return data\n  }\n  if (headers['Content-Type'].startsWith('text/')) {\n    return new TextEncoder().encode(data.toString())\n  }\n  if (headers['Content-Type'].startsWith('application/json')) {\n    return new TextEncoder().encode(stringifyLex(data))\n  }\n  return data\n}\n\nexport function httpResponseCodeToEnum(status: number): ResponseType {\n  let resCode: ResponseType\n  if (status in ResponseType) {\n    resCode = status\n  } else if (status >= 100 && status < 200) {\n    resCode = ResponseType.XRPCNotSupported\n  } else if (status >= 200 && status < 300) {\n    resCode = ResponseType.Success\n  } else if (status >= 300 && status < 400) {\n    resCode = ResponseType.XRPCNotSupported\n  } else if (status >= 400 && status < 500) {\n    resCode = ResponseType.InvalidRequest\n  } else {\n    resCode = ResponseType.InternalServerError\n  }\n  return resCode\n}\n\nexport function httpResponseBodyParse(\n  mimeType: string | null,\n  data: ArrayBuffer | undefined,\n): any {\n  if (mimeType) {\n    if (mimeType.includes('application/json') && data?.byteLength) {\n      try {\n        const str = new TextDecoder().decode(data)\n        return jsonStringToLex(str)\n      } catch (e) {\n        throw new XRPCError(\n          ResponseType.InvalidResponse,\n          `Failed to parse response body: ${String(e)}`,\n        )\n      }\n    }\n    if (mimeType.startsWith('text/') && data?.byteLength) {\n      try {\n        return new TextDecoder().decode(data)\n      } catch (e) {\n        throw new XRPCError(\n          ResponseType.InvalidResponse,\n          `Failed to parse response body: ${String(e)}`,\n        )\n      }\n    }\n  }\n  if (data instanceof ArrayBuffer) {\n    return new Uint8Array(data)\n  }\n  return data\n}\n","import { Lexicons, ValidationError } from '@atproto/lexicon'\nimport {\n  getMethodSchemaHTTPMethod,\n  constructMethodCallUri,\n  constructMethodCallHeaders,\n  encodeMethodCallBody,\n  httpResponseCodeToEnum,\n  httpResponseBodyParse,\n} from './util'\nimport {\n  FetchHandler,\n  FetchHandlerResponse,\n  Headers,\n  CallOptions,\n  QueryParams,\n  ResponseType,\n  errorResponseBody,\n  ErrorResponseBody,\n  XRPCResponse,\n  XRPCError,\n  XRPCInvalidResponseError,\n} from './types'\n\nexport class Client {\n  fetch: FetchHandler = defaultFetchHandler\n  lex = new Lexicons()\n\n  // method calls\n  //\n\n  async call(\n    serviceUri: string | URL,\n    methodNsid: string,\n    params?: QueryParams,\n    data?: unknown,\n    opts?: CallOptions,\n  ) {\n    return this.service(serviceUri).call(methodNsid, params, data, opts)\n  }\n\n  service(serviceUri: string | URL) {\n    return new ServiceClient(this, serviceUri)\n  }\n\n  // schemas\n  // =\n\n  addLexicon(doc: unknown) {\n    this.lex.add(doc)\n  }\n\n  addLexicons(docs: unknown[]) {\n    for (const doc of docs) {\n      this.addLexicon(doc)\n    }\n  }\n\n  removeLexicon(uri: string) {\n    this.lex.remove(uri)\n  }\n}\n\nexport class ServiceClient {\n  baseClient: Client\n  uri: URL\n  headers: Record<string, string> = {}\n\n  constructor(baseClient: Client, serviceUri: string | URL) {\n    this.baseClient = baseClient\n    this.uri = typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri\n  }\n\n  setHeader(key: string, value: string): void {\n    this.headers[key] = value\n  }\n\n  unsetHeader(key: string): void {\n    delete this.headers[key]\n  }\n\n  async call(\n    methodNsid: string,\n    params?: QueryParams,\n    data?: unknown,\n    opts?: CallOptions,\n  ) {\n    const def = this.baseClient.lex.getDefOrThrow(methodNsid)\n    if (!def || (def.type !== 'query' && def.type !== 'procedure')) {\n      throw new Error(\n        `Invalid lexicon: ${methodNsid}. Must be a query or procedure.`,\n      )\n    }\n\n    const httpMethod = getMethodSchemaHTTPMethod(def)\n    const httpUri = constructMethodCallUri(methodNsid, def, this.uri, params)\n    const httpHeaders = constructMethodCallHeaders(def, data, {\n      headers: {\n        ...this.headers,\n        ...opts?.headers,\n      },\n      encoding: opts?.encoding,\n    })\n\n    const res = await this.baseClient.fetch(\n      httpUri,\n      httpMethod,\n      httpHeaders,\n      data,\n    )\n\n    const resCode = httpResponseCodeToEnum(res.status)\n    if (resCode === ResponseType.Success) {\n      try {\n        this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body)\n      } catch (e: any) {\n        if (e instanceof ValidationError) {\n          throw new XRPCInvalidResponseError(methodNsid, e, res.body)\n        } else {\n          throw e\n        }\n      }\n      return new XRPCResponse(res.body, res.headers)\n    } else {\n      if (res.body && isErrorResponseBody(res.body)) {\n        throw new XRPCError(resCode, res.body.error, res.body.message)\n      } else {\n        throw new XRPCError(resCode)\n      }\n    }\n  }\n}\n\nexport async function defaultFetchHandler(\n  httpUri: string,\n  httpMethod: string,\n  httpHeaders: Headers,\n  httpReqBody: unknown,\n): Promise<FetchHandlerResponse> {\n  try {\n    // The duplex field is now required for streaming bodies, but not yet reflected\n    // anywhere in docs or types. See whatwg/fetch#1438, nodejs/node#46221.\n    const reqInit: RequestInit & { duplex: string } = {\n      method: httpMethod,\n      headers: httpHeaders,\n      body: encodeMethodCallBody(httpHeaders, httpReqBody),\n      duplex: 'half',\n    }\n    const res = await fetch(httpUri, reqInit)\n    const resBody = await res.arrayBuffer()\n    return {\n      status: res.status,\n      headers: Object.fromEntries(res.headers.entries()),\n      body: httpResponseBodyParse(res.headers.get('content-type'), resBody),\n    }\n  } catch (e) {\n    throw new XRPCError(ResponseType.Unknown, String(e))\n  }\n}\n\nfunction isErrorResponseBody(v: unknown): v is ErrorResponseBody {\n  return errorResponseBody.safeParse(v).success\n}\n","export * from './types'\nexport * from './client'\n\nimport { Client } from './client'\nconst defaultInst = new Client()\nexport default defaultInst\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { LexiconDoc, Lexicons } from '@atproto/lexicon'\n\nexport const schemaDict = {\n  ComAtprotoAdminDefs: {\n    lexicon: 1,\n    id: 'com.atproto.admin.defs',\n    defs: {\n      actionView: {\n        type: 'object',\n        required: [\n          'id',\n          'action',\n          'subject',\n          'subjectBlobCids',\n          'reason',\n          'createdBy',\n          'createdAt',\n          'resolvedReportIds',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          action: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionType',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoRef',\n              'lex:com.atproto.repo.strongRef',\n            ],\n          },\n          subjectBlobCids: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          createLabelVals: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          negateLabelVals: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          reason: {\n            type: 'string',\n          },\n          createdBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          reversal: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionReversal',\n          },\n          resolvedReportIds: {\n            type: 'array',\n            items: {\n              type: 'integer',\n            },\n          },\n        },\n      },\n      actionViewDetail: {\n        type: 'object',\n        required: [\n          'id',\n          'action',\n          'subject',\n          'subjectBlobs',\n          'reason',\n          'createdBy',\n          'createdAt',\n          'resolvedReports',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          action: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionType',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoView',\n              'lex:com.atproto.admin.defs#recordView',\n            ],\n          },\n          subjectBlobs: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#blobView',\n            },\n          },\n          createLabelVals: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          negateLabelVals: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          reason: {\n            type: 'string',\n          },\n          createdBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          reversal: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionReversal',\n          },\n          resolvedReports: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#reportView',\n            },\n          },\n        },\n      },\n      actionViewCurrent: {\n        type: 'object',\n        required: ['id', 'action'],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          action: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionType',\n          },\n        },\n      },\n      actionReversal: {\n        type: 'object',\n        required: ['reason', 'createdBy', 'createdAt'],\n        properties: {\n          reason: {\n            type: 'string',\n          },\n          createdBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      actionType: {\n        type: 'string',\n        knownValues: [\n          'lex:com.atproto.admin.defs#takedown',\n          'lex:com.atproto.admin.defs#flag',\n          'lex:com.atproto.admin.defs#acknowledge',\n        ],\n      },\n      takedown: {\n        type: 'token',\n        description:\n          'Moderation action type: Takedown. Indicates that content should not be served by the PDS.',\n      },\n      flag: {\n        type: 'token',\n        description:\n          'Moderation action type: Flag. Indicates that the content was reviewed and considered to violate PDS rules, but may still be served.',\n      },\n      acknowledge: {\n        type: 'token',\n        description:\n          'Moderation action type: Acknowledge. Indicates that the content was reviewed and not considered to violate PDS rules.',\n      },\n      reportView: {\n        type: 'object',\n        required: [\n          'id',\n          'reasonType',\n          'subject',\n          'reportedBy',\n          'createdAt',\n          'resolvedByActionIds',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          reasonType: {\n            type: 'ref',\n            ref: 'lex:com.atproto.moderation.defs#reasonType',\n          },\n          reason: {\n            type: 'string',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoRef',\n              'lex:com.atproto.repo.strongRef',\n            ],\n          },\n          reportedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          resolvedByActionIds: {\n            type: 'array',\n            items: {\n              type: 'integer',\n            },\n          },\n        },\n      },\n      reportViewDetail: {\n        type: 'object',\n        required: [\n          'id',\n          'reasonType',\n          'subject',\n          'reportedBy',\n          'createdAt',\n          'resolvedByActions',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          reasonType: {\n            type: 'ref',\n            ref: 'lex:com.atproto.moderation.defs#reasonType',\n          },\n          reason: {\n            type: 'string',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoView',\n              'lex:com.atproto.admin.defs#recordView',\n            ],\n          },\n          reportedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          resolvedByActions: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#actionView',\n            },\n          },\n        },\n      },\n      repoView: {\n        type: 'object',\n        required: [\n          'did',\n          'handle',\n          'relatedRecords',\n          'indexedAt',\n          'moderation',\n        ],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          email: {\n            type: 'string',\n          },\n          relatedRecords: {\n            type: 'array',\n            items: {\n              type: 'unknown',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderation',\n          },\n          invitedBy: {\n            type: 'ref',\n            ref: 'lex:com.atproto.server.defs#inviteCode',\n          },\n        },\n      },\n      repoViewDetail: {\n        type: 'object',\n        required: [\n          'did',\n          'handle',\n          'relatedRecords',\n          'indexedAt',\n          'moderation',\n        ],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          email: {\n            type: 'string',\n          },\n          relatedRecords: {\n            type: 'array',\n            items: {\n              type: 'unknown',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderationDetail',\n          },\n          invitedBy: {\n            type: 'ref',\n            ref: 'lex:com.atproto.server.defs#inviteCode',\n          },\n          invites: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.server.defs#inviteCode',\n            },\n          },\n        },\n      },\n      repoRef: {\n        type: 'object',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n        },\n      },\n      recordView: {\n        type: 'object',\n        required: [\n          'uri',\n          'cid',\n          'value',\n          'blobCids',\n          'indexedAt',\n          'moderation',\n          'repo',\n        ],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          value: {\n            type: 'unknown',\n          },\n          blobCids: {\n            type: 'array',\n            items: {\n              type: 'string',\n              format: 'cid',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderation',\n          },\n          repo: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#repoView',\n          },\n        },\n      },\n      recordViewDetail: {\n        type: 'object',\n        required: [\n          'uri',\n          'cid',\n          'value',\n          'blobs',\n          'indexedAt',\n          'moderation',\n          'repo',\n        ],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          value: {\n            type: 'unknown',\n          },\n          blobs: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#blobView',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderationDetail',\n          },\n          repo: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#repoView',\n          },\n        },\n      },\n      moderation: {\n        type: 'object',\n        required: [],\n        properties: {\n          currentAction: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionViewCurrent',\n          },\n        },\n      },\n      moderationDetail: {\n        type: 'object',\n        required: ['actions', 'reports'],\n        properties: {\n          currentAction: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionViewCurrent',\n          },\n          actions: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#actionView',\n            },\n          },\n          reports: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#reportView',\n            },\n          },\n        },\n      },\n      blobView: {\n        type: 'object',\n        required: ['cid', 'mimeType', 'size', 'createdAt'],\n        properties: {\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          mimeType: {\n            type: 'string',\n          },\n          size: {\n            type: 'integer',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          details: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#imageDetails',\n              'lex:com.atproto.admin.defs#videoDetails',\n            ],\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderation',\n          },\n        },\n      },\n      imageDetails: {\n        type: 'object',\n        required: ['width', 'height'],\n        properties: {\n          width: {\n            type: 'integer',\n          },\n          height: {\n            type: 'integer',\n          },\n        },\n      },\n      videoDetails: {\n        type: 'object',\n        required: ['width', 'height', 'length'],\n        properties: {\n          width: {\n            type: 'integer',\n          },\n          height: {\n            type: 'integer',\n          },\n          length: {\n            type: 'integer',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminDisableInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.admin.disableInviteCodes',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Disable some set of codes and/or all codes associated with a set of users',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            properties: {\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              accounts: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getInviteCodes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Admin view of invite codes',\n        parameters: {\n          type: 'params',\n          properties: {\n            sort: {\n              type: 'string',\n              knownValues: ['recent', 'usage'],\n              default: 'recent',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 500,\n              default: 100,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codes'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.server.defs#inviteCode',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetModerationAction: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getModerationAction',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'View details about a moderation action.',\n        parameters: {\n          type: 'params',\n          required: ['id'],\n          properties: {\n            id: {\n              type: 'integer',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionViewDetail',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetModerationActions: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getModerationActions',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List moderation actions related to a subject.',\n        parameters: {\n          type: 'params',\n          properties: {\n            subject: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actions'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              actions: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#actionView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetModerationReport: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getModerationReport',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'View details about a moderation report.',\n        parameters: {\n          type: 'params',\n          required: ['id'],\n          properties: {\n            id: {\n              type: 'integer',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#reportViewDetail',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetModerationReports: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getModerationReports',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List moderation reports related to a subject.',\n        parameters: {\n          type: 'params',\n          properties: {\n            subject: {\n              type: 'string',\n            },\n            resolved: {\n              type: 'boolean',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['reports'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              reports: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#reportView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetRecord: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getRecord',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'View details about a record.',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#recordViewDetail',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetRepo: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getRepo',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'View details about a repository.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#repoViewDetail',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminResolveModerationReports: {\n    lexicon: 1,\n    id: 'com.atproto.admin.resolveModerationReports',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Resolve moderation reports by an action.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actionId', 'reportIds', 'createdBy'],\n            properties: {\n              actionId: {\n                type: 'integer',\n              },\n              reportIds: {\n                type: 'array',\n                items: {\n                  type: 'integer',\n                },\n              },\n              createdBy: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionView',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminReverseModerationAction: {\n    lexicon: 1,\n    id: 'com.atproto.admin.reverseModerationAction',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Reverse a moderation action.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['id', 'reason', 'createdBy'],\n            properties: {\n              id: {\n                type: 'integer',\n              },\n              reason: {\n                type: 'string',\n              },\n              createdBy: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionView',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminSearchRepos: {\n    lexicon: 1,\n    id: 'com.atproto.admin.searchRepos',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find repositories based on a search term.',\n        parameters: {\n          type: 'params',\n          properties: {\n            term: {\n              type: 'string',\n            },\n            invitedBy: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repos'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              repos: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#repoView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminTakeModerationAction: {\n    lexicon: 1,\n    id: 'com.atproto.admin.takeModerationAction',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Take a moderation action on a repo.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['action', 'subject', 'reason', 'createdBy'],\n            properties: {\n              action: {\n                type: 'string',\n                knownValues: [\n                  'com.atproto.admin.defs#takedown',\n                  'com.atproto.admin.defs#flag',\n                  'com.atproto.admin.defs#acknowledge',\n                ],\n              },\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                ],\n              },\n              subjectBlobCids: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'cid',\n                },\n              },\n              createLabelVals: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              negateLabelVals: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              reason: {\n                type: 'string',\n              },\n              createdBy: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#actionView',\n          },\n        },\n        errors: [\n          {\n            name: 'SubjectHasAction',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoAdminUpdateAccountHandle: {\n    lexicon: 1,\n    id: 'com.atproto.admin.updateAccountHandle',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Administrative action to update an accounts handle',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did', 'handle'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoIdentityResolveHandle: {\n    lexicon: 1,\n    id: 'com.atproto.identity.resolveHandle',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Provides the DID of a repo.',\n        parameters: {\n          type: 'params',\n          properties: {\n            handle: {\n              type: 'string',\n              format: 'handle',\n              description:\n                \"The handle to resolve. If not supplied, will resolve the host's own handle.\",\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoIdentityUpdateHandle: {\n    lexicon: 1,\n    id: 'com.atproto.identity.updateHandle',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Updates the handle of the account',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle'],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoLabelDefs: {\n    lexicon: 1,\n    id: 'com.atproto.label.defs',\n    defs: {\n      label: {\n        type: 'object',\n        description: 'Metadata tag on an atproto resource (eg, repo or record)',\n        required: ['src', 'uri', 'val', 'cts'],\n        properties: {\n          src: {\n            type: 'string',\n            format: 'did',\n            description: 'DID of the actor who created this label',\n          },\n          uri: {\n            type: 'string',\n            format: 'uri',\n            description:\n              'AT URI of the record, repository (account), or other resource which this label applies to',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n            description:\n              \"optionally, CID specifying the specific version of 'uri' resource this label applies to\",\n          },\n          val: {\n            type: 'string',\n            maxLength: 128,\n            description:\n              'the short string name of the value or type of this label',\n          },\n          neg: {\n            type: 'boolean',\n            description:\n              'if true, this is a negation label, overwriting a previous label',\n          },\n          cts: {\n            type: 'string',\n            format: 'datetime',\n            description: 'timestamp when this label was created',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoLabelQueryLabels: {\n    lexicon: 1,\n    id: 'com.atproto.label.queryLabels',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find labels relevant to the provided URI patterns.',\n        parameters: {\n          type: 'params',\n          required: ['uriPatterns'],\n          properties: {\n            uriPatterns: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n              description:\n                \"List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI\",\n            },\n            sources: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'did',\n              },\n              description: 'Optional list of label sources (DIDs) to filter on',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 250,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['labels'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              labels: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.label.defs#label',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoLabelSubscribeLabels: {\n    lexicon: 1,\n    id: 'com.atproto.label.subscribeLabels',\n    defs: {\n      main: {\n        type: 'subscription',\n        description: 'Subscribe to label updates',\n        parameters: {\n          type: 'params',\n          properties: {\n            cursor: {\n              type: 'integer',\n              description: 'The last known event to backfill from.',\n            },\n          },\n        },\n        message: {\n          schema: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.label.subscribeLabels#labels',\n              'lex:com.atproto.label.subscribeLabels#info',\n            ],\n          },\n        },\n        errors: [\n          {\n            name: 'FutureCursor',\n          },\n        ],\n      },\n      labels: {\n        type: 'object',\n        required: ['seq', 'labels'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      info: {\n        type: 'object',\n        required: ['name'],\n        properties: {\n          name: {\n            type: 'string',\n            knownValues: ['OutdatedCursor'],\n          },\n          message: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoModerationCreateReport: {\n    lexicon: 1,\n    id: 'com.atproto.moderation.createReport',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Report a repo or a record.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['reasonType', 'subject'],\n            properties: {\n              reasonType: {\n                type: 'ref',\n                ref: 'lex:com.atproto.moderation.defs#reasonType',\n              },\n              reason: {\n                type: 'string',\n              },\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                ],\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: [\n              'id',\n              'reasonType',\n              'subject',\n              'reportedBy',\n              'createdAt',\n            ],\n            properties: {\n              id: {\n                type: 'integer',\n              },\n              reasonType: {\n                type: 'ref',\n                ref: 'lex:com.atproto.moderation.defs#reasonType',\n              },\n              reason: {\n                type: 'string',\n              },\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                ],\n              },\n              reportedBy: {\n                type: 'string',\n                format: 'did',\n              },\n              createdAt: {\n                type: 'string',\n                format: 'datetime',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoModerationDefs: {\n    lexicon: 1,\n    id: 'com.atproto.moderation.defs',\n    defs: {\n      reasonType: {\n        type: 'string',\n        knownValues: [\n          'com.atproto.moderation.defs#reasonSpam',\n          'com.atproto.moderation.defs#reasonOther',\n        ],\n      },\n      reasonSpam: {\n        type: 'token',\n        description: 'Moderation report reason: Spam.',\n      },\n      reasonOther: {\n        type: 'token',\n        description: 'Moderation report reason: Other.',\n      },\n    },\n  },\n  ComAtprotoRepoApplyWrites: {\n    lexicon: 1,\n    id: 'com.atproto.repo.applyWrites',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Apply a batch transaction of creates, updates, and deletes.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'writes'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              validate: {\n                type: 'boolean',\n                default: true,\n                description: 'Validate the records?',\n              },\n              writes: {\n                type: 'array',\n                items: {\n                  type: 'union',\n                  refs: [\n                    'lex:com.atproto.repo.applyWrites#create',\n                    'lex:com.atproto.repo.applyWrites#update',\n                    'lex:com.atproto.repo.applyWrites#delete',\n                  ],\n                  closed: true,\n                },\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n      create: {\n        type: 'object',\n        description: 'Create a new record.',\n        required: ['action', 'collection', 'value'],\n        properties: {\n          collection: {\n            type: 'string',\n            format: 'nsid',\n          },\n          rkey: {\n            type: 'string',\n          },\n          value: {\n            type: 'unknown',\n          },\n        },\n      },\n      update: {\n        type: 'object',\n        description: 'Update an existing record.',\n        required: ['action', 'collection', 'rkey', 'value'],\n        properties: {\n          collection: {\n            type: 'string',\n            format: 'nsid',\n          },\n          rkey: {\n            type: 'string',\n          },\n          value: {\n            type: 'unknown',\n          },\n        },\n      },\n      delete: {\n        type: 'object',\n        description: 'Delete an existing record.',\n        required: ['action', 'collection', 'rkey'],\n        properties: {\n          collection: {\n            type: 'string',\n            format: 'nsid',\n          },\n          rkey: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoCreateRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.createRecord',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create a new record.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'collection', 'record'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              collection: {\n                type: 'string',\n                format: 'nsid',\n                description: 'The NSID of the record collection.',\n              },\n              rkey: {\n                type: 'string',\n                description: 'The key of the record.',\n              },\n              validate: {\n                type: 'boolean',\n                default: true,\n                description: 'Validate the record?',\n              },\n              record: {\n                type: 'unknown',\n                description: 'The record to create.',\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous commit by cid.',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'cid'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoRepoDeleteRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.deleteRecord',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Delete a record, or ensure it doesn't exist.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'collection', 'rkey'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              collection: {\n                type: 'string',\n                format: 'nsid',\n                description: 'The NSID of the record collection.',\n              },\n              rkey: {\n                type: 'string',\n                description: 'The key of the record.',\n              },\n              swapRecord: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous record by cid.',\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous commit by cid.',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoRepoDescribeRepo: {\n    lexicon: 1,\n    id: 'com.atproto.repo.describeRepo',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get information about the repo, including the list of collections.',\n        parameters: {\n          type: 'params',\n          required: ['repo'],\n          properties: {\n            repo: {\n              type: 'string',\n              format: 'at-identifier',\n              description: 'The handle or DID of the repo.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: [\n              'handle',\n              'did',\n              'didDoc',\n              'collections',\n              'handleIsCorrect',\n            ],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              didDoc: {\n                type: 'unknown',\n              },\n              collections: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'nsid',\n                },\n              },\n              handleIsCorrect: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoGetRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.getRecord',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a record.',\n        parameters: {\n          type: 'params',\n          required: ['repo', 'collection', 'rkey'],\n          properties: {\n            repo: {\n              type: 'string',\n              format: 'at-identifier',\n              description: 'The handle or DID of the repo.',\n            },\n            collection: {\n              type: 'string',\n              format: 'nsid',\n              description: 'The NSID of the record collection.',\n            },\n            rkey: {\n              type: 'string',\n              description: 'The key of the record.',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n              description:\n                'The CID of the version of the record. If not specified, then return the most recent version.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'value'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              value: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoListRecords: {\n    lexicon: 1,\n    id: 'com.atproto.repo.listRecords',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List a range of records in a collection.',\n        parameters: {\n          type: 'params',\n          required: ['repo', 'collection'],\n          properties: {\n            repo: {\n              type: 'string',\n              format: 'at-identifier',\n              description: 'The handle or DID of the repo.',\n            },\n            collection: {\n              type: 'string',\n              format: 'nsid',\n              description: 'The NSID of the record type.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n              description: 'The number of records to return.',\n            },\n            cursor: {\n              type: 'string',\n            },\n            rkeyStart: {\n              type: 'string',\n              description:\n                'DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)',\n            },\n            rkeyEnd: {\n              type: 'string',\n              description:\n                'DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)',\n            },\n            reverse: {\n              type: 'boolean',\n              description: 'Reverse the order of the returned records?',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['records'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              records: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.repo.listRecords#record',\n                },\n              },\n            },\n          },\n        },\n      },\n      record: {\n        type: 'object',\n        required: ['uri', 'cid', 'value'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          value: {\n            type: 'unknown',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoPutRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.putRecord',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Write a record, creating or updating it as needed.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'collection', 'rkey', 'record'],\n            nullable: ['swapRecord'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              collection: {\n                type: 'string',\n                format: 'nsid',\n                description: 'The NSID of the record collection.',\n              },\n              rkey: {\n                type: 'string',\n                description: 'The key of the record.',\n              },\n              validate: {\n                type: 'boolean',\n                default: true,\n                description: 'Validate the record?',\n              },\n              record: {\n                type: 'unknown',\n                description: 'The record to write.',\n              },\n              swapRecord: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous record by cid.',\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous commit by cid.',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'cid'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoRepoStrongRef: {\n    lexicon: 1,\n    id: 'com.atproto.repo.strongRef',\n    description: 'A URI with a content-hash fingerprint.',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['uri', 'cid'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoUploadBlob: {\n    lexicon: 1,\n    id: 'com.atproto.repo.uploadBlob',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Upload a new blob to be added to repo in a later request.',\n        input: {\n          encoding: '*/*',\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['blob'],\n            properties: {\n              blob: {\n                type: 'blob',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerCreateAccount: {\n    lexicon: 1,\n    id: 'com.atproto.server.createAccount',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an account.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle', 'email', 'password'],\n            properties: {\n              email: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              inviteCode: {\n                type: 'string',\n              },\n              password: {\n                type: 'string',\n              },\n              recoveryKey: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidHandle',\n          },\n          {\n            name: 'InvalidPassword',\n          },\n          {\n            name: 'InvalidInviteCode',\n          },\n          {\n            name: 'HandleNotAvailable',\n          },\n          {\n            name: 'UnsupportedDomain',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerCreateInviteCode: {\n    lexicon: 1,\n    id: 'com.atproto.server.createInviteCode',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an invite code.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['useCount'],\n            properties: {\n              useCount: {\n                type: 'integer',\n              },\n              forAccount: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['code'],\n            properties: {\n              code: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerCreateInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.server.createInviteCodes',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an invite code.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codeCount', 'useCount'],\n            properties: {\n              codeCount: {\n                type: 'integer',\n                default: 1,\n              },\n              useCount: {\n                type: 'integer',\n              },\n              forAccount: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codes'],\n            properties: {\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerCreateSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.createSession',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an authentication session.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['identifier', 'password'],\n            properties: {\n              identifier: {\n                type: 'string',\n                description:\n                  'Handle or other identifier supported by the server for the authenticating user.',\n              },\n              password: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              email: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'AccountTakedown',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerDefs: {\n    lexicon: 1,\n    id: 'com.atproto.server.defs',\n    defs: {\n      inviteCode: {\n        type: 'object',\n        required: [\n          'code',\n          'available',\n          'disabled',\n          'forAccount',\n          'createdBy',\n          'createdAt',\n          'uses',\n        ],\n        properties: {\n          code: {\n            type: 'string',\n          },\n          available: {\n            type: 'integer',\n          },\n          disabled: {\n            type: 'boolean',\n          },\n          forAccount: {\n            type: 'string',\n          },\n          createdBy: {\n            type: 'string',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          uses: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.server.defs#inviteCodeUse',\n            },\n          },\n        },\n      },\n      inviteCodeUse: {\n        type: 'object',\n        required: ['usedBy', 'usedAt'],\n        properties: {\n          usedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          usedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerDeleteAccount: {\n    lexicon: 1,\n    id: 'com.atproto.server.deleteAccount',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Delete a user account with a token and password.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did', 'password', 'token'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              password: {\n                type: 'string',\n              },\n              token: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'ExpiredToken',\n          },\n          {\n            name: 'InvalidToken',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerDeleteSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.deleteSession',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Delete the current session.',\n      },\n    },\n  },\n  ComAtprotoServerDescribeServer: {\n    lexicon: 1,\n    id: 'com.atproto.server.describeServer',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          \"Get a document describing the service's accounts configuration.\",\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['availableUserDomains'],\n            properties: {\n              inviteCodeRequired: {\n                type: 'boolean',\n              },\n              availableUserDomains: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              links: {\n                type: 'ref',\n                ref: 'lex:com.atproto.server.describeServer#links',\n              },\n            },\n          },\n        },\n      },\n      links: {\n        type: 'object',\n        properties: {\n          privacyPolicy: {\n            type: 'string',\n          },\n          termsOfService: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerGetAccountInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.server.getAccountInviteCodes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get all invite codes for a given account',\n        parameters: {\n          type: 'params',\n          properties: {\n            includeUsed: {\n              type: 'boolean',\n              default: true,\n            },\n            createAvailable: {\n              type: 'boolean',\n              default: true,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codes'],\n            properties: {\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.server.defs#inviteCode',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'DuplicateCreate',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerGetSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.getSession',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get information about the current session.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle', 'did'],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              email: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerRefreshSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.refreshSession',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Refresh an authentication session.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'AccountTakedown',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerRequestAccountDelete: {\n    lexicon: 1,\n    id: 'com.atproto.server.requestAccountDelete',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Initiate a user account deletion via email.',\n      },\n    },\n  },\n  ComAtprotoServerRequestPasswordReset: {\n    lexicon: 1,\n    id: 'com.atproto.server.requestPasswordReset',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Initiate a user account password reset via email.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['email'],\n            properties: {\n              email: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerResetPassword: {\n    lexicon: 1,\n    id: 'com.atproto.server.resetPassword',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Reset a user account password using a token.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['token', 'password'],\n            properties: {\n              token: {\n                type: 'string',\n              },\n              password: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'ExpiredToken',\n          },\n          {\n            name: 'InvalidToken',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoSyncGetBlob: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getBlob',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a blob associated with a given repo.',\n        parameters: {\n          type: 'params',\n          required: ['did', 'cid'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n              description: 'The CID of the blob to fetch',\n            },\n          },\n        },\n        output: {\n          encoding: '*/*',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetBlocks: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getBlocks',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Gets blocks from a given repo.',\n        parameters: {\n          type: 'params',\n          required: ['did', 'cids'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            cids: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetCheckout: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getCheckout',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Gets the repo state.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            commit: {\n              type: 'string',\n              format: 'cid',\n              description:\n                'The commit to get the checkout from. Defaults to current HEAD.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetCommitPath: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getCommitPath',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Gets the path of repo commits',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            latest: {\n              type: 'string',\n              format: 'cid',\n              description: 'The most recent commit',\n            },\n            earliest: {\n              type: 'string',\n              format: 'cid',\n              description: 'The earliest commit to start from',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['commits'],\n            properties: {\n              commits: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'cid',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetHead: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getHead',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Gets the current HEAD CID of a repo.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['root'],\n            properties: {\n              root: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetRecord: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getRecord',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Gets blocks needed for existence or non-existence of record.',\n        parameters: {\n          type: 'params',\n          required: ['did', 'collection', 'rkey'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            collection: {\n              type: 'string',\n              format: 'nsid',\n            },\n            rkey: {\n              type: 'string',\n            },\n            commit: {\n              type: 'string',\n              format: 'cid',\n              description: 'An optional past commit CID.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetRepo: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getRepo',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Gets the repo state.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            earliest: {\n              type: 'string',\n              format: 'cid',\n              description:\n                'The earliest commit in the commit range (not inclusive)',\n            },\n            latest: {\n              type: 'string',\n              format: 'cid',\n              description:\n                'The latest commit you in the commit range (inclusive',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncListBlobs: {\n    lexicon: 1,\n    id: 'com.atproto.sync.listBlobs',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List blob cids for some range of commits',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            latest: {\n              type: 'string',\n              format: 'cid',\n              description: 'The most recent commit',\n            },\n            earliest: {\n              type: 'string',\n              format: 'cid',\n              description: 'The earliest commit to start from',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['cids'],\n            properties: {\n              cids: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'cid',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncListRepos: {\n    lexicon: 1,\n    id: 'com.atproto.sync.listRepos',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List dids and root cids of hosted repos',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 1000,\n              default: 500,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repos'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              repos: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.sync.listRepos#repo',\n                },\n              },\n            },\n          },\n        },\n      },\n      repo: {\n        type: 'object',\n        required: ['did', 'head'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          head: {\n            type: 'string',\n            format: 'cid',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncNotifyOfUpdate: {\n    lexicon: 1,\n    id: 'com.atproto.sync.notifyOfUpdate',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Notify a crawling service of a recent update. Often when a long break between updates causes the connection with the crawling service to break.',\n        parameters: {\n          type: 'params',\n          required: ['hostname'],\n          properties: {\n            hostname: {\n              type: 'string',\n              description:\n                'Hostname of the service that is notifying of update.',\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncRequestCrawl: {\n    lexicon: 1,\n    id: 'com.atproto.sync.requestCrawl',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Request a service to persistently crawl hosted repos.',\n        parameters: {\n          type: 'params',\n          required: ['hostname'],\n          properties: {\n            hostname: {\n              type: 'string',\n              description:\n                'Hostname of the service that is requesting to be crawled.',\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncSubscribeRepos: {\n    lexicon: 1,\n    id: 'com.atproto.sync.subscribeRepos',\n    defs: {\n      main: {\n        type: 'subscription',\n        description: 'Subscribe to repo updates',\n        parameters: {\n          type: 'params',\n          properties: {\n            cursor: {\n              type: 'integer',\n              description: 'The last known event to backfill from.',\n            },\n          },\n        },\n        message: {\n          schema: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.sync.subscribeRepos#commit',\n              'lex:com.atproto.sync.subscribeRepos#handle',\n              'lex:com.atproto.sync.subscribeRepos#migrate',\n              'lex:com.atproto.sync.subscribeRepos#tombstone',\n              'lex:com.atproto.sync.subscribeRepos#info',\n            ],\n          },\n        },\n        errors: [\n          {\n            name: 'FutureCursor',\n          },\n        ],\n      },\n      commit: {\n        type: 'object',\n        required: [\n          'seq',\n          'rebase',\n          'tooBig',\n          'repo',\n          'commit',\n          'prev',\n          'blocks',\n          'ops',\n          'blobs',\n          'time',\n        ],\n        nullable: ['prev'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          rebase: {\n            type: 'boolean',\n          },\n          tooBig: {\n            type: 'boolean',\n          },\n          repo: {\n            type: 'string',\n            format: 'did',\n          },\n          commit: {\n            type: 'cid-link',\n          },\n          prev: {\n            type: 'cid-link',\n          },\n          blocks: {\n            type: 'bytes',\n            description: 'CAR file containing relevant blocks',\n            maxLength: 1000000,\n          },\n          ops: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.sync.subscribeRepos#repoOp',\n            },\n            maxLength: 200,\n          },\n          blobs: {\n            type: 'array',\n            items: {\n              type: 'cid-link',\n            },\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      handle: {\n        type: 'object',\n        required: ['seq', 'did', 'handle', 'time'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      migrate: {\n        type: 'object',\n        required: ['seq', 'did', 'migrateTo', 'time'],\n        nullable: ['migrateTo'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          migrateTo: {\n            type: 'string',\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      tombstone: {\n        type: 'object',\n        required: ['seq', 'did', 'time'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      info: {\n        type: 'object',\n        required: ['name'],\n        properties: {\n          name: {\n            type: 'string',\n            knownValues: ['OutdatedCursor'],\n          },\n          message: {\n            type: 'string',\n          },\n        },\n      },\n      repoOp: {\n        type: 'object',\n        required: ['action', 'path', 'cid'],\n        nullable: ['cid'],\n        properties: {\n          action: {\n            type: 'string',\n            knownValues: ['create', 'update', 'delete'],\n          },\n          path: {\n            type: 'string',\n          },\n          cid: {\n            type: 'cid-link',\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorDefs: {\n    lexicon: 1,\n    id: 'app.bsky.actor.defs',\n    description: 'A reference to an actor in the network.',\n    defs: {\n      profileViewBasic: {\n        type: 'object',\n        required: ['did', 'handle'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          displayName: {\n            type: 'string',\n            maxGraphemes: 64,\n            maxLength: 640,\n          },\n          avatar: {\n            type: 'string',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      profileView: {\n        type: 'object',\n        required: ['did', 'handle'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          displayName: {\n            type: 'string',\n            maxGraphemes: 64,\n            maxLength: 640,\n          },\n          description: {\n            type: 'string',\n            maxGraphemes: 256,\n            maxLength: 2560,\n          },\n          avatar: {\n            type: 'string',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      profileViewDetailed: {\n        type: 'object',\n        required: ['did', 'handle'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          displayName: {\n            type: 'string',\n            maxGraphemes: 64,\n            maxLength: 640,\n          },\n          description: {\n            type: 'string',\n            maxGraphemes: 256,\n            maxLength: 2560,\n          },\n          avatar: {\n            type: 'string',\n          },\n          banner: {\n            type: 'string',\n          },\n          followersCount: {\n            type: 'integer',\n          },\n          followsCount: {\n            type: 'integer',\n          },\n          postsCount: {\n            type: 'integer',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      viewerState: {\n        type: 'object',\n        properties: {\n          muted: {\n            type: 'boolean',\n          },\n          following: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          followedBy: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetProfile: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getProfile',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewDetailed',\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetProfiles: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getProfiles',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          required: ['actors'],\n          properties: {\n            actors: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n              maxLength: 25,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['profiles'],\n            properties: {\n              profiles: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileViewDetailed',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetSuggestions: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getSuggestions',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get a list of actors suggested for following. Used in discovery UIs.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorProfile: {\n    lexicon: 1,\n    id: 'app.bsky.actor.profile',\n    defs: {\n      main: {\n        type: 'record',\n        key: 'literal:self',\n        record: {\n          type: 'object',\n          properties: {\n            displayName: {\n              type: 'string',\n              maxGraphemes: 64,\n              maxLength: 640,\n            },\n            description: {\n              type: 'string',\n              maxGraphemes: 256,\n              maxLength: 2560,\n            },\n            avatar: {\n              type: 'blob',\n              accept: ['image/png', 'image/jpeg'],\n              maxSize: 1000000,\n            },\n            banner: {\n              type: 'blob',\n              accept: ['image/png', 'image/jpeg'],\n              maxSize: 1000000,\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorSearchActors: {\n    lexicon: 1,\n    id: 'app.bsky.actor.searchActors',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find actors matching search criteria.',\n        parameters: {\n          type: 'params',\n          properties: {\n            term: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorSearchActorsTypeahead: {\n    lexicon: 1,\n    id: 'app.bsky.actor.searchActorsTypeahead',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find actor suggestions for a search term.',\n        parameters: {\n          type: 'params',\n          properties: {\n            term: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedExternal: {\n    lexicon: 1,\n    id: 'app.bsky.embed.external',\n    description:\n      'A representation of some externally linked content, embedded in another form of content',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['external'],\n        properties: {\n          external: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.external#external',\n          },\n        },\n      },\n      external: {\n        type: 'object',\n        required: ['uri', 'title', 'description'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'uri',\n          },\n          title: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n          },\n          thumb: {\n            type: 'blob',\n            accept: ['image/*'],\n            maxSize: 1000000,\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['external'],\n        properties: {\n          external: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.external#viewExternal',\n          },\n        },\n      },\n      viewExternal: {\n        type: 'object',\n        required: ['uri', 'title', 'description'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'uri',\n          },\n          title: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n          },\n          thumb: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedImages: {\n    lexicon: 1,\n    id: 'app.bsky.embed.images',\n    description: 'A set of images embedded in some other form of content',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['images'],\n        properties: {\n          images: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.embed.images#image',\n            },\n            maxLength: 4,\n          },\n        },\n      },\n      image: {\n        type: 'object',\n        required: ['image', 'alt'],\n        properties: {\n          image: {\n            type: 'blob',\n            accept: ['image/*'],\n            maxSize: 1000000,\n          },\n          alt: {\n            type: 'string',\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['images'],\n        properties: {\n          images: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.embed.images#viewImage',\n            },\n            maxLength: 4,\n          },\n        },\n      },\n      viewImage: {\n        type: 'object',\n        required: ['thumb', 'fullsize', 'alt'],\n        properties: {\n          thumb: {\n            type: 'string',\n          },\n          fullsize: {\n            type: 'string',\n          },\n          alt: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedRecord: {\n    lexicon: 1,\n    id: 'app.bsky.embed.record',\n    description:\n      'A representation of a record embedded in another form of content',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['record'],\n        properties: {\n          record: {\n            type: 'ref',\n            ref: 'lex:com.atproto.repo.strongRef',\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['record'],\n        properties: {\n          record: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.embed.record#viewRecord',\n              'lex:app.bsky.embed.record#viewNotFound',\n            ],\n          },\n        },\n      },\n      viewRecord: {\n        type: 'object',\n        required: ['uri', 'cid', 'author', 'value', 'indexedAt'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n          },\n          value: {\n            type: 'unknown',\n          },\n          embeds: {\n            type: 'array',\n            items: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.embed.images#view',\n                'lex:app.bsky.embed.external#view',\n                'lex:app.bsky.embed.record#view',\n                'lex:app.bsky.embed.recordWithMedia#view',\n              ],\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      viewNotFound: {\n        type: 'object',\n        required: ['uri'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedRecordWithMedia: {\n    lexicon: 1,\n    id: 'app.bsky.embed.recordWithMedia',\n    description:\n      'A representation of a record embedded in another form of content, alongside other compatible embeds',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['record', 'media'],\n        properties: {\n          record: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.record',\n          },\n          media: {\n            type: 'union',\n            refs: ['lex:app.bsky.embed.images', 'lex:app.bsky.embed.external'],\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['record', 'media'],\n        properties: {\n          record: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.record#view',\n          },\n          media: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.embed.images#view',\n              'lex:app.bsky.embed.external#view',\n            ],\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedDefs: {\n    lexicon: 1,\n    id: 'app.bsky.feed.defs',\n    defs: {\n      postView: {\n        type: 'object',\n        required: ['uri', 'cid', 'author', 'record', 'indexedAt'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n          },\n          record: {\n            type: 'unknown',\n          },\n          embed: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.embed.images#view',\n              'lex:app.bsky.embed.external#view',\n              'lex:app.bsky.embed.record#view',\n              'lex:app.bsky.embed.recordWithMedia#view',\n            ],\n          },\n          replyCount: {\n            type: 'integer',\n          },\n          repostCount: {\n            type: 'integer',\n          },\n          likeCount: {\n            type: 'integer',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      viewerState: {\n        type: 'object',\n        properties: {\n          repost: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          like: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      feedViewPost: {\n        type: 'object',\n        required: ['post'],\n        properties: {\n          post: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#postView',\n          },\n          reply: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#replyRef',\n          },\n          reason: {\n            type: 'union',\n            refs: ['lex:app.bsky.feed.defs#reasonRepost'],\n          },\n        },\n      },\n      replyRef: {\n        type: 'object',\n        required: ['root', 'parent'],\n        properties: {\n          root: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#postView',\n          },\n          parent: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#postView',\n          },\n        },\n      },\n      reasonRepost: {\n        type: 'object',\n        required: ['by', 'indexedAt'],\n        properties: {\n          by: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      threadViewPost: {\n        type: 'object',\n        required: ['post'],\n        properties: {\n          post: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#postView',\n          },\n          parent: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.feed.defs#threadViewPost',\n              'lex:app.bsky.feed.defs#notFoundPost',\n            ],\n          },\n          replies: {\n            type: 'array',\n            items: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.feed.defs#threadViewPost',\n                'lex:app.bsky.feed.defs#notFoundPost',\n              ],\n            },\n          },\n        },\n      },\n      notFoundPost: {\n        type: 'object',\n        required: ['uri', 'notFound'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          notFound: {\n            type: 'boolean',\n            const: true,\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetAuthorFeed: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getAuthorFeed',\n    defs: {\n      main: {\n        type: 'query',\n        description: \"A view of an actor's feed.\",\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetLikes: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getLikes',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'likes'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              cursor: {\n                type: 'string',\n              },\n              likes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.getLikes#like',\n                },\n              },\n            },\n          },\n        },\n      },\n      like: {\n        type: 'object',\n        required: ['indexedAt', 'createdAt', 'actor'],\n        properties: {\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          actor: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetPostThread: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getPostThread',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            depth: {\n              type: 'integer',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['thread'],\n            properties: {\n              thread: {\n                type: 'union',\n                refs: [\n                  'lex:app.bsky.feed.defs#threadViewPost',\n                  'lex:app.bsky.feed.defs#notFoundPost',\n                ],\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'NotFound',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetRepostedBy: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getRepostedBy',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'repostedBy'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              cursor: {\n                type: 'string',\n              },\n              repostedBy: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetTimeline: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getTimeline',\n    defs: {\n      main: {\n        type: 'query',\n        description: \"A view of the user's home timeline.\",\n        parameters: {\n          type: 'params',\n          properties: {\n            algorithm: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedLike: {\n    lexicon: 1,\n    id: 'app.bsky.feed.like',\n    defs: {\n      main: {\n        type: 'record',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'ref',\n              ref: 'lex:com.atproto.repo.strongRef',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedPost: {\n    lexicon: 1,\n    id: 'app.bsky.feed.post',\n    defs: {\n      main: {\n        type: 'record',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['text', 'createdAt'],\n          properties: {\n            text: {\n              type: 'string',\n              maxLength: 3000,\n              maxGraphemes: 300,\n            },\n            entities: {\n              type: 'array',\n              description: 'Deprecated: replaced by app.bsky.richtext.facet.',\n              items: {\n                type: 'ref',\n                ref: 'lex:app.bsky.feed.post#entity',\n              },\n            },\n            facets: {\n              type: 'array',\n              items: {\n                type: 'ref',\n                ref: 'lex:app.bsky.richtext.facet',\n              },\n            },\n            reply: {\n              type: 'ref',\n              ref: 'lex:app.bsky.feed.post#replyRef',\n            },\n            embed: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.embed.images',\n                'lex:app.bsky.embed.external',\n                'lex:app.bsky.embed.record',\n                'lex:app.bsky.embed.recordWithMedia',\n              ],\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n      replyRef: {\n        type: 'object',\n        required: ['root', 'parent'],\n        properties: {\n          root: {\n            type: 'ref',\n            ref: 'lex:com.atproto.repo.strongRef',\n          },\n          parent: {\n            type: 'ref',\n            ref: 'lex:com.atproto.repo.strongRef',\n          },\n        },\n      },\n      entity: {\n        type: 'object',\n        description: 'Deprecated: use facets instead.',\n        required: ['index', 'type', 'value'],\n        properties: {\n          index: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.post#textSlice',\n          },\n          type: {\n            type: 'string',\n            description: \"Expected values are 'mention' and 'link'.\",\n          },\n          value: {\n            type: 'string',\n          },\n        },\n      },\n      textSlice: {\n        type: 'object',\n        description:\n          'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',\n        required: ['start', 'end'],\n        properties: {\n          start: {\n            type: 'integer',\n            minimum: 0,\n          },\n          end: {\n            type: 'integer',\n            minimum: 0,\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedRepost: {\n    lexicon: 1,\n    id: 'app.bsky.feed.repost',\n    defs: {\n      main: {\n        type: 'record',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'ref',\n              ref: 'lex:com.atproto.repo.strongRef',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphFollow: {\n    lexicon: 1,\n    id: 'app.bsky.graph.follow',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A social follow.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'string',\n              format: 'did',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetFollowers: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getFollowers',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Who is following an actor?',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject', 'followers'],\n            properties: {\n              subject: {\n                type: 'ref',\n                ref: 'lex:app.bsky.actor.defs#profileView',\n              },\n              cursor: {\n                type: 'string',\n              },\n              followers: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetFollows: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getFollows',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Who is an actor following?',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject', 'follows'],\n            properties: {\n              subject: {\n                type: 'ref',\n                ref: 'lex:app.bsky.actor.defs#profileView',\n              },\n              cursor: {\n                type: 'string',\n              },\n              follows: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetMutes: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getMutes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Who does the viewer mute?',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['mutes'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              mutes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphMuteActor: {\n    lexicon: 1,\n    id: 'app.bsky.graph.muteActor',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Mute an actor by did or handle.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actor'],\n            properties: {\n              actor: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphUnmuteActor: {\n    lexicon: 1,\n    id: 'app.bsky.graph.unmuteActor',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Unmute an actor by did or handle.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actor'],\n            properties: {\n              actor: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationGetUnreadCount: {\n    lexicon: 1,\n    id: 'app.bsky.notification.getUnreadCount',\n    defs: {\n      main: {\n        type: 'query',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['count'],\n            properties: {\n              count: {\n                type: 'integer',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationListNotifications: {\n    lexicon: 1,\n    id: 'app.bsky.notification.listNotifications',\n    defs: {\n      main: {\n        type: 'query',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['notifications'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              notifications: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.notification.listNotifications#notification',\n                },\n              },\n            },\n          },\n        },\n      },\n      notification: {\n        type: 'object',\n        required: [\n          'uri',\n          'cid',\n          'author',\n          'reason',\n          'record',\n          'isRead',\n          'indexedAt',\n        ],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n          reason: {\n            type: 'string',\n            description:\n              \"Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.\",\n            knownValues: [\n              'like',\n              'repost',\n              'follow',\n              'mention',\n              'reply',\n              'quote',\n            ],\n          },\n          reasonSubject: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          record: {\n            type: 'unknown',\n          },\n          isRead: {\n            type: 'boolean',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationUpdateSeen: {\n    lexicon: 1,\n    id: 'app.bsky.notification.updateSeen',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Notify server that the user has seen notifications.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['seenAt'],\n            properties: {\n              seenAt: {\n                type: 'string',\n                format: 'datetime',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyRichtextFacet: {\n    lexicon: 1,\n    id: 'app.bsky.richtext.facet',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['index', 'features'],\n        properties: {\n          index: {\n            type: 'ref',\n            ref: 'lex:app.bsky.richtext.facet#byteSlice',\n          },\n          features: {\n            type: 'array',\n            items: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.richtext.facet#mention',\n                'lex:app.bsky.richtext.facet#link',\n              ],\n            },\n          },\n        },\n      },\n      mention: {\n        type: 'object',\n        description: 'A facet feature for actor mentions.',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n        },\n      },\n      link: {\n        type: 'object',\n        description: 'A facet feature for links.',\n        required: ['uri'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'uri',\n          },\n        },\n      },\n      byteSlice: {\n        type: 'object',\n        description:\n          'A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.',\n        required: ['byteStart', 'byteEnd'],\n        properties: {\n          byteStart: {\n            type: 'integer',\n            minimum: 0,\n          },\n          byteEnd: {\n            type: 'integer',\n            minimum: 0,\n          },\n        },\n      },\n    },\n  },\n  AppBskyUnspeccedGetPopular: {\n    lexicon: 1,\n    id: 'app.bsky.unspecced.getPopular',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'An unspecced view of globally popular items',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n}\nexport const schemas: LexiconDoc[] = Object.values(schemaDict) as LexiconDoc[]\nexport const lexicons: Lexicons = new Lexicons(schemas)\nexport const ids = {\n  ComAtprotoAdminDefs: 'com.atproto.admin.defs',\n  ComAtprotoAdminDisableInviteCodes: 'com.atproto.admin.disableInviteCodes',\n  ComAtprotoAdminGetInviteCodes: 'com.atproto.admin.getInviteCodes',\n  ComAtprotoAdminGetModerationAction: 'com.atproto.admin.getModerationAction',\n  ComAtprotoAdminGetModerationActions: 'com.atproto.admin.getModerationActions',\n  ComAtprotoAdminGetModerationReport: 'com.atproto.admin.getModerationReport',\n  ComAtprotoAdminGetModerationReports: 'com.atproto.admin.getModerationReports',\n  ComAtprotoAdminGetRecord: 'com.atproto.admin.getRecord',\n  ComAtprotoAdminGetRepo: 'com.atproto.admin.getRepo',\n  ComAtprotoAdminResolveModerationReports:\n    'com.atproto.admin.resolveModerationReports',\n  ComAtprotoAdminReverseModerationAction:\n    'com.atproto.admin.reverseModerationAction',\n  ComAtprotoAdminSearchRepos: 'com.atproto.admin.searchRepos',\n  ComAtprotoAdminTakeModerationAction: 'com.atproto.admin.takeModerationAction',\n  ComAtprotoAdminUpdateAccountHandle: 'com.atproto.admin.updateAccountHandle',\n  ComAtprotoIdentityResolveHandle: 'com.atproto.identity.resolveHandle',\n  ComAtprotoIdentityUpdateHandle: 'com.atproto.identity.updateHandle',\n  ComAtprotoLabelDefs: 'com.atproto.label.defs',\n  ComAtprotoLabelQueryLabels: 'com.atproto.label.queryLabels',\n  ComAtprotoLabelSubscribeLabels: 'com.atproto.label.subscribeLabels',\n  ComAtprotoModerationCreateReport: 'com.atproto.moderation.createReport',\n  ComAtprotoModerationDefs: 'com.atproto.moderation.defs',\n  ComAtprotoRepoApplyWrites: 'com.atproto.repo.applyWrites',\n  ComAtprotoRepoCreateRecord: 'com.atproto.repo.createRecord',\n  ComAtprotoRepoDeleteRecord: 'com.atproto.repo.deleteRecord',\n  ComAtprotoRepoDescribeRepo: 'com.atproto.repo.describeRepo',\n  ComAtprotoRepoGetRecord: 'com.atproto.repo.getRecord',\n  ComAtprotoRepoListRecords: 'com.atproto.repo.listRecords',\n  ComAtprotoRepoPutRecord: 'com.atproto.repo.putRecord',\n  ComAtprotoRepoStrongRef: 'com.atproto.repo.strongRef',\n  ComAtprotoRepoUploadBlob: 'com.atproto.repo.uploadBlob',\n  ComAtprotoServerCreateAccount: 'com.atproto.server.createAccount',\n  ComAtprotoServerCreateInviteCode: 'com.atproto.server.createInviteCode',\n  ComAtprotoServerCreateInviteCodes: 'com.atproto.server.createInviteCodes',\n  ComAtprotoServerCreateSession: 'com.atproto.server.createSession',\n  ComAtprotoServerDefs: 'com.atproto.server.defs',\n  ComAtprotoServerDeleteAccount: 'com.atproto.server.deleteAccount',\n  ComAtprotoServerDeleteSession: 'com.atproto.server.deleteSession',\n  ComAtprotoServerDescribeServer: 'com.atproto.server.describeServer',\n  ComAtprotoServerGetAccountInviteCodes:\n    'com.atproto.server.getAccountInviteCodes',\n  ComAtprotoServerGetSession: 'com.atproto.server.getSession',\n  ComAtprotoServerRefreshSession: 'com.atproto.server.refreshSession',\n  ComAtprotoServerRequestAccountDelete:\n    'com.atproto.server.requestAccountDelete',\n  ComAtprotoServerRequestPasswordReset:\n    'com.atproto.server.requestPasswordReset',\n  ComAtprotoServerResetPassword: 'com.atproto.server.resetPassword',\n  ComAtprotoSyncGetBlob: 'com.atproto.sync.getBlob',\n  ComAtprotoSyncGetBlocks: 'com.atproto.sync.getBlocks',\n  ComAtprotoSyncGetCheckout: 'com.atproto.sync.getCheckout',\n  ComAtprotoSyncGetCommitPath: 'com.atproto.sync.getCommitPath',\n  ComAtprotoSyncGetHead: 'com.atproto.sync.getHead',\n  ComAtprotoSyncGetRecord: 'com.atproto.sync.getRecord',\n  ComAtprotoSyncGetRepo: 'com.atproto.sync.getRepo',\n  ComAtprotoSyncListBlobs: 'com.atproto.sync.listBlobs',\n  ComAtprotoSyncListRepos: 'com.atproto.sync.listRepos',\n  ComAtprotoSyncNotifyOfUpdate: 'com.atproto.sync.notifyOfUpdate',\n  ComAtprotoSyncRequestCrawl: 'com.atproto.sync.requestCrawl',\n  ComAtprotoSyncSubscribeRepos: 'com.atproto.sync.subscribeRepos',\n  AppBskyActorDefs: 'app.bsky.actor.defs',\n  AppBskyActorGetProfile: 'app.bsky.actor.getProfile',\n  AppBskyActorGetProfiles: 'app.bsky.actor.getProfiles',\n  AppBskyActorGetSuggestions: 'app.bsky.actor.getSuggestions',\n  AppBskyActorProfile: 'app.bsky.actor.profile',\n  AppBskyActorSearchActors: 'app.bsky.actor.searchActors',\n  AppBskyActorSearchActorsTypeahead: 'app.bsky.actor.searchActorsTypeahead',\n  AppBskyEmbedExternal: 'app.bsky.embed.external',\n  AppBskyEmbedImages: 'app.bsky.embed.images',\n  AppBskyEmbedRecord: 'app.bsky.embed.record',\n  AppBskyEmbedRecordWithMedia: 'app.bsky.embed.recordWithMedia',\n  AppBskyFeedDefs: 'app.bsky.feed.defs',\n  AppBskyFeedGetAuthorFeed: 'app.bsky.feed.getAuthorFeed',\n  AppBskyFeedGetLikes: 'app.bsky.feed.getLikes',\n  AppBskyFeedGetPostThread: 'app.bsky.feed.getPostThread',\n  AppBskyFeedGetRepostedBy: 'app.bsky.feed.getRepostedBy',\n  AppBskyFeedGetTimeline: 'app.bsky.feed.getTimeline',\n  AppBskyFeedLike: 'app.bsky.feed.like',\n  AppBskyFeedPost: 'app.bsky.feed.post',\n  AppBskyFeedRepost: 'app.bsky.feed.repost',\n  AppBskyGraphFollow: 'app.bsky.graph.follow',\n  AppBskyGraphGetFollowers: 'app.bsky.graph.getFollowers',\n  AppBskyGraphGetFollows: 'app.bsky.graph.getFollows',\n  AppBskyGraphGetMutes: 'app.bsky.graph.getMutes',\n  AppBskyGraphMuteActor: 'app.bsky.graph.muteActor',\n  AppBskyGraphUnmuteActor: 'app.bsky.graph.unmuteActor',\n  AppBskyNotificationGetUnreadCount: 'app.bsky.notification.getUnreadCount',\n  AppBskyNotificationListNotifications:\n    'app.bsky.notification.listNotifications',\n  AppBskyNotificationUpdateSeen: 'app.bsky.notification.updateSeen',\n  AppBskyRichtextFacet: 'app.bsky.richtext.facet',\n  AppBskyUnspeccedGetPopular: 'app.bsky.unspecced.getPopular',\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  codes?: string[]\n  accounts?: string[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoServerDefs from '../server/defs'\n\nexport interface QueryParams {\n  sort?: 'recent' | 'usage' | (string & {})\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  codes: ComAtprotoServerDefs.InviteCode[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  id: number\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.ActionViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  subject?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  actions: ComAtprotoAdminDefs.ActionView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  id: number\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.ReportViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  subject?: string\n  resolved?: boolean\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  reports: ComAtprotoAdminDefs.ReportView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  uri: string\n  cid?: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.RecordViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  did: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.RepoViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  actionId: number\n  reportIds: number[]\n  createdBy: string\n  [k: string]: unknown\n}\n\nexport type OutputSchema = ComAtprotoAdminDefs.ActionView\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  id: number\n  reason: string\n  createdBy: string\n  [k: string]: unknown\n}\n\nexport type OutputSchema = ComAtprotoAdminDefs.ActionView\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  term?: string\n  invitedBy?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  repos: ComAtprotoAdminDefs.RepoView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  action:\n    | 'com.atproto.admin.defs#takedown'\n    | 'com.atproto.admin.defs#flag'\n    | 'com.atproto.admin.defs#acknowledge'\n    | (string & {})\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  subjectBlobCids?: string[]\n  createLabelVals?: string[]\n  negateLabelVals?: string[]\n  reason: string\n  createdBy: string\n  [k: string]: unknown\n}\n\nexport type OutputSchema = ComAtprotoAdminDefs.ActionView\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class SubjectHasActionError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  did: string\n  handle: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle to resolve. If not supplied, will resolve the host's own handle. */\n  handle?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  did: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  handle: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from './defs'\n\nexport interface QueryParams {\n  /** List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI */\n  uriPatterns: string[]\n  /** Optional list of label sources (DIDs) to filter on */\n  sources?: string[]\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  labels: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoModerationDefs from './defs'\nimport * as ComAtprotoAdminDefs from '../admin/defs'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  reportedBy: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** Validate the records? */\n  validate?: boolean\n  writes: (Create | Update | Delete)[]\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n\n/** Create a new record. */\nexport interface Create {\n  collection: string\n  rkey?: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport function isCreate(v: unknown): v is Create {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.applyWrites#create'\n  )\n}\n\nexport function validateCreate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.applyWrites#create', v)\n}\n\n/** Update an existing record. */\nexport interface Update {\n  collection: string\n  rkey: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport function isUpdate(v: unknown): v is Update {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.applyWrites#update'\n  )\n}\n\nexport function validateUpdate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.applyWrites#update', v)\n}\n\n/** Delete an existing record. */\nexport interface Delete {\n  collection: string\n  rkey: string\n  [k: string]: unknown\n}\n\nexport function isDelete(v: unknown): v is Delete {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.applyWrites#delete'\n  )\n}\n\nexport function validateDelete(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.applyWrites#delete', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nexport function isObj(v: unknown): v is Record<string, unknown> {\n  return typeof v === 'object' && v !== null\n}\n\nexport function hasProp<K extends PropertyKey>(\n  data: object,\n  prop: K,\n): data is Record<K, unknown> {\n  return prop in data\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey?: string\n  /** Validate the record? */\n  validate?: boolean\n  /** The record to create. */\n  record: {}\n  /** Compare and swap with the previous commit by cid. */\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  uri: string\n  cid: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey: string\n  /** Compare and swap with the previous record by cid. */\n  swapRecord?: string\n  /** Compare and swap with the previous commit by cid. */\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle or DID of the repo. */\n  repo: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  handle: string\n  did: string\n  didDoc: {}\n  collections: string[]\n  handleIsCorrect: boolean\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey: string\n  /** The CID of the version of the record. If not specified, then return the most recent version. */\n  cid?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  uri: string\n  cid?: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record type. */\n  collection: string\n  /** The number of records to return. */\n  limit?: number\n  cursor?: string\n  /** DEPRECATED: The lowest sort-ordered rkey to start from (exclusive) */\n  rkeyStart?: string\n  /** DEPRECATED: The highest sort-ordered rkey to stop at (exclusive) */\n  rkeyEnd?: string\n  /** Reverse the order of the returned records? */\n  reverse?: boolean\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  records: Record[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Record {\n  uri: string\n  cid: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.listRecords#record'\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.listRecords#record', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey: string\n  /** Validate the record? */\n  validate?: boolean\n  /** The record to write. */\n  record: {}\n  /** Compare and swap with the previous record by cid. */\n  swapRecord?: string | null\n  /** Compare and swap with the previous commit by cid. */\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  uri: string\n  cid: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = string | Uint8Array\n\nexport interface OutputSchema {\n  blob: BlobRef\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: string\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  email: string\n  handle: string\n  inviteCode?: string\n  password: string\n  recoveryKey?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidHandleError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport class InvalidPasswordError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport class InvalidInviteCodeError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport class HandleNotAvailableError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport class UnsupportedDomainError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidHandle') return new InvalidHandleError(e)\n    if (e.error === 'InvalidPassword') return new InvalidPasswordError(e)\n    if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e)\n    if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e)\n    if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  useCount: number\n  forAccount?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  code: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  codeCount: number\n  useCount: number\n  forAccount?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  codes: string[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** Handle or other identifier supported by the server for the authenticating user. */\n  identifier: string\n  password: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  email?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  did: string\n  password: string\n  token: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class ExpiredTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport class InvalidTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)\n    if (e.error === 'InvalidToken') return new InvalidTokenError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  inviteCodeRequired?: boolean\n  availableUserDomains: string[]\n  links?: Links\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Links {\n  privacyPolicy?: string\n  termsOfService?: string\n  [k: string]: unknown\n}\n\nexport function isLinks(v: unknown): v is Links {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.describeServer#links'\n  )\n}\n\nexport function validateLinks(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.describeServer#links', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoServerDefs from './defs'\n\nexport interface QueryParams {\n  includeUsed?: boolean\n  createAvailable?: boolean\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  codes: ComAtprotoServerDefs.InviteCode[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class DuplicateCreateError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  handle: string\n  did: string\n  email?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  email: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  token: string\n  password: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class ExpiredTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport class InvalidTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)\n    if (e.error === 'InvalidToken') return new InvalidTokenError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The CID of the blob to fetch */\n  cid: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  cids: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The commit to get the checkout from. Defaults to current HEAD. */\n  commit?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The most recent commit */\n  latest?: string\n  /** The earliest commit to start from */\n  earliest?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  commits: string[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  root: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  collection: string\n  rkey: string\n  /** An optional past commit CID. */\n  commit?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The earliest commit in the commit range (not inclusive) */\n  earliest?: string\n  /** The latest commit you in the commit range (inclusive */\n  latest?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The most recent commit */\n  latest?: string\n  /** The earliest commit to start from */\n  earliest?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cids: string[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  repos: Repo[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Repo {\n  did: string\n  head: string\n  [k: string]: unknown\n}\n\nexport function isRepo(v: unknown): v is Repo {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.listRepos#repo'\n  )\n}\n\nexport function validateRepo(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.listRepos#repo', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** Hostname of the service that is notifying of update. */\n  hostname: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** Hostname of the service that is requesting to be crawled. */\n  hostname: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = AppBskyActorDefs.ProfileViewDetailed\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  actors: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  profiles: AppBskyActorDefs.ProfileViewDetailed[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  actors: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  term?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  actors: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  term?: string\n  limit?: number\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  actors: AppBskyActorDefs.ProfileViewBasic[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  uri: string\n  cid?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  uri: string\n  cid?: string\n  cursor?: string\n  likes: Like[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Like {\n  indexedAt: string\n  createdAt: string\n  actor: AppBskyActorDefs.ProfileView\n  [k: string]: unknown\n}\n\nexport function isLike(v: unknown): v is Like {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.getLikes#like'\n  )\n}\n\nexport function validateLike(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.getLikes#like', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  uri: string\n  depth?: number\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  thread:\n    | AppBskyFeedDefs.ThreadViewPost\n    | AppBskyFeedDefs.NotFoundPost\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class NotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'NotFound') return new NotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  uri: string\n  cid?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  uri: string\n  cid?: string\n  cursor?: string\n  repostedBy: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  algorithm?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  subject: AppBskyActorDefs.ProfileView\n  cursor?: string\n  followers: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  subject: AppBskyActorDefs.ProfileView\n  cursor?: string\n  follows: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  mutes: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  actor: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  actor: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  count: number\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  notifications: Notification[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Notification {\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileView\n  /** Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'. */\n  reason:\n    | 'like'\n    | 'repost'\n    | 'follow'\n    | 'mention'\n    | 'reply'\n    | 'quote'\n    | (string & {})\n  reasonSubject?: string\n  record: {}\n  isRead: boolean\n  indexedAt: string\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isNotification(v: unknown): v is Notification {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.notification.listNotifications#notification'\n  )\n}\n\nexport function validateNotification(v: unknown): ValidationResult {\n  return lexicons.validate(\n    'app.bsky.notification.listNotifications#notification',\n    v,\n  )\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  seenAt: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from '../feed/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\nimport * as ComAtprotoModerationDefs from '../moderation/defs'\nimport * as ComAtprotoServerDefs from '../server/defs'\n\nexport interface ActionView {\n  id: number\n  action: ActionType\n  subject:\n    | RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  subjectBlobCids: string[]\n  createLabelVals?: string[]\n  negateLabelVals?: string[]\n  reason: string\n  createdBy: string\n  createdAt: string\n  reversal?: ActionReversal\n  resolvedReportIds: number[]\n  [k: string]: unknown\n}\n\nexport function isActionView(v: unknown): v is ActionView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#actionView'\n  )\n}\n\nexport function validateActionView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#actionView', v)\n}\n\nexport interface ActionViewDetail {\n  id: number\n  action: ActionType\n  subject: RepoView | RecordView | { $type: string; [k: string]: unknown }\n  subjectBlobs: BlobView[]\n  createLabelVals?: string[]\n  negateLabelVals?: string[]\n  reason: string\n  createdBy: string\n  createdAt: string\n  reversal?: ActionReversal\n  resolvedReports: ReportView[]\n  [k: string]: unknown\n}\n\nexport function isActionViewDetail(v: unknown): v is ActionViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#actionViewDetail'\n  )\n}\n\nexport function validateActionViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#actionViewDetail', v)\n}\n\nexport interface ActionViewCurrent {\n  id: number\n  action: ActionType\n  [k: string]: unknown\n}\n\nexport function isActionViewCurrent(v: unknown): v is ActionViewCurrent {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#actionViewCurrent'\n  )\n}\n\nexport function validateActionViewCurrent(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#actionViewCurrent', v)\n}\n\nexport interface ActionReversal {\n  reason: string\n  createdBy: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isActionReversal(v: unknown): v is ActionReversal {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#actionReversal'\n  )\n}\n\nexport function validateActionReversal(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#actionReversal', v)\n}\n\nexport type ActionType =\n  | 'lex:com.atproto.admin.defs#takedown'\n  | 'lex:com.atproto.admin.defs#flag'\n  | 'lex:com.atproto.admin.defs#acknowledge'\n  | (string & {})\n\n/** Moderation action type: Takedown. Indicates that content should not be served by the PDS. */\nexport const TAKEDOWN = 'com.atproto.admin.defs#takedown'\n/** Moderation action type: Flag. Indicates that the content was reviewed and considered to violate PDS rules, but may still be served. */\nexport const FLAG = 'com.atproto.admin.defs#flag'\n/** Moderation action type: Acknowledge. Indicates that the content was reviewed and not considered to violate PDS rules. */\nexport const ACKNOWLEDGE = 'com.atproto.admin.defs#acknowledge'\n\nexport interface ReportView {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject:\n    | RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  reportedBy: string\n  createdAt: string\n  resolvedByActionIds: number[]\n  [k: string]: unknown\n}\n\nexport function isReportView(v: unknown): v is ReportView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#reportView'\n  )\n}\n\nexport function validateReportView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#reportView', v)\n}\n\nexport interface ReportViewDetail {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject: RepoView | RecordView | { $type: string; [k: string]: unknown }\n  reportedBy: string\n  createdAt: string\n  resolvedByActions: ActionView[]\n  [k: string]: unknown\n}\n\nexport function isReportViewDetail(v: unknown): v is ReportViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#reportViewDetail'\n  )\n}\n\nexport function validateReportViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#reportViewDetail', v)\n}\n\nexport interface RepoView {\n  did: string\n  handle: string\n  email?: string\n  relatedRecords: {}[]\n  indexedAt: string\n  moderation: Moderation\n  invitedBy?: ComAtprotoServerDefs.InviteCode\n  [k: string]: unknown\n}\n\nexport function isRepoView(v: unknown): v is RepoView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoView'\n  )\n}\n\nexport function validateRepoView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoView', v)\n}\n\nexport interface RepoViewDetail {\n  did: string\n  handle: string\n  email?: string\n  relatedRecords: {}[]\n  indexedAt: string\n  moderation: ModerationDetail\n  invitedBy?: ComAtprotoServerDefs.InviteCode\n  invites?: ComAtprotoServerDefs.InviteCode[]\n  [k: string]: unknown\n}\n\nexport function isRepoViewDetail(v: unknown): v is RepoViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoViewDetail'\n  )\n}\n\nexport function validateRepoViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoViewDetail', v)\n}\n\nexport interface RepoRef {\n  did: string\n  [k: string]: unknown\n}\n\nexport function isRepoRef(v: unknown): v is RepoRef {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoRef'\n  )\n}\n\nexport function validateRepoRef(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoRef', v)\n}\n\nexport interface RecordView {\n  uri: string\n  cid: string\n  value: {}\n  blobCids: string[]\n  indexedAt: string\n  moderation: Moderation\n  repo: RepoView\n  [k: string]: unknown\n}\n\nexport function isRecordView(v: unknown): v is RecordView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#recordView'\n  )\n}\n\nexport function validateRecordView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#recordView', v)\n}\n\nexport interface RecordViewDetail {\n  uri: string\n  cid: string\n  value: {}\n  blobs: BlobView[]\n  indexedAt: string\n  moderation: ModerationDetail\n  repo: RepoView\n  [k: string]: unknown\n}\n\nexport function isRecordViewDetail(v: unknown): v is RecordViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#recordViewDetail'\n  )\n}\n\nexport function validateRecordViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#recordViewDetail', v)\n}\n\nexport interface Moderation {\n  currentAction?: ActionViewCurrent\n  [k: string]: unknown\n}\n\nexport function isModeration(v: unknown): v is Moderation {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#moderation'\n  )\n}\n\nexport function validateModeration(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#moderation', v)\n}\n\nexport interface ModerationDetail {\n  currentAction?: ActionViewCurrent\n  actions: ActionView[]\n  reports: ReportView[]\n  [k: string]: unknown\n}\n\nexport function isModerationDetail(v: unknown): v is ModerationDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#moderationDetail'\n  )\n}\n\nexport function validateModerationDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#moderationDetail', v)\n}\n\nexport interface BlobView {\n  cid: string\n  mimeType: string\n  size: number\n  createdAt: string\n  details?:\n    | ImageDetails\n    | VideoDetails\n    | { $type: string; [k: string]: unknown }\n  moderation?: Moderation\n  [k: string]: unknown\n}\n\nexport function isBlobView(v: unknown): v is BlobView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#blobView'\n  )\n}\n\nexport function validateBlobView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#blobView', v)\n}\n\nexport interface ImageDetails {\n  width: number\n  height: number\n  [k: string]: unknown\n}\n\nexport function isImageDetails(v: unknown): v is ImageDetails {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#imageDetails'\n  )\n}\n\nexport function validateImageDetails(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#imageDetails', v)\n}\n\nexport interface VideoDetails {\n  width: number\n  height: number\n  length: number\n  [k: string]: unknown\n}\n\nexport function isVideoDetails(v: unknown): v is VideoDetails {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#videoDetails'\n  )\n}\n\nexport function validateVideoDetails(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#videoDetails', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\n/** Metadata tag on an atproto resource (eg, repo or record) */\nexport interface Label {\n  /** DID of the actor who created this label */\n  src: string\n  /** AT URI of the record, repository (account), or other resource which this label applies to */\n  uri: string\n  /** optionally, CID specifying the specific version of 'uri' resource this label applies to */\n  cid?: string\n  /** the short string name of the value or type of this label */\n  val: string\n  /** if true, this is a negation label, overwriting a previous label */\n  neg?: boolean\n  /** timestamp when this label was created */\n  cts: string\n  [k: string]: unknown\n}\n\nexport function isLabel(v: unknown): v is Label {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.defs#label'\n  )\n}\n\nexport function validateLabel(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.defs#label', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from './defs'\n\nexport interface Labels {\n  seq: number\n  labels: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isLabels(v: unknown): v is Labels {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.subscribeLabels#labels'\n  )\n}\n\nexport function validateLabels(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.subscribeLabels#labels', v)\n}\n\nexport interface Info {\n  name: 'OutdatedCursor' | (string & {})\n  message?: string\n  [k: string]: unknown\n}\n\nexport function isInfo(v: unknown): v is Info {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.subscribeLabels#info'\n  )\n}\n\nexport function validateInfo(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.subscribeLabels#info', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport type ReasonType =\n  | 'com.atproto.moderation.defs#reasonSpam'\n  | 'com.atproto.moderation.defs#reasonOther'\n  | (string & {})\n\n/** Moderation report reason: Spam. */\nexport const REASONSPAM = 'com.atproto.moderation.defs#reasonSpam'\n/** Moderation report reason: Other. */\nexport const REASONOTHER = 'com.atproto.moderation.defs#reasonOther'\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  uri: string\n  cid: string\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'com.atproto.repo.strongRef#main' ||\n      v.$type === 'com.atproto.repo.strongRef')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.strongRef#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface InviteCode {\n  code: string\n  available: number\n  disabled: boolean\n  forAccount: string\n  createdBy: string\n  createdAt: string\n  uses: InviteCodeUse[]\n  [k: string]: unknown\n}\n\nexport function isInviteCode(v: unknown): v is InviteCode {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.defs#inviteCode'\n  )\n}\n\nexport function validateInviteCode(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.defs#inviteCode', v)\n}\n\nexport interface InviteCodeUse {\n  usedBy: string\n  usedAt: string\n  [k: string]: unknown\n}\n\nexport function isInviteCodeUse(v: unknown): v is InviteCodeUse {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.defs#inviteCodeUse'\n  )\n}\n\nexport function validateInviteCodeUse(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.defs#inviteCodeUse', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Commit {\n  seq: number\n  rebase: boolean\n  tooBig: boolean\n  repo: string\n  commit: CID\n  prev: CID | null\n  /** CAR file containing relevant blocks */\n  blocks: Uint8Array\n  ops: RepoOp[]\n  blobs: CID[]\n  time: string\n  [k: string]: unknown\n}\n\nexport function isCommit(v: unknown): v is Commit {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#commit'\n  )\n}\n\nexport function validateCommit(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#commit', v)\n}\n\nexport interface Handle {\n  seq: number\n  did: string\n  handle: string\n  time: string\n  [k: string]: unknown\n}\n\nexport function isHandle(v: unknown): v is Handle {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#handle'\n  )\n}\n\nexport function validateHandle(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#handle', v)\n}\n\nexport interface Migrate {\n  seq: number\n  did: string\n  migrateTo: string | null\n  time: string\n  [k: string]: unknown\n}\n\nexport function isMigrate(v: unknown): v is Migrate {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#migrate'\n  )\n}\n\nexport function validateMigrate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#migrate', v)\n}\n\nexport interface Tombstone {\n  seq: number\n  did: string\n  time: string\n  [k: string]: unknown\n}\n\nexport function isTombstone(v: unknown): v is Tombstone {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#tombstone'\n  )\n}\n\nexport function validateTombstone(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#tombstone', v)\n}\n\nexport interface Info {\n  name: 'OutdatedCursor' | (string & {})\n  message?: string\n  [k: string]: unknown\n}\n\nexport function isInfo(v: unknown): v is Info {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#info'\n  )\n}\n\nexport function validateInfo(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#info', v)\n}\n\nexport interface RepoOp {\n  action: 'create' | 'update' | 'delete' | (string & {})\n  path: string\n  cid: CID | null\n  [k: string]: unknown\n}\n\nexport function isRepoOp(v: unknown): v is RepoOp {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#repoOp'\n  )\n}\n\nexport function validateRepoOp(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#repoOp', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface ProfileViewBasic {\n  did: string\n  handle: string\n  displayName?: string\n  avatar?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isProfileViewBasic(v: unknown): v is ProfileViewBasic {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#profileViewBasic'\n  )\n}\n\nexport function validateProfileViewBasic(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#profileViewBasic', v)\n}\n\nexport interface ProfileView {\n  did: string\n  handle: string\n  displayName?: string\n  description?: string\n  avatar?: string\n  indexedAt?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isProfileView(v: unknown): v is ProfileView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#profileView'\n  )\n}\n\nexport function validateProfileView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#profileView', v)\n}\n\nexport interface ProfileViewDetailed {\n  did: string\n  handle: string\n  displayName?: string\n  description?: string\n  avatar?: string\n  banner?: string\n  followersCount?: number\n  followsCount?: number\n  postsCount?: number\n  indexedAt?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isProfileViewDetailed(v: unknown): v is ProfileViewDetailed {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#profileViewDetailed'\n  )\n}\n\nexport function validateProfileViewDetailed(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#profileViewDetailed', v)\n}\n\nexport interface ViewerState {\n  muted?: boolean\n  following?: string\n  followedBy?: string\n  [k: string]: unknown\n}\n\nexport function isViewerState(v: unknown): v is ViewerState {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#viewerState'\n  )\n}\n\nexport function validateViewerState(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#viewerState', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  displayName?: string\n  description?: string\n  avatar?: BlobRef\n  banner?: BlobRef\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.actor.profile#main' ||\n      v.$type === 'app.bsky.actor.profile')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.profile#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  external: External\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.external#main' ||\n      v.$type === 'app.bsky.embed.external')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#main', v)\n}\n\nexport interface External {\n  uri: string\n  title: string\n  description: string\n  thumb?: BlobRef\n  [k: string]: unknown\n}\n\nexport function isExternal(v: unknown): v is External {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.external#external'\n  )\n}\n\nexport function validateExternal(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#external', v)\n}\n\nexport interface View {\n  external: ViewExternal\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.external#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#view', v)\n}\n\nexport interface ViewExternal {\n  uri: string\n  title: string\n  description: string\n  thumb?: string\n  [k: string]: unknown\n}\n\nexport function isViewExternal(v: unknown): v is ViewExternal {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.external#viewExternal'\n  )\n}\n\nexport function validateViewExternal(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#viewExternal', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  images: Image[]\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.images#main' ||\n      v.$type === 'app.bsky.embed.images')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#main', v)\n}\n\nexport interface Image {\n  image: BlobRef\n  alt: string\n  [k: string]: unknown\n}\n\nexport function isImage(v: unknown): v is Image {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.embed.images#image'\n  )\n}\n\nexport function validateImage(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#image', v)\n}\n\nexport interface View {\n  images: ViewImage[]\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.embed.images#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#view', v)\n}\n\nexport interface ViewImage {\n  thumb: string\n  fullsize: string\n  alt: string\n  [k: string]: unknown\n}\n\nexport function isViewImage(v: unknown): v is ViewImage {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.images#viewImage'\n  )\n}\n\nexport function validateViewImage(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#viewImage', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as AppBskyEmbedImages from './images'\nimport * as AppBskyEmbedExternal from './external'\nimport * as AppBskyEmbedRecordWithMedia from './recordWithMedia'\n\nexport interface Main {\n  record: ComAtprotoRepoStrongRef.Main\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.record#main' ||\n      v.$type === 'app.bsky.embed.record')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#main', v)\n}\n\nexport interface View {\n  record: ViewRecord | ViewNotFound | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.embed.record#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#view', v)\n}\n\nexport interface ViewRecord {\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileViewBasic\n  value: {}\n  embeds?: (\n    | AppBskyEmbedImages.View\n    | AppBskyEmbedExternal.View\n    | View\n    | AppBskyEmbedRecordWithMedia.View\n    | { $type: string; [k: string]: unknown }\n  )[]\n  indexedAt: string\n  [k: string]: unknown\n}\n\nexport function isViewRecord(v: unknown): v is ViewRecord {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.record#viewRecord'\n  )\n}\n\nexport function validateViewRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#viewRecord', v)\n}\n\nexport interface ViewNotFound {\n  uri: string\n  [k: string]: unknown\n}\n\nexport function isViewNotFound(v: unknown): v is ViewNotFound {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.record#viewNotFound'\n  )\n}\n\nexport function validateViewNotFound(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#viewNotFound', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyEmbedRecord from './record'\nimport * as AppBskyEmbedImages from './images'\nimport * as AppBskyEmbedExternal from './external'\n\nexport interface Main {\n  record: AppBskyEmbedRecord.Main\n  media:\n    | AppBskyEmbedImages.Main\n    | AppBskyEmbedExternal.Main\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.recordWithMedia#main' ||\n      v.$type === 'app.bsky.embed.recordWithMedia')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.recordWithMedia#main', v)\n}\n\nexport interface View {\n  record: AppBskyEmbedRecord.View\n  media:\n    | AppBskyEmbedImages.View\n    | AppBskyEmbedExternal.View\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.recordWithMedia#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.recordWithMedia#view', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as AppBskyEmbedImages from '../embed/images'\nimport * as AppBskyEmbedExternal from '../embed/external'\nimport * as AppBskyEmbedRecord from '../embed/record'\nimport * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface PostView {\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileViewBasic\n  record: {}\n  embed?:\n    | AppBskyEmbedImages.View\n    | AppBskyEmbedExternal.View\n    | AppBskyEmbedRecord.View\n    | AppBskyEmbedRecordWithMedia.View\n    | { $type: string; [k: string]: unknown }\n  replyCount?: number\n  repostCount?: number\n  likeCount?: number\n  indexedAt: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isPostView(v: unknown): v is PostView {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.defs#postView'\n  )\n}\n\nexport function validatePostView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#postView', v)\n}\n\nexport interface ViewerState {\n  repost?: string\n  like?: string\n  [k: string]: unknown\n}\n\nexport function isViewerState(v: unknown): v is ViewerState {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#viewerState'\n  )\n}\n\nexport function validateViewerState(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#viewerState', v)\n}\n\nexport interface FeedViewPost {\n  post: PostView\n  reply?: ReplyRef\n  reason?: ReasonRepost | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isFeedViewPost(v: unknown): v is FeedViewPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#feedViewPost'\n  )\n}\n\nexport function validateFeedViewPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#feedViewPost', v)\n}\n\nexport interface ReplyRef {\n  root: PostView\n  parent: PostView\n  [k: string]: unknown\n}\n\nexport function isReplyRef(v: unknown): v is ReplyRef {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.defs#replyRef'\n  )\n}\n\nexport function validateReplyRef(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#replyRef', v)\n}\n\nexport interface ReasonRepost {\n  by: AppBskyActorDefs.ProfileViewBasic\n  indexedAt: string\n  [k: string]: unknown\n}\n\nexport function isReasonRepost(v: unknown): v is ReasonRepost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#reasonRepost'\n  )\n}\n\nexport function validateReasonRepost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#reasonRepost', v)\n}\n\nexport interface ThreadViewPost {\n  post: PostView\n  parent?:\n    | ThreadViewPost\n    | NotFoundPost\n    | { $type: string; [k: string]: unknown }\n  replies?: (\n    | ThreadViewPost\n    | NotFoundPost\n    | { $type: string; [k: string]: unknown }\n  )[]\n  [k: string]: unknown\n}\n\nexport function isThreadViewPost(v: unknown): v is ThreadViewPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#threadViewPost'\n  )\n}\n\nexport function validateThreadViewPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#threadViewPost', v)\n}\n\nexport interface NotFoundPost {\n  uri: string\n  notFound: true\n  [k: string]: unknown\n}\n\nexport function isNotFoundPost(v: unknown): v is NotFoundPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#notFoundPost'\n  )\n}\n\nexport function validateNotFoundPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#notFoundPost', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\n\nexport interface Record {\n  subject: ComAtprotoRepoStrongRef.Main\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.like#main' || v.$type === 'app.bsky.feed.like')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.like#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyRichtextFacet from '../richtext/facet'\nimport * as AppBskyEmbedImages from '../embed/images'\nimport * as AppBskyEmbedExternal from '../embed/external'\nimport * as AppBskyEmbedRecord from '../embed/record'\nimport * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\n\nexport interface Record {\n  text: string\n  /** Deprecated: replaced by app.bsky.richtext.facet. */\n  entities?: Entity[]\n  facets?: AppBskyRichtextFacet.Main[]\n  reply?: ReplyRef\n  embed?:\n    | AppBskyEmbedImages.Main\n    | AppBskyEmbedExternal.Main\n    | AppBskyEmbedRecord.Main\n    | AppBskyEmbedRecordWithMedia.Main\n    | { $type: string; [k: string]: unknown }\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.post#main' || v.$type === 'app.bsky.feed.post')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#main', v)\n}\n\nexport interface ReplyRef {\n  root: ComAtprotoRepoStrongRef.Main\n  parent: ComAtprotoRepoStrongRef.Main\n  [k: string]: unknown\n}\n\nexport function isReplyRef(v: unknown): v is ReplyRef {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.post#replyRef'\n  )\n}\n\nexport function validateReplyRef(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#replyRef', v)\n}\n\n/** Deprecated: use facets instead. */\nexport interface Entity {\n  index: TextSlice\n  /** Expected values are 'mention' and 'link'. */\n  type: string\n  value: string\n  [k: string]: unknown\n}\n\nexport function isEntity(v: unknown): v is Entity {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.post#entity'\n  )\n}\n\nexport function validateEntity(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#entity', v)\n}\n\n/** Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings. */\nexport interface TextSlice {\n  start: number\n  end: number\n  [k: string]: unknown\n}\n\nexport function isTextSlice(v: unknown): v is TextSlice {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.post#textSlice'\n  )\n}\n\nexport function validateTextSlice(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#textSlice', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\n\nexport interface Record {\n  subject: ComAtprotoRepoStrongRef.Main\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.repost#main' ||\n      v.$type === 'app.bsky.feed.repost')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.repost#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  subject: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.graph.follow#main' ||\n      v.$type === 'app.bsky.graph.follow')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.follow#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  index: ByteSlice\n  features: (Mention | Link | { $type: string; [k: string]: unknown })[]\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.richtext.facet#main' ||\n      v.$type === 'app.bsky.richtext.facet')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#main', v)\n}\n\n/** A facet feature for actor mentions. */\nexport interface Mention {\n  did: string\n  [k: string]: unknown\n}\n\nexport function isMention(v: unknown): v is Mention {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.richtext.facet#mention'\n  )\n}\n\nexport function validateMention(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#mention', v)\n}\n\n/** A facet feature for links. */\nexport interface Link {\n  uri: string\n  [k: string]: unknown\n}\n\nexport function isLink(v: unknown): v is Link {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.richtext.facet#link'\n  )\n}\n\nexport function validateLink(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#link', v)\n}\n\n/** A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings. */\nexport interface ByteSlice {\n  byteStart: number\n  byteEnd: number\n  [k: string]: unknown\n}\n\nexport function isByteSlice(v: unknown): v is ByteSlice {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.richtext.facet#byteSlice'\n  )\n}\n\nexport function validateByteSlice(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#byteSlice', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport {\n  Client as XrpcClient,\n  ServiceClient as XrpcServiceClient,\n} from '@atproto/xrpc'\nimport { schemas } from './lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './types/com/atproto/admin/defs'\nimport * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes'\nimport * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes'\nimport * as ComAtprotoAdminGetModerationAction from './types/com/atproto/admin/getModerationAction'\nimport * as ComAtprotoAdminGetModerationActions from './types/com/atproto/admin/getModerationActions'\nimport * as ComAtprotoAdminGetModerationReport from './types/com/atproto/admin/getModerationReport'\nimport * as ComAtprotoAdminGetModerationReports from './types/com/atproto/admin/getModerationReports'\nimport * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord'\nimport * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo'\nimport * as ComAtprotoAdminResolveModerationReports from './types/com/atproto/admin/resolveModerationReports'\nimport * as ComAtprotoAdminReverseModerationAction from './types/com/atproto/admin/reverseModerationAction'\nimport * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos'\nimport * as ComAtprotoAdminTakeModerationAction from './types/com/atproto/admin/takeModerationAction'\nimport * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle'\nimport * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle'\nimport * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle'\nimport * as ComAtprotoLabelDefs from './types/com/atproto/label/defs'\nimport * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels'\nimport * as ComAtprotoLabelSubscribeLabels from './types/com/atproto/label/subscribeLabels'\nimport * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport'\nimport * as ComAtprotoModerationDefs from './types/com/atproto/moderation/defs'\nimport * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites'\nimport * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord'\nimport * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord'\nimport * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo'\nimport * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord'\nimport * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords'\nimport * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord'\nimport * as ComAtprotoRepoStrongRef from './types/com/atproto/repo/strongRef'\nimport * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob'\nimport * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount'\nimport * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode'\nimport * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes'\nimport * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession'\nimport * as ComAtprotoServerDefs from './types/com/atproto/server/defs'\nimport * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount'\nimport * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession'\nimport * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer'\nimport * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes'\nimport * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession'\nimport * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession'\nimport * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete'\nimport * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset'\nimport * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword'\nimport * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob'\nimport * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks'\nimport * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout'\nimport * as ComAtprotoSyncGetCommitPath from './types/com/atproto/sync/getCommitPath'\nimport * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead'\nimport * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord'\nimport * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo'\nimport * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs'\nimport * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos'\nimport * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate'\nimport * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl'\nimport * as ComAtprotoSyncSubscribeRepos from './types/com/atproto/sync/subscribeRepos'\nimport * as AppBskyActorDefs from './types/app/bsky/actor/defs'\nimport * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile'\nimport * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles'\nimport * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions'\nimport * as AppBskyActorProfile from './types/app/bsky/actor/profile'\nimport * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors'\nimport * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead'\nimport * as AppBskyEmbedExternal from './types/app/bsky/embed/external'\nimport * as AppBskyEmbedImages from './types/app/bsky/embed/images'\nimport * as AppBskyEmbedRecord from './types/app/bsky/embed/record'\nimport * as AppBskyEmbedRecordWithMedia from './types/app/bsky/embed/recordWithMedia'\nimport * as AppBskyFeedDefs from './types/app/bsky/feed/defs'\nimport * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed'\nimport * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes'\nimport * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread'\nimport * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy'\nimport * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline'\nimport * as AppBskyFeedLike from './types/app/bsky/feed/like'\nimport * as AppBskyFeedPost from './types/app/bsky/feed/post'\nimport * as AppBskyFeedRepost from './types/app/bsky/feed/repost'\nimport * as AppBskyGraphFollow from './types/app/bsky/graph/follow'\nimport * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers'\nimport * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows'\nimport * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes'\nimport * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor'\nimport * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor'\nimport * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount'\nimport * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications'\nimport * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen'\nimport * as AppBskyRichtextFacet from './types/app/bsky/richtext/facet'\nimport * as AppBskyUnspeccedGetPopular from './types/app/bsky/unspecced/getPopular'\n\nexport * as ComAtprotoAdminDefs from './types/com/atproto/admin/defs'\nexport * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes'\nexport * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes'\nexport * as ComAtprotoAdminGetModerationAction from './types/com/atproto/admin/getModerationAction'\nexport * as ComAtprotoAdminGetModerationActions from './types/com/atproto/admin/getModerationActions'\nexport * as ComAtprotoAdminGetModerationReport from './types/com/atproto/admin/getModerationReport'\nexport * as ComAtprotoAdminGetModerationReports from './types/com/atproto/admin/getModerationReports'\nexport * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord'\nexport * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo'\nexport * as ComAtprotoAdminResolveModerationReports from './types/com/atproto/admin/resolveModerationReports'\nexport * as ComAtprotoAdminReverseModerationAction from './types/com/atproto/admin/reverseModerationAction'\nexport * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos'\nexport * as ComAtprotoAdminTakeModerationAction from './types/com/atproto/admin/takeModerationAction'\nexport * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle'\nexport * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle'\nexport * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle'\nexport * as ComAtprotoLabelDefs from './types/com/atproto/label/defs'\nexport * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels'\nexport * as ComAtprotoLabelSubscribeLabels from './types/com/atproto/label/subscribeLabels'\nexport * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport'\nexport * as ComAtprotoModerationDefs from './types/com/atproto/moderation/defs'\nexport * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites'\nexport * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord'\nexport * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord'\nexport * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo'\nexport * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord'\nexport * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords'\nexport * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord'\nexport * as ComAtprotoRepoStrongRef from './types/com/atproto/repo/strongRef'\nexport * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob'\nexport * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount'\nexport * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode'\nexport * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes'\nexport * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession'\nexport * as ComAtprotoServerDefs from './types/com/atproto/server/defs'\nexport * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount'\nexport * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession'\nexport * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer'\nexport * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes'\nexport * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession'\nexport * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession'\nexport * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete'\nexport * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset'\nexport * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword'\nexport * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob'\nexport * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks'\nexport * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout'\nexport * as ComAtprotoSyncGetCommitPath from './types/com/atproto/sync/getCommitPath'\nexport * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead'\nexport * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord'\nexport * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo'\nexport * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs'\nexport * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos'\nexport * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate'\nexport * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl'\nexport * as ComAtprotoSyncSubscribeRepos from './types/com/atproto/sync/subscribeRepos'\nexport * as AppBskyActorDefs from './types/app/bsky/actor/defs'\nexport * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile'\nexport * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles'\nexport * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions'\nexport * as AppBskyActorProfile from './types/app/bsky/actor/profile'\nexport * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors'\nexport * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead'\nexport * as AppBskyEmbedExternal from './types/app/bsky/embed/external'\nexport * as AppBskyEmbedImages from './types/app/bsky/embed/images'\nexport * as AppBskyEmbedRecord from './types/app/bsky/embed/record'\nexport * as AppBskyEmbedRecordWithMedia from './types/app/bsky/embed/recordWithMedia'\nexport * as AppBskyFeedDefs from './types/app/bsky/feed/defs'\nexport * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed'\nexport * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes'\nexport * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread'\nexport * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy'\nexport * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline'\nexport * as AppBskyFeedLike from './types/app/bsky/feed/like'\nexport * as AppBskyFeedPost from './types/app/bsky/feed/post'\nexport * as AppBskyFeedRepost from './types/app/bsky/feed/repost'\nexport * as AppBskyGraphFollow from './types/app/bsky/graph/follow'\nexport * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers'\nexport * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows'\nexport * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes'\nexport * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor'\nexport * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor'\nexport * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount'\nexport * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications'\nexport * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen'\nexport * as AppBskyRichtextFacet from './types/app/bsky/richtext/facet'\nexport * as AppBskyUnspeccedGetPopular from './types/app/bsky/unspecced/getPopular'\n\nexport const COM_ATPROTO_ADMIN = {\n  DefsTakedown: 'com.atproto.admin.defs#takedown',\n  DefsFlag: 'com.atproto.admin.defs#flag',\n  DefsAcknowledge: 'com.atproto.admin.defs#acknowledge',\n}\nexport const COM_ATPROTO_MODERATION = {\n  DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',\n  DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',\n}\n\nexport class AtpBaseClient {\n  xrpc: XrpcClient = new XrpcClient()\n\n  constructor() {\n    this.xrpc.addLexicons(schemas)\n  }\n\n  service(serviceUri: string | URL): AtpServiceClient {\n    return new AtpServiceClient(this, this.xrpc.service(serviceUri))\n  }\n}\n\nexport class AtpServiceClient {\n  _baseClient: AtpBaseClient\n  xrpc: XrpcServiceClient\n  com: ComNS\n  app: AppNS\n\n  constructor(baseClient: AtpBaseClient, xrpcService: XrpcServiceClient) {\n    this._baseClient = baseClient\n    this.xrpc = xrpcService\n    this.com = new ComNS(this)\n    this.app = new AppNS(this)\n  }\n\n  setHeader(key: string, value: string): void {\n    this.xrpc.setHeader(key, value)\n  }\n}\n\nexport class ComNS {\n  _service: AtpServiceClient\n  atproto: AtprotoNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.atproto = new AtprotoNS(service)\n  }\n}\n\nexport class AtprotoNS {\n  _service: AtpServiceClient\n  admin: AdminNS\n  identity: IdentityNS\n  label: LabelNS\n  moderation: ModerationNS\n  repo: RepoNS\n  server: ServerNS\n  sync: SyncNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.admin = new AdminNS(service)\n    this.identity = new IdentityNS(service)\n    this.label = new LabelNS(service)\n    this.moderation = new ModerationNS(service)\n    this.repo = new RepoNS(service)\n    this.server = new ServerNS(service)\n    this.sync = new SyncNS(service)\n  }\n}\n\nexport class AdminNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  disableInviteCodes(\n    data?: ComAtprotoAdminDisableInviteCodes.InputSchema,\n    opts?: ComAtprotoAdminDisableInviteCodes.CallOptions,\n  ): Promise<ComAtprotoAdminDisableInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminDisableInviteCodes.toKnownErr(e)\n      })\n  }\n\n  getInviteCodes(\n    params?: ComAtprotoAdminGetInviteCodes.QueryParams,\n    opts?: ComAtprotoAdminGetInviteCodes.CallOptions,\n  ): Promise<ComAtprotoAdminGetInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getInviteCodes', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetInviteCodes.toKnownErr(e)\n      })\n  }\n\n  getModerationAction(\n    params?: ComAtprotoAdminGetModerationAction.QueryParams,\n    opts?: ComAtprotoAdminGetModerationAction.CallOptions,\n  ): Promise<ComAtprotoAdminGetModerationAction.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getModerationAction', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetModerationAction.toKnownErr(e)\n      })\n  }\n\n  getModerationActions(\n    params?: ComAtprotoAdminGetModerationActions.QueryParams,\n    opts?: ComAtprotoAdminGetModerationActions.CallOptions,\n  ): Promise<ComAtprotoAdminGetModerationActions.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getModerationActions', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetModerationActions.toKnownErr(e)\n      })\n  }\n\n  getModerationReport(\n    params?: ComAtprotoAdminGetModerationReport.QueryParams,\n    opts?: ComAtprotoAdminGetModerationReport.CallOptions,\n  ): Promise<ComAtprotoAdminGetModerationReport.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getModerationReport', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetModerationReport.toKnownErr(e)\n      })\n  }\n\n  getModerationReports(\n    params?: ComAtprotoAdminGetModerationReports.QueryParams,\n    opts?: ComAtprotoAdminGetModerationReports.CallOptions,\n  ): Promise<ComAtprotoAdminGetModerationReports.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getModerationReports', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetModerationReports.toKnownErr(e)\n      })\n  }\n\n  getRecord(\n    params?: ComAtprotoAdminGetRecord.QueryParams,\n    opts?: ComAtprotoAdminGetRecord.CallOptions,\n  ): Promise<ComAtprotoAdminGetRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getRecord', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetRecord.toKnownErr(e)\n      })\n  }\n\n  getRepo(\n    params?: ComAtprotoAdminGetRepo.QueryParams,\n    opts?: ComAtprotoAdminGetRepo.CallOptions,\n  ): Promise<ComAtprotoAdminGetRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getRepo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetRepo.toKnownErr(e)\n      })\n  }\n\n  resolveModerationReports(\n    data?: ComAtprotoAdminResolveModerationReports.InputSchema,\n    opts?: ComAtprotoAdminResolveModerationReports.CallOptions,\n  ): Promise<ComAtprotoAdminResolveModerationReports.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.resolveModerationReports', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminResolveModerationReports.toKnownErr(e)\n      })\n  }\n\n  reverseModerationAction(\n    data?: ComAtprotoAdminReverseModerationAction.InputSchema,\n    opts?: ComAtprotoAdminReverseModerationAction.CallOptions,\n  ): Promise<ComAtprotoAdminReverseModerationAction.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.reverseModerationAction', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminReverseModerationAction.toKnownErr(e)\n      })\n  }\n\n  searchRepos(\n    params?: ComAtprotoAdminSearchRepos.QueryParams,\n    opts?: ComAtprotoAdminSearchRepos.CallOptions,\n  ): Promise<ComAtprotoAdminSearchRepos.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.searchRepos', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminSearchRepos.toKnownErr(e)\n      })\n  }\n\n  takeModerationAction(\n    data?: ComAtprotoAdminTakeModerationAction.InputSchema,\n    opts?: ComAtprotoAdminTakeModerationAction.CallOptions,\n  ): Promise<ComAtprotoAdminTakeModerationAction.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.takeModerationAction', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminTakeModerationAction.toKnownErr(e)\n      })\n  }\n\n  updateAccountHandle(\n    data?: ComAtprotoAdminUpdateAccountHandle.InputSchema,\n    opts?: ComAtprotoAdminUpdateAccountHandle.CallOptions,\n  ): Promise<ComAtprotoAdminUpdateAccountHandle.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminUpdateAccountHandle.toKnownErr(e)\n      })\n  }\n}\n\nexport class IdentityNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  resolveHandle(\n    params?: ComAtprotoIdentityResolveHandle.QueryParams,\n    opts?: ComAtprotoIdentityResolveHandle.CallOptions,\n  ): Promise<ComAtprotoIdentityResolveHandle.Response> {\n    return this._service.xrpc\n      .call('com.atproto.identity.resolveHandle', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoIdentityResolveHandle.toKnownErr(e)\n      })\n  }\n\n  updateHandle(\n    data?: ComAtprotoIdentityUpdateHandle.InputSchema,\n    opts?: ComAtprotoIdentityUpdateHandle.CallOptions,\n  ): Promise<ComAtprotoIdentityUpdateHandle.Response> {\n    return this._service.xrpc\n      .call('com.atproto.identity.updateHandle', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoIdentityUpdateHandle.toKnownErr(e)\n      })\n  }\n}\n\nexport class LabelNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  queryLabels(\n    params?: ComAtprotoLabelQueryLabels.QueryParams,\n    opts?: ComAtprotoLabelQueryLabels.CallOptions,\n  ): Promise<ComAtprotoLabelQueryLabels.Response> {\n    return this._service.xrpc\n      .call('com.atproto.label.queryLabels', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoLabelQueryLabels.toKnownErr(e)\n      })\n  }\n}\n\nexport class ModerationNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  createReport(\n    data?: ComAtprotoModerationCreateReport.InputSchema,\n    opts?: ComAtprotoModerationCreateReport.CallOptions,\n  ): Promise<ComAtprotoModerationCreateReport.Response> {\n    return this._service.xrpc\n      .call('com.atproto.moderation.createReport', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoModerationCreateReport.toKnownErr(e)\n      })\n  }\n}\n\nexport class RepoNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  applyWrites(\n    data?: ComAtprotoRepoApplyWrites.InputSchema,\n    opts?: ComAtprotoRepoApplyWrites.CallOptions,\n  ): Promise<ComAtprotoRepoApplyWrites.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.applyWrites', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoApplyWrites.toKnownErr(e)\n      })\n  }\n\n  createRecord(\n    data?: ComAtprotoRepoCreateRecord.InputSchema,\n    opts?: ComAtprotoRepoCreateRecord.CallOptions,\n  ): Promise<ComAtprotoRepoCreateRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.createRecord', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoCreateRecord.toKnownErr(e)\n      })\n  }\n\n  deleteRecord(\n    data?: ComAtprotoRepoDeleteRecord.InputSchema,\n    opts?: ComAtprotoRepoDeleteRecord.CallOptions,\n  ): Promise<ComAtprotoRepoDeleteRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.deleteRecord', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoDeleteRecord.toKnownErr(e)\n      })\n  }\n\n  describeRepo(\n    params?: ComAtprotoRepoDescribeRepo.QueryParams,\n    opts?: ComAtprotoRepoDescribeRepo.CallOptions,\n  ): Promise<ComAtprotoRepoDescribeRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.describeRepo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoDescribeRepo.toKnownErr(e)\n      })\n  }\n\n  getRecord(\n    params?: ComAtprotoRepoGetRecord.QueryParams,\n    opts?: ComAtprotoRepoGetRecord.CallOptions,\n  ): Promise<ComAtprotoRepoGetRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.getRecord', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoGetRecord.toKnownErr(e)\n      })\n  }\n\n  listRecords(\n    params?: ComAtprotoRepoListRecords.QueryParams,\n    opts?: ComAtprotoRepoListRecords.CallOptions,\n  ): Promise<ComAtprotoRepoListRecords.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.listRecords', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoListRecords.toKnownErr(e)\n      })\n  }\n\n  putRecord(\n    data?: ComAtprotoRepoPutRecord.InputSchema,\n    opts?: ComAtprotoRepoPutRecord.CallOptions,\n  ): Promise<ComAtprotoRepoPutRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.putRecord', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoPutRecord.toKnownErr(e)\n      })\n  }\n\n  uploadBlob(\n    data?: ComAtprotoRepoUploadBlob.InputSchema,\n    opts?: ComAtprotoRepoUploadBlob.CallOptions,\n  ): Promise<ComAtprotoRepoUploadBlob.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.uploadBlob', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoUploadBlob.toKnownErr(e)\n      })\n  }\n}\n\nexport class ServerNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  createAccount(\n    data?: ComAtprotoServerCreateAccount.InputSchema,\n    opts?: ComAtprotoServerCreateAccount.CallOptions,\n  ): Promise<ComAtprotoServerCreateAccount.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createAccount', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateAccount.toKnownErr(e)\n      })\n  }\n\n  createInviteCode(\n    data?: ComAtprotoServerCreateInviteCode.InputSchema,\n    opts?: ComAtprotoServerCreateInviteCode.CallOptions,\n  ): Promise<ComAtprotoServerCreateInviteCode.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createInviteCode', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateInviteCode.toKnownErr(e)\n      })\n  }\n\n  createInviteCodes(\n    data?: ComAtprotoServerCreateInviteCodes.InputSchema,\n    opts?: ComAtprotoServerCreateInviteCodes.CallOptions,\n  ): Promise<ComAtprotoServerCreateInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createInviteCodes', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateInviteCodes.toKnownErr(e)\n      })\n  }\n\n  createSession(\n    data?: ComAtprotoServerCreateSession.InputSchema,\n    opts?: ComAtprotoServerCreateSession.CallOptions,\n  ): Promise<ComAtprotoServerCreateSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createSession', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateSession.toKnownErr(e)\n      })\n  }\n\n  deleteAccount(\n    data?: ComAtprotoServerDeleteAccount.InputSchema,\n    opts?: ComAtprotoServerDeleteAccount.CallOptions,\n  ): Promise<ComAtprotoServerDeleteAccount.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.deleteAccount', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerDeleteAccount.toKnownErr(e)\n      })\n  }\n\n  deleteSession(\n    data?: ComAtprotoServerDeleteSession.InputSchema,\n    opts?: ComAtprotoServerDeleteSession.CallOptions,\n  ): Promise<ComAtprotoServerDeleteSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.deleteSession', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerDeleteSession.toKnownErr(e)\n      })\n  }\n\n  describeServer(\n    params?: ComAtprotoServerDescribeServer.QueryParams,\n    opts?: ComAtprotoServerDescribeServer.CallOptions,\n  ): Promise<ComAtprotoServerDescribeServer.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.describeServer', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerDescribeServer.toKnownErr(e)\n      })\n  }\n\n  getAccountInviteCodes(\n    params?: ComAtprotoServerGetAccountInviteCodes.QueryParams,\n    opts?: ComAtprotoServerGetAccountInviteCodes.CallOptions,\n  ): Promise<ComAtprotoServerGetAccountInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.getAccountInviteCodes', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e)\n      })\n  }\n\n  getSession(\n    params?: ComAtprotoServerGetSession.QueryParams,\n    opts?: ComAtprotoServerGetSession.CallOptions,\n  ): Promise<ComAtprotoServerGetSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.getSession', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerGetSession.toKnownErr(e)\n      })\n  }\n\n  refreshSession(\n    data?: ComAtprotoServerRefreshSession.InputSchema,\n    opts?: ComAtprotoServerRefreshSession.CallOptions,\n  ): Promise<ComAtprotoServerRefreshSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.refreshSession', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRefreshSession.toKnownErr(e)\n      })\n  }\n\n  requestAccountDelete(\n    data?: ComAtprotoServerRequestAccountDelete.InputSchema,\n    opts?: ComAtprotoServerRequestAccountDelete.CallOptions,\n  ): Promise<ComAtprotoServerRequestAccountDelete.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRequestAccountDelete.toKnownErr(e)\n      })\n  }\n\n  requestPasswordReset(\n    data?: ComAtprotoServerRequestPasswordReset.InputSchema,\n    opts?: ComAtprotoServerRequestPasswordReset.CallOptions,\n  ): Promise<ComAtprotoServerRequestPasswordReset.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRequestPasswordReset.toKnownErr(e)\n      })\n  }\n\n  resetPassword(\n    data?: ComAtprotoServerResetPassword.InputSchema,\n    opts?: ComAtprotoServerResetPassword.CallOptions,\n  ): Promise<ComAtprotoServerResetPassword.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.resetPassword', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerResetPassword.toKnownErr(e)\n      })\n  }\n}\n\nexport class SyncNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  getBlob(\n    params?: ComAtprotoSyncGetBlob.QueryParams,\n    opts?: ComAtprotoSyncGetBlob.CallOptions,\n  ): Promise<ComAtprotoSyncGetBlob.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getBlob', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetBlob.toKnownErr(e)\n      })\n  }\n\n  getBlocks(\n    params?: ComAtprotoSyncGetBlocks.QueryParams,\n    opts?: ComAtprotoSyncGetBlocks.CallOptions,\n  ): Promise<ComAtprotoSyncGetBlocks.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getBlocks', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetBlocks.toKnownErr(e)\n      })\n  }\n\n  getCheckout(\n    params?: ComAtprotoSyncGetCheckout.QueryParams,\n    opts?: ComAtprotoSyncGetCheckout.CallOptions,\n  ): Promise<ComAtprotoSyncGetCheckout.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getCheckout', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetCheckout.toKnownErr(e)\n      })\n  }\n\n  getCommitPath(\n    params?: ComAtprotoSyncGetCommitPath.QueryParams,\n    opts?: ComAtprotoSyncGetCommitPath.CallOptions,\n  ): Promise<ComAtprotoSyncGetCommitPath.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getCommitPath', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetCommitPath.toKnownErr(e)\n      })\n  }\n\n  getHead(\n    params?: ComAtprotoSyncGetHead.QueryParams,\n    opts?: ComAtprotoSyncGetHead.CallOptions,\n  ): Promise<ComAtprotoSyncGetHead.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getHead', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetHead.toKnownErr(e)\n      })\n  }\n\n  getRecord(\n    params?: ComAtprotoSyncGetRecord.QueryParams,\n    opts?: ComAtprotoSyncGetRecord.CallOptions,\n  ): Promise<ComAtprotoSyncGetRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getRecord', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetRecord.toKnownErr(e)\n      })\n  }\n\n  getRepo(\n    params?: ComAtprotoSyncGetRepo.QueryParams,\n    opts?: ComAtprotoSyncGetRepo.CallOptions,\n  ): Promise<ComAtprotoSyncGetRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getRepo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetRepo.toKnownErr(e)\n      })\n  }\n\n  listBlobs(\n    params?: ComAtprotoSyncListBlobs.QueryParams,\n    opts?: ComAtprotoSyncListBlobs.CallOptions,\n  ): Promise<ComAtprotoSyncListBlobs.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.listBlobs', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncListBlobs.toKnownErr(e)\n      })\n  }\n\n  listRepos(\n    params?: ComAtprotoSyncListRepos.QueryParams,\n    opts?: ComAtprotoSyncListRepos.CallOptions,\n  ): Promise<ComAtprotoSyncListRepos.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.listRepos', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncListRepos.toKnownErr(e)\n      })\n  }\n\n  notifyOfUpdate(\n    params?: ComAtprotoSyncNotifyOfUpdate.QueryParams,\n    opts?: ComAtprotoSyncNotifyOfUpdate.CallOptions,\n  ): Promise<ComAtprotoSyncNotifyOfUpdate.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.notifyOfUpdate', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncNotifyOfUpdate.toKnownErr(e)\n      })\n  }\n\n  requestCrawl(\n    params?: ComAtprotoSyncRequestCrawl.QueryParams,\n    opts?: ComAtprotoSyncRequestCrawl.CallOptions,\n  ): Promise<ComAtprotoSyncRequestCrawl.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.requestCrawl', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncRequestCrawl.toKnownErr(e)\n      })\n  }\n}\n\nexport class AppNS {\n  _service: AtpServiceClient\n  bsky: BskyNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.bsky = new BskyNS(service)\n  }\n}\n\nexport class BskyNS {\n  _service: AtpServiceClient\n  actor: ActorNS\n  embed: EmbedNS\n  feed: FeedNS\n  graph: GraphNS\n  notification: NotificationNS\n  richtext: RichtextNS\n  unspecced: UnspeccedNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.actor = new ActorNS(service)\n    this.embed = new EmbedNS(service)\n    this.feed = new FeedNS(service)\n    this.graph = new GraphNS(service)\n    this.notification = new NotificationNS(service)\n    this.richtext = new RichtextNS(service)\n    this.unspecced = new UnspeccedNS(service)\n  }\n}\n\nexport class ActorNS {\n  _service: AtpServiceClient\n  profile: ProfileRecord\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.profile = new ProfileRecord(service)\n  }\n\n  getProfile(\n    params?: AppBskyActorGetProfile.QueryParams,\n    opts?: AppBskyActorGetProfile.CallOptions,\n  ): Promise<AppBskyActorGetProfile.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getProfile', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetProfile.toKnownErr(e)\n      })\n  }\n\n  getProfiles(\n    params?: AppBskyActorGetProfiles.QueryParams,\n    opts?: AppBskyActorGetProfiles.CallOptions,\n  ): Promise<AppBskyActorGetProfiles.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getProfiles', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetProfiles.toKnownErr(e)\n      })\n  }\n\n  getSuggestions(\n    params?: AppBskyActorGetSuggestions.QueryParams,\n    opts?: AppBskyActorGetSuggestions.CallOptions,\n  ): Promise<AppBskyActorGetSuggestions.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getSuggestions', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetSuggestions.toKnownErr(e)\n      })\n  }\n\n  searchActors(\n    params?: AppBskyActorSearchActors.QueryParams,\n    opts?: AppBskyActorSearchActors.CallOptions,\n  ): Promise<AppBskyActorSearchActors.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.searchActors', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorSearchActors.toKnownErr(e)\n      })\n  }\n\n  searchActorsTypeahead(\n    params?: AppBskyActorSearchActorsTypeahead.QueryParams,\n    opts?: AppBskyActorSearchActorsTypeahead.CallOptions,\n  ): Promise<AppBskyActorSearchActorsTypeahead.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorSearchActorsTypeahead.toKnownErr(e)\n      })\n  }\n}\n\nexport class ProfileRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyActorProfile.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.actor.profile',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyActorProfile.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.actor.profile',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyActorProfile.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.actor.profile'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.actor.profile', rkey: 'self', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.actor.profile', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class EmbedNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n}\n\nexport class FeedNS {\n  _service: AtpServiceClient\n  like: LikeRecord\n  post: PostRecord\n  repost: RepostRecord\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.like = new LikeRecord(service)\n    this.post = new PostRecord(service)\n    this.repost = new RepostRecord(service)\n  }\n\n  getAuthorFeed(\n    params?: AppBskyFeedGetAuthorFeed.QueryParams,\n    opts?: AppBskyFeedGetAuthorFeed.CallOptions,\n  ): Promise<AppBskyFeedGetAuthorFeed.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getAuthorFeed', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetAuthorFeed.toKnownErr(e)\n      })\n  }\n\n  getLikes(\n    params?: AppBskyFeedGetLikes.QueryParams,\n    opts?: AppBskyFeedGetLikes.CallOptions,\n  ): Promise<AppBskyFeedGetLikes.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getLikes', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetLikes.toKnownErr(e)\n      })\n  }\n\n  getPostThread(\n    params?: AppBskyFeedGetPostThread.QueryParams,\n    opts?: AppBskyFeedGetPostThread.CallOptions,\n  ): Promise<AppBskyFeedGetPostThread.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getPostThread', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetPostThread.toKnownErr(e)\n      })\n  }\n\n  getRepostedBy(\n    params?: AppBskyFeedGetRepostedBy.QueryParams,\n    opts?: AppBskyFeedGetRepostedBy.CallOptions,\n  ): Promise<AppBskyFeedGetRepostedBy.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getRepostedBy', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetRepostedBy.toKnownErr(e)\n      })\n  }\n\n  getTimeline(\n    params?: AppBskyFeedGetTimeline.QueryParams,\n    opts?: AppBskyFeedGetTimeline.CallOptions,\n  ): Promise<AppBskyFeedGetTimeline.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getTimeline', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetTimeline.toKnownErr(e)\n      })\n  }\n}\n\nexport class LikeRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedLike.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.like',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedLike.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.like',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedLike.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.like'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.like', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.like', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class PostRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedPost.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.post',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedPost.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.post',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedPost.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.post'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.post', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.post', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class RepostRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedRepost.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.repost',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedRepost.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.repost',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedRepost.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.repost'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.repost', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.repost', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class GraphNS {\n  _service: AtpServiceClient\n  follow: FollowRecord\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.follow = new FollowRecord(service)\n  }\n\n  getFollowers(\n    params?: AppBskyGraphGetFollowers.QueryParams,\n    opts?: AppBskyGraphGetFollowers.CallOptions,\n  ): Promise<AppBskyGraphGetFollowers.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getFollowers', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetFollowers.toKnownErr(e)\n      })\n  }\n\n  getFollows(\n    params?: AppBskyGraphGetFollows.QueryParams,\n    opts?: AppBskyGraphGetFollows.CallOptions,\n  ): Promise<AppBskyGraphGetFollows.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getFollows', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetFollows.toKnownErr(e)\n      })\n  }\n\n  getMutes(\n    params?: AppBskyGraphGetMutes.QueryParams,\n    opts?: AppBskyGraphGetMutes.CallOptions,\n  ): Promise<AppBskyGraphGetMutes.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getMutes', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetMutes.toKnownErr(e)\n      })\n  }\n\n  muteActor(\n    data?: AppBskyGraphMuteActor.InputSchema,\n    opts?: AppBskyGraphMuteActor.CallOptions,\n  ): Promise<AppBskyGraphMuteActor.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.muteActor', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyGraphMuteActor.toKnownErr(e)\n      })\n  }\n\n  unmuteActor(\n    data?: AppBskyGraphUnmuteActor.InputSchema,\n    opts?: AppBskyGraphUnmuteActor.CallOptions,\n  ): Promise<AppBskyGraphUnmuteActor.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.unmuteActor', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyGraphUnmuteActor.toKnownErr(e)\n      })\n  }\n}\n\nexport class FollowRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyGraphFollow.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.graph.follow',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyGraphFollow.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.graph.follow',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyGraphFollow.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.graph.follow'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.graph.follow', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.graph.follow', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class NotificationNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  getUnreadCount(\n    params?: AppBskyNotificationGetUnreadCount.QueryParams,\n    opts?: AppBskyNotificationGetUnreadCount.CallOptions,\n  ): Promise<AppBskyNotificationGetUnreadCount.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.getUnreadCount', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyNotificationGetUnreadCount.toKnownErr(e)\n      })\n  }\n\n  listNotifications(\n    params?: AppBskyNotificationListNotifications.QueryParams,\n    opts?: AppBskyNotificationListNotifications.CallOptions,\n  ): Promise<AppBskyNotificationListNotifications.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.listNotifications', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyNotificationListNotifications.toKnownErr(e)\n      })\n  }\n\n  updateSeen(\n    data?: AppBskyNotificationUpdateSeen.InputSchema,\n    opts?: AppBskyNotificationUpdateSeen.CallOptions,\n  ): Promise<AppBskyNotificationUpdateSeen.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.updateSeen', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyNotificationUpdateSeen.toKnownErr(e)\n      })\n  }\n}\n\nexport class RichtextNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n}\n\nexport class UnspeccedNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  getPopular(\n    params?: AppBskyUnspeccedGetPopular.QueryParams,\n    opts?: AppBskyUnspeccedGetPopular.CallOptions,\n  ): Promise<AppBskyUnspeccedGetPopular.Response> {\n    return this._service.xrpc\n      .call('app.bsky.unspecced.getPopular', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyUnspeccedGetPopular.toKnownErr(e)\n      })\n  }\n}\n","import { ErrorResponseBody, errorResponseBody } from '@atproto/xrpc'\nimport { defaultFetchHandler } from '@atproto/xrpc'\nimport {\n  AtpBaseClient,\n  AtpServiceClient,\n  ComAtprotoServerCreateAccount,\n  ComAtprotoServerCreateSession,\n  ComAtprotoServerGetSession,\n  ComAtprotoServerRefreshSession,\n  ComAtprotoRepoUploadBlob,\n} from './client'\nimport {\n  AtpSessionData,\n  AtpAgentCreateAccountOpts,\n  AtpAgentLoginOpts,\n  AtpAgentFetchHandler,\n  AtpAgentFetchHandlerResponse,\n  AtpAgentGlobalOpts,\n  AtpPersistSessionHandler,\n  AtpAgentOpts,\n} from './types'\n\nconst REFRESH_SESSION = 'com.atproto.server.refreshSession'\n\n/**\n * An ATP \"Agent\"\n * Manages session token lifecycles and provides convenience methods.\n */\nexport class AtpAgent {\n  service: URL\n  api: AtpServiceClient\n  session?: AtpSessionData\n\n  private _baseClient: AtpBaseClient\n  private _persistSession?: AtpPersistSessionHandler\n  private _refreshSessionPromise: Promise<void> | undefined\n\n  get com() {\n    return this.api.com\n  }\n\n  /**\n   * The `fetch` implementation; must be implemented for your platform.\n   */\n  static fetch: AtpAgentFetchHandler | undefined = defaultFetchHandler\n\n  /**\n   * Configures the API globally.\n   */\n  static configure(opts: AtpAgentGlobalOpts) {\n    AtpAgent.fetch = opts.fetch\n  }\n\n  constructor(opts: AtpAgentOpts) {\n    this.service =\n      opts.service instanceof URL ? opts.service : new URL(opts.service)\n    this._persistSession = opts.persistSession\n\n    // create an ATP client instance for this agent\n    this._baseClient = new AtpBaseClient()\n    this._baseClient.xrpc.fetch = this._fetch.bind(this) // patch its fetch implementation\n    this.api = this._baseClient.service(opts.service)\n  }\n\n  /**\n   * Is there any active session?\n   */\n  get hasSession() {\n    return !!this.session\n  }\n\n  /**\n   * Sets the \"Persist Session\" method which can be used to store access tokens\n   * as they change.\n   */\n  setPersistSessionHandler(handler?: AtpPersistSessionHandler) {\n    this._persistSession = handler\n  }\n\n  /**\n   * Create a new account and hydrate its session in this agent.\n   */\n  async createAccount(\n    opts: AtpAgentCreateAccountOpts,\n  ): Promise<ComAtprotoServerCreateAccount.Response> {\n    try {\n      const res = await this.api.com.atproto.server.createAccount({\n        handle: opts.handle,\n        password: opts.password,\n        email: opts.email,\n        inviteCode: opts.inviteCode,\n      })\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: opts.email,\n      }\n      return res\n    } catch (e) {\n      this.session = undefined\n      throw e\n    } finally {\n      if (this.session) {\n        this._persistSession?.('create', this.session)\n      } else {\n        this._persistSession?.('create-failed', undefined)\n      }\n    }\n  }\n\n  /**\n   * Start a new session with this agent.\n   */\n  async login(\n    opts: AtpAgentLoginOpts,\n  ): Promise<ComAtprotoServerCreateSession.Response> {\n    try {\n      const res = await this.api.com.atproto.server.createSession({\n        identifier: opts.identifier,\n        password: opts.password,\n      })\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: res.data.email,\n      }\n      return res\n    } catch (e) {\n      this.session = undefined\n      throw e\n    } finally {\n      if (this.session) {\n        this._persistSession?.('create', this.session)\n      } else {\n        this._persistSession?.('create-failed', undefined)\n      }\n    }\n  }\n\n  /**\n   * Resume a pre-existing session with this agent.\n   */\n  async resumeSession(\n    session: AtpSessionData,\n  ): Promise<ComAtprotoServerGetSession.Response> {\n    try {\n      this.session = session\n      const res = await this.api.com.atproto.server.getSession()\n      if (!res.success || res.data.did !== this.session.did) {\n        throw new Error('Invalid session')\n      }\n      this.session.email = res.data.email\n      this.session.handle = res.data.handle\n      return res\n    } catch (e) {\n      this.session = undefined\n      throw e\n    } finally {\n      if (this.session) {\n        this._persistSession?.('create', this.session)\n      } else {\n        this._persistSession?.('create-failed', undefined)\n      }\n    }\n  }\n\n  /**\n   * Internal helper to add authorization headers to requests.\n   */\n  private _addAuthHeader(reqHeaders: Record<string, string>) {\n    if (!reqHeaders.authorization && this.session?.accessJwt) {\n      return {\n        ...reqHeaders,\n        authorization: `Bearer ${this.session.accessJwt}`,\n      }\n    }\n    return reqHeaders\n  }\n\n  /**\n   * Internal fetch handler which adds access-token management\n   */\n  private async _fetch(\n    reqUri: string,\n    reqMethod: string,\n    reqHeaders: Record<string, string>,\n    reqBody: any,\n  ): Promise<AtpAgentFetchHandlerResponse> {\n    if (!AtpAgent.fetch) {\n      throw new Error('AtpAgent fetch() method not configured')\n    }\n\n    // wait for any active session-refreshes to finish\n    await this._refreshSessionPromise\n\n    // send the request\n    let res = await AtpAgent.fetch(\n      reqUri,\n      reqMethod,\n      this._addAuthHeader(reqHeaders),\n      reqBody,\n    )\n\n    // handle session-refreshes as needed\n    if (isErrorResponse(res, ['ExpiredToken']) && this.session?.refreshJwt) {\n      // attempt refresh\n      await this._refreshSession()\n\n      // resend the request with the new access token\n      res = await AtpAgent.fetch(\n        reqUri,\n        reqMethod,\n        this._addAuthHeader(reqHeaders),\n        reqBody,\n      )\n    }\n\n    return res\n  }\n\n  /**\n   * Internal helper to refresh sessions\n   * - Wraps the actual implementation in a promise-guard to ensure only\n   *   one refresh is attempted at a time.\n   */\n  private async _refreshSession() {\n    if (this._refreshSessionPromise) {\n      return this._refreshSessionPromise\n    }\n    this._refreshSessionPromise = this._refreshSessionInner()\n    try {\n      await this._refreshSessionPromise\n    } finally {\n      this._refreshSessionPromise = undefined\n    }\n  }\n\n  /**\n   * Internal helper to refresh sessions (actual behavior)\n   */\n  private async _refreshSessionInner() {\n    if (!AtpAgent.fetch) {\n      throw new Error('AtpAgent fetch() method not configured')\n    }\n    if (!this.session?.refreshJwt) {\n      return\n    }\n\n    // send the refresh request\n    const url = new URL(this.service.origin)\n    url.pathname = `/xrpc/${REFRESH_SESSION}`\n    const res = await AtpAgent.fetch(\n      url.toString(),\n      'POST',\n      {\n        authorization: `Bearer ${this.session.refreshJwt}`,\n      },\n      undefined,\n    )\n\n    if (isErrorResponse(res, ['ExpiredToken', 'InvalidToken'])) {\n      // failed due to a bad refresh token\n      this.session = undefined\n      this._persistSession?.('expired', undefined)\n    } else if (isNewSessionObject(this._baseClient, res.body)) {\n      // succeeded, update the session\n      this.session = {\n        accessJwt: res.body.accessJwt,\n        refreshJwt: res.body.refreshJwt,\n        handle: res.body.handle,\n        did: res.body.did,\n      }\n      this._persistSession?.('update', this.session)\n    }\n    // else: other failures should be ignored - the issue will\n    // propagate in the _fetch() handler's second attempt to run\n    // the request\n  }\n\n  /**\n   * Upload a binary blob to the server\n   */\n  uploadBlob: typeof this.api.com.atproto.repo.uploadBlob = (data, opts) =>\n    this.api.com.atproto.repo.uploadBlob(data, opts)\n\n  /**\n   * Resolve a handle to a DID\n   */\n  resolveHandle: typeof this.api.com.atproto.identity.resolveHandle = (\n    params,\n    opts,\n  ) => this.api.com.atproto.identity.resolveHandle(params, opts)\n\n  /**\n   * Change the user's handle\n   */\n  updateHandle: typeof this.api.com.atproto.identity.updateHandle = (\n    data,\n    opts,\n  ) => this.api.com.atproto.identity.updateHandle(data, opts)\n\n  /**\n   * Create a moderation report\n   */\n  createModerationReport: typeof this.api.com.atproto.moderation.createReport =\n    (data, opts) => this.api.com.atproto.moderation.createReport(data, opts)\n}\n\nfunction isErrorObject(v: unknown): v is ErrorResponseBody {\n  return errorResponseBody.safeParse(v).success\n}\n\nfunction isErrorResponse(\n  res: AtpAgentFetchHandlerResponse,\n  errorNames: string[],\n): boolean {\n  if (res.status !== 400) {\n    return false\n  }\n  if (!isErrorObject(res.body)) {\n    return false\n  }\n  return (\n    typeof res.body.error === 'string' && errorNames.includes(res.body.error)\n  )\n}\n\nfunction isNewSessionObject(\n  client: AtpBaseClient,\n  v: unknown,\n): v is ComAtprotoServerRefreshSession.OutputSchema {\n  try {\n    client.xrpc.lex.assertValidXrpcOutput(\n      'com.atproto.server.refreshSession',\n      v,\n    )\n    return true\n  } catch {\n    return false\n  }\n}\n","/**\n * Javascript uses utf16-encoded strings while most environments and specs\n * have standardized around utf8 (including JSON).\n *\n * After some lengthy debated we decided that richtext facets need to use\n * utf8 indices. This means we need tools to convert indices between utf8\n * and utf16, and that's precisely what this library handles.\n */\n\nimport { graphemeLen } from '@atproto/common-web'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nexport class UnicodeString {\n  utf16: string\n  utf8: Uint8Array\n  private _graphemeLen?: number | undefined\n\n  constructor(utf16: string) {\n    this.utf16 = utf16\n    this.utf8 = encoder.encode(utf16)\n  }\n\n  get length() {\n    return this.utf8.byteLength\n  }\n\n  get graphemeLength() {\n    if (!this._graphemeLen) {\n      this._graphemeLen = graphemeLen(this.utf16)\n    }\n    return this._graphemeLen\n  }\n\n  slice(start?: number, end?: number): string {\n    return decoder.decode(this.utf8.slice(start, end))\n  }\n\n  utf16IndexToUtf8Index(i: number) {\n    return encoder.encode(this.utf16.slice(0, i)).byteLength\n  }\n\n  toString() {\n    return this.utf16\n  }\n}\n","import { RichText } from './rich-text'\nimport { UnicodeString } from './unicode'\n\nconst EXCESS_SPACE_RE = /[\\r\\n]([\\u00AD\\u2060\\u200D\\u200C\\u200B\\s]*[\\r\\n]){2,}/\nconst REPLACEMENT_STR = '\\n\\n'\n\nexport function sanitizeRichText(\n  richText: RichText,\n  opts: { cleanNewlines?: boolean },\n) {\n  if (opts.cleanNewlines) {\n    richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR)\n  }\n  return richText\n}\n\nfunction clean(\n  richText: RichText,\n  targetRegexp: RegExp,\n  replacementString: string,\n): RichText {\n  richText = richText.clone()\n\n  let match = richText.unicodeText.utf16.match(targetRegexp)\n  while (match && typeof match.index !== 'undefined') {\n    const oldText = richText.unicodeText\n    const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(\n      match.index,\n    )\n    const removeEndIndex = removeStartIndex + new UnicodeString(match[0]).length\n    richText.delete(removeStartIndex, removeEndIndex)\n    if (richText.unicodeText.utf16 === oldText.utf16) {\n      break // sanity check\n    }\n    richText.insert(removeStartIndex, replacementString)\n    match = richText.unicodeText.utf16.match(targetRegexp)\n  }\n\n  return richText\n}\n","import TLDs from 'tlds'\nimport { AppBskyRichtextFacet } from '../client'\nimport { UnicodeString } from './unicode'\n\nexport type Facet = AppBskyRichtextFacet.Main\n\nexport function detectFacets(text: UnicodeString): Facet[] | undefined {\n  let match\n  const facets: Facet[] = []\n  {\n    // mentions\n    const re = /(^|\\s|\\()(@)([a-zA-Z0-9.-]+)(\\b)/g\n    while ((match = re.exec(text.utf16))) {\n      if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {\n        continue // probably not a handle\n      }\n\n      const start = text.utf16.indexOf(match[3], match.index) - 1\n      facets.push({\n        $type: 'app.bsky.richtext.facet',\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(start),\n          byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1),\n        },\n        features: [\n          {\n            $type: 'app.bsky.richtext.facet#mention',\n            did: match[3], // must be resolved afterwards\n          },\n        ],\n      })\n    }\n  }\n  {\n    // links\n    const re =\n      /(^|\\s|\\()((https?:\\/\\/[\\S]+)|((?<domain>[a-z][a-z0-9]*(\\.[a-z0-9]+)+)[\\S]*))/gim\n    while ((match = re.exec(text.utf16))) {\n      let uri = match[2]\n      if (!uri.startsWith('http')) {\n        const domain = match.groups?.domain\n        if (!domain || !isValidDomain(domain)) {\n          continue\n        }\n        uri = `https://${uri}`\n      }\n      const start = text.utf16.indexOf(match[2], match.index)\n      const index = { start, end: start + match[2].length }\n      // strip ending puncuation\n      if (/[.,;!?]$/.test(uri)) {\n        uri = uri.slice(0, -1)\n        index.end--\n      }\n      if (/[)]$/.test(uri) && !uri.includes('(')) {\n        uri = uri.slice(0, -1)\n        index.end--\n      }\n      facets.push({\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(index.start),\n          byteEnd: text.utf16IndexToUtf8Index(index.end),\n        },\n        features: [\n          {\n            $type: 'app.bsky.richtext.facet#link',\n            uri,\n          },\n        ],\n      })\n    }\n  }\n  return facets.length > 0 ? facets : undefined\n}\n\nfunction isValidDomain(str: string): boolean {\n  return !!TLDs.find((tld) => {\n    const i = str.lastIndexOf(tld)\n    if (i === -1) {\n      return false\n    }\n    return str.charAt(i - 1) === '.' && i === str.length - tld.length\n  })\n}\n","/*\n= Rich Text Manipulation\n\nWhen we sanitize rich text, we have to update the entity indices as the\ntext is modified. This can be modeled as inserts() and deletes() of the\nrich text string. The possible scenarios are outlined below, along with\ntheir expected behaviors.\n\nNOTE: Slices are start inclusive, end exclusive\n\n== richTextInsert()\n\nTarget string:\n\n   0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w o r l d   // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\nScenarios:\n\nA: ^                       // insert \"test\" at 0\nB:        ^                // insert \"test\" at 4\nC:                 ^       // insert \"test\" at 8\n\nA = before           -> move both by num added\nB = inner            -> move end by num added\nC = after            -> noop\n\nResults:\n\nA: 0 1 2 3 4 5 6 7 8 910   // string indices\n   t e s t h e l l o   w   // string value\n               ^-------^   // target slice {start: 6, end: 11}\n\nB: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l t e s t o   w   // string value\n       ^---------------^   // target slice {start: 2, end: 11}\n\nC: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w o t e s   // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\n== richTextDelete()\n\nTarget string:\n\n   0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w o r l d   // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\nScenarios:\n\nA: ^---------------^       // remove slice {start: 0, end: 9}\nB:               ^-----^   // remove slice {start: 7, end: 11}\nC:         ^-----------^   // remove slice {start: 4, end: 11}\nD:       ^-^               // remove slice {start: 3, end: 5}\nE:   ^-----^               // remove slice {start: 1, end: 5}\nF: ^-^                     // remove slice {start: 0, end: 2}\n\nA = entirely outer   -> delete slice\nB = entirely after   -> noop\nC = partially after  -> move end to remove-start\nD = entirely inner   -> move end by num removed\nE = partially before -> move start to remove-start index, move end by num removed\nF = entirely before  -> move both by num removed\n\nResults:\n\nA: 0 1 2 3 4 5 6 7 8 910   // string indices\n   l d                     // string value\n                           // target slice (deleted)\n\nB: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w           // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\nC: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l                 // string value\n       ^-^                 // target slice {start: 2, end: 4}\n\nD: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l   w o r l d       // string value\n       ^---^               // target slice {start: 2, end: 5}\n\nE: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h   w o r l d           // string value\n     ^-^                   // target slice {start: 1, end: 3}\n\nF: 0 1 2 3 4 5 6 7 8 910   // string indices\n   l l o   w o r l d       // string value\n   ^-------^               // target slice {start: 0, end: 5}\n */\n\nimport { AtpAgent } from '../agent'\nimport { AppBskyFeedPost, AppBskyRichtextFacet } from '../client'\nimport { UnicodeString } from './unicode'\nimport { sanitizeRichText } from './sanitization'\nimport { detectFacets } from './detection'\n\nexport type Facet = AppBskyRichtextFacet.Main\nexport type FacetLink = AppBskyRichtextFacet.Link\nexport type FacetMention = AppBskyRichtextFacet.Mention\nexport type Entity = AppBskyFeedPost.Entity\n\nexport interface RichTextProps {\n  text: string\n  facets?: Facet[]\n  /**\n   * @deprecated Use facets instead\n   */\n  entities?: Entity[]\n}\n\nexport interface RichTextOpts {\n  cleanNewlines?: boolean\n}\n\nexport class RichTextSegment {\n  constructor(public text: string, public facet?: Facet) {}\n\n  get link(): FacetLink | undefined {\n    const link = this.facet?.features.find(AppBskyRichtextFacet.isLink)\n    if (AppBskyRichtextFacet.isLink(link)) {\n      return link\n    }\n    return undefined\n  }\n\n  isLink() {\n    return !!this.link\n  }\n\n  get mention(): FacetMention | undefined {\n    const mention = this.facet?.features.find(AppBskyRichtextFacet.isMention)\n    if (AppBskyRichtextFacet.isMention(mention)) {\n      return mention\n    }\n    return undefined\n  }\n\n  isMention() {\n    return !!this.mention\n  }\n}\n\nexport class RichText {\n  unicodeText: UnicodeString\n  facets?: Facet[]\n\n  constructor(props: RichTextProps, opts?: RichTextOpts) {\n    this.unicodeText = new UnicodeString(props.text)\n    this.facets = props.facets\n    if (!this.facets?.length && props.entities?.length) {\n      this.facets = entitiesToFacets(this.unicodeText, props.entities)\n    }\n    if (this.facets) {\n      this.facets.sort(facetSort)\n    }\n    if (opts?.cleanNewlines) {\n      sanitizeRichText(this, { cleanNewlines: true }).copyInto(this)\n    }\n  }\n\n  get text() {\n    return this.unicodeText.toString()\n  }\n\n  get length() {\n    return this.unicodeText.length\n  }\n\n  get graphemeLength() {\n    return this.unicodeText.graphemeLength\n  }\n\n  clone() {\n    return new RichText({\n      text: this.unicodeText.utf16,\n      facets: cloneDeep(this.facets),\n    })\n  }\n\n  copyInto(target: RichText) {\n    target.unicodeText = this.unicodeText\n    target.facets = cloneDeep(this.facets)\n  }\n\n  *segments(): Generator<RichTextSegment, void, void> {\n    const facets = this.facets || []\n    if (!facets.length) {\n      yield new RichTextSegment(this.unicodeText.utf16)\n      return\n    }\n\n    let textCursor = 0\n    let facetCursor = 0\n    do {\n      const currFacet = facets[facetCursor]\n      if (textCursor < currFacet.index.byteStart) {\n        yield new RichTextSegment(\n          this.unicodeText.slice(textCursor, currFacet.index.byteStart),\n        )\n      } else if (textCursor > currFacet.index.byteStart) {\n        facetCursor++\n        continue\n      }\n      if (currFacet.index.byteStart < currFacet.index.byteEnd) {\n        const subtext = this.unicodeText.slice(\n          currFacet.index.byteStart,\n          currFacet.index.byteEnd,\n        )\n        if (!subtext.trim()) {\n          // dont empty string entities\n          yield new RichTextSegment(subtext)\n        } else {\n          yield new RichTextSegment(subtext, currFacet)\n        }\n      }\n      textCursor = currFacet.index.byteEnd\n      facetCursor++\n    } while (facetCursor < facets.length)\n    if (textCursor < this.unicodeText.length) {\n      yield new RichTextSegment(\n        this.unicodeText.slice(textCursor, this.unicodeText.length),\n      )\n    }\n  }\n\n  insert(insertIndex: number, insertText: string) {\n    this.unicodeText = new UnicodeString(\n      this.unicodeText.slice(0, insertIndex) +\n        insertText +\n        this.unicodeText.slice(insertIndex),\n    )\n\n    if (!this.facets?.length) {\n      return this\n    }\n\n    const numCharsAdded = insertText.length\n    for (const ent of this.facets) {\n      // see comment at top of file for labels of each scenario\n      // scenario A (before)\n      if (insertIndex <= ent.index.byteStart) {\n        // move both by num added\n        ent.index.byteStart += numCharsAdded\n        ent.index.byteEnd += numCharsAdded\n      }\n      // scenario B (inner)\n      else if (\n        insertIndex >= ent.index.byteStart &&\n        insertIndex < ent.index.byteEnd\n      ) {\n        // move end by num added\n        ent.index.byteEnd += numCharsAdded\n      }\n      // scenario C (after)\n      // noop\n    }\n    return this\n  }\n\n  delete(removeStartIndex: number, removeEndIndex: number) {\n    this.unicodeText = new UnicodeString(\n      this.unicodeText.slice(0, removeStartIndex) +\n        this.unicodeText.slice(removeEndIndex),\n    )\n\n    if (!this.facets?.length) {\n      return this\n    }\n\n    const numCharsRemoved = removeEndIndex - removeStartIndex\n    for (const ent of this.facets) {\n      // see comment at top of file for labels of each scenario\n      // scenario A (entirely outer)\n      if (\n        removeStartIndex <= ent.index.byteStart &&\n        removeEndIndex >= ent.index.byteEnd\n      ) {\n        // delete slice (will get removed in final pass)\n        ent.index.byteStart = 0\n        ent.index.byteEnd = 0\n      }\n      // scenario B (entirely after)\n      else if (removeStartIndex > ent.index.byteEnd) {\n        // noop\n      }\n      // scenario C (partially after)\n      else if (\n        removeStartIndex > ent.index.byteStart &&\n        removeStartIndex <= ent.index.byteEnd &&\n        removeEndIndex > ent.index.byteEnd\n      ) {\n        // move end to remove start\n        ent.index.byteEnd = removeStartIndex\n      }\n      // scenario D (entirely inner)\n      else if (\n        removeStartIndex >= ent.index.byteStart &&\n        removeEndIndex <= ent.index.byteEnd\n      ) {\n        // move end by num removed\n        ent.index.byteEnd -= numCharsRemoved\n      }\n      // scenario E (partially before)\n      else if (\n        removeStartIndex < ent.index.byteStart &&\n        removeEndIndex >= ent.index.byteStart &&\n        removeEndIndex <= ent.index.byteEnd\n      ) {\n        // move start to remove-start index, move end by num removed\n        ent.index.byteStart = removeStartIndex\n        ent.index.byteEnd -= numCharsRemoved\n      }\n      // scenario F (entirely before)\n      else if (removeEndIndex < ent.index.byteStart) {\n        // move both by num removed\n        ent.index.byteStart -= numCharsRemoved\n        ent.index.byteEnd -= numCharsRemoved\n      }\n    }\n\n    // filter out any facets that were made irrelevant\n    this.facets = this.facets.filter(\n      (ent) => ent.index.byteStart < ent.index.byteEnd,\n    )\n    return this\n  }\n\n  /**\n   * Detects facets such as links and mentions\n   * Note: Overwrites the existing facets with auto-detected facets\n   */\n  async detectFacets(agent: AtpAgent) {\n    this.facets = detectFacets(this.unicodeText)\n    if (this.facets) {\n      for (const facet of this.facets) {\n        for (const feature of facet.features) {\n          if (AppBskyRichtextFacet.isMention(feature)) {\n            const did = await agent\n              .resolveHandle({ handle: feature.did })\n              .catch((_) => undefined)\n              .then((res) => res?.data.did)\n            feature.did = did || ''\n          }\n        }\n      }\n      this.facets.sort(facetSort)\n    }\n  }\n\n  /**\n   * Detects facets such as links and mentions but does not resolve them\n   * Will produce invalid facets! For instance, mentions will not have their DIDs set.\n   * Note: Overwrites the existing facets with auto-detected facets\n   */\n  detectFacetsWithoutResolution() {\n    this.facets = detectFacets(this.unicodeText)\n    if (this.facets) {\n      this.facets.sort(facetSort)\n    }\n  }\n}\n\nconst facetSort = (a, b) => a.index.byteStart - b.index.byteStart\n\nfunction entitiesToFacets(text: UnicodeString, entities: Entity[]): Facet[] {\n  const facets: Facet[] = []\n  for (const ent of entities) {\n    if (ent.type === 'link') {\n      facets.push({\n        $type: 'app.bsky.richtext.facet',\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end),\n        },\n        features: [{ $type: 'app.bsky.richtext.facet#link', uri: ent.value }],\n      })\n    } else if (ent.type === 'mention') {\n      facets.push({\n        $type: 'app.bsky.richtext.facet',\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end),\n        },\n        features: [\n          { $type: 'app.bsky.richtext.facet#mention', did: ent.value },\n        ],\n      })\n    }\n  }\n  return facets\n}\n\nfunction cloneDeep<T>(v: T): T {\n  if (typeof v === 'undefined') {\n    return v\n  }\n  return JSON.parse(JSON.stringify(v))\n}\n","import { AtUri } from '@atproto/uri'\nimport { AtpAgent } from './agent'\nimport {\n  AppBskyFeedPost,\n  AppBskyActorProfile,\n  ComAtprotoRepoPutRecord,\n} from './client'\n\nexport class BskyAgent extends AtpAgent {\n  get app() {\n    return this.api.app\n  }\n\n  getTimeline: typeof this.api.app.bsky.feed.getTimeline = (params, opts) =>\n    this.api.app.bsky.feed.getTimeline(params, opts)\n\n  getAuthorFeed: typeof this.api.app.bsky.feed.getAuthorFeed = (params, opts) =>\n    this.api.app.bsky.feed.getAuthorFeed(params, opts)\n\n  getPostThread: typeof this.api.app.bsky.feed.getPostThread = (params, opts) =>\n    this.api.app.bsky.feed.getPostThread(params, opts)\n\n  getPost: typeof this.api.app.bsky.feed.post.get = (params) =>\n    this.api.app.bsky.feed.post.get(params)\n\n  getLikes: typeof this.api.app.bsky.feed.getLikes = (params, opts) =>\n    this.api.app.bsky.feed.getLikes(params, opts)\n\n  getRepostedBy: typeof this.api.app.bsky.feed.getRepostedBy = (params, opts) =>\n    this.api.app.bsky.feed.getRepostedBy(params, opts)\n\n  getFollows: typeof this.api.app.bsky.graph.getFollows = (params, opts) =>\n    this.api.app.bsky.graph.getFollows(params, opts)\n\n  getFollowers: typeof this.api.app.bsky.graph.getFollowers = (params, opts) =>\n    this.api.app.bsky.graph.getFollowers(params, opts)\n\n  getProfile: typeof this.api.app.bsky.actor.getProfile = (params, opts) =>\n    this.api.app.bsky.actor.getProfile(params, opts)\n\n  getProfiles: typeof this.api.app.bsky.actor.getProfiles = (params, opts) =>\n    this.api.app.bsky.actor.getProfiles(params, opts)\n\n  searchActors: typeof this.api.app.bsky.actor.searchActors = (params, opts) =>\n    this.api.app.bsky.actor.searchActors(params, opts)\n\n  searchActorsTypeahead: typeof this.api.app.bsky.actor.searchActorsTypeahead =\n    (params, opts) =>\n      this.api.app.bsky.actor.searchActorsTypeahead(params, opts)\n\n  listNotifications: typeof this.api.app.bsky.notification.listNotifications = (\n    params,\n    opts,\n  ) => this.api.app.bsky.notification.listNotifications(params, opts)\n\n  countUnreadNotifications: typeof this.api.app.bsky.notification.getUnreadCount =\n    (params, opts) =>\n      this.api.app.bsky.notification.getUnreadCount(params, opts)\n\n  async post(\n    record: Partial<AppBskyFeedPost.Record> &\n      Omit<AppBskyFeedPost.Record, 'createdAt'>,\n  ) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    record.createdAt = record.createdAt || new Date().toISOString()\n    return this.api.app.bsky.feed.post.create(\n      { repo: this.session.did },\n      record as AppBskyFeedPost.Record,\n    )\n  }\n\n  async deletePost(postUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const postUrip = new AtUri(postUri)\n    return await this.api.app.bsky.feed.post.delete({\n      repo: postUrip.hostname,\n      rkey: postUrip.rkey,\n    })\n  }\n\n  async like(uri: string, cid: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.feed.like.create(\n      { repo: this.session.did },\n      {\n        subject: { uri, cid },\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async deleteLike(likeUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const likeUrip = new AtUri(likeUri)\n    return await this.api.app.bsky.feed.like.delete({\n      repo: likeUrip.hostname,\n      rkey: likeUrip.rkey,\n    })\n  }\n\n  async repost(uri: string, cid: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.feed.repost.create(\n      { repo: this.session.did },\n      {\n        subject: { uri, cid },\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async deleteRepost(repostUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const repostUrip = new AtUri(repostUri)\n    return await this.api.app.bsky.feed.repost.delete({\n      repo: repostUrip.hostname,\n      rkey: repostUrip.rkey,\n    })\n  }\n\n  async follow(subjectDid: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.graph.follow.create(\n      { repo: this.session.did },\n      {\n        subject: subjectDid,\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async deleteFollow(followUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const followUrip = new AtUri(followUri)\n    return await this.api.app.bsky.graph.follow.delete({\n      repo: followUrip.hostname,\n      rkey: followUrip.rkey,\n    })\n  }\n\n  async upsertProfile(\n    updateFn: (\n      existing: AppBskyActorProfile.Record | undefined,\n    ) => AppBskyActorProfile.Record | Promise<AppBskyActorProfile.Record>,\n  ) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n\n    let retriesRemaining = 5\n    while (retriesRemaining >= 0) {\n      // fetch existing\n      const existing = await this.com.atproto.repo\n        .getRecord({\n          repo: this.session.did,\n          collection: 'app.bsky.actor.profile',\n          rkey: 'self',\n        })\n        .catch((_) => undefined)\n\n      // run the update\n      const updated = await updateFn(existing?.data.value)\n      if (updated) {\n        updated.$type = 'app.bsky.actor.profile'\n      }\n\n      // validate the record\n      const validation = AppBskyActorProfile.validateRecord(updated)\n      if (!validation.success) {\n        throw validation.error\n      }\n\n      try {\n        // attempt the put\n        await this.com.atproto.repo.putRecord({\n          repo: this.session.did,\n          collection: 'app.bsky.actor.profile',\n          rkey: 'self',\n          record: updated,\n          swapRecord: existing?.data.cid || null,\n        })\n      } catch (e: unknown) {\n        if (\n          retriesRemaining > 0 &&\n          e instanceof ComAtprotoRepoPutRecord.InvalidSwapError\n        ) {\n          // try again\n          retriesRemaining--\n          continue\n        } else {\n          throw e\n        }\n      }\n      break\n    }\n  }\n\n  async mute(actor: string) {\n    return this.api.app.bsky.graph.muteActor({ actor })\n  }\n\n  async unmute(actor: string) {\n    return this.api.app.bsky.graph.unmuteActor({ actor })\n  }\n\n  async updateSeenNotifications(seenAt?: string) {\n    seenAt = seenAt || new Date().toISOString()\n    return this.api.app.bsky.notification.updateSeen({\n      seenAt,\n    })\n  }\n}\n"],"names":["t","r","n","e","i","o","a","u","d","src_exports","defs_exports","getRecord_exports","getRepo_exports","def","decode","code","digest","bytes","equals","name","encode","length","j","string","decoder","alphabet","version","base","cid","from","identity_exports","identity","encoder","fromString","toString","array","util","object","params","errorUtil","errorMap","ctx","result","schema","objectUtil","issues","schemas","elements","processed","ZodFirstPartyTypeKind","handle","did","nsid","uri","isHandle","lexicons","validate","ResponseType","toKnownErr","src","isObj","hasProp","InvalidSwapError","InvalidHandleError","AccountTakedownError","ExpiredTokenError","InvalidTokenError","isInfo","validateInfo","isRecord","validateRecord","isMain","validateMain","isView","validateView","isViewerState","validateViewerState","isReplyRef","validateReplyRef"],"version":3,"file":"index.c6e689bc.js.map","sourceRoot":"/__parcel_source_root/"}